11.6.13
Running sicer with params W350 G700 E5-15 over DRIPc all chromosomes
  dir : DRIP_DRIPc_all/TESTRUN
  cp *.score* files over to DRIP_DRIPc_all/peakfiles
For some reason last time sicer used G2100, and the re-run somehow deleted the *.score* files or they are in some hidden dir.

drip2 data : is W100G200E5-15 really best? Isn't that actually the smallest gap allowed? Check. -> It is the smallest gap allowed, but window size is not smallest (which is 50) so it should be ok. 

Splitting + - for DRIPc data makes it look much better.

Folder names have been changed
all peak files (FINAL) currently unfiltered, are in DRIP_DRIPc/peakfiles
  this includes DRIP and DRIPc rep1/2 plus/minus
  DRIP : W100G200E5-15
  DRIPc : W350G700E5-15
  no filtering (doesn't look like it needs it)
  peaks are very good! Go on to metaplots now.
TESTRUN has been mv to DRIPc_bestparams/allchrs_finalrun_W350G700E5-15
--------- End of peak calling ------------

--------- Metaplots ----------

dir is region_metaplots
currently the two bed files (term is v loose) are all cpg islands and all refseg genes (cpg_islands_all.txt , refseq_all_genes_allinfo.txt)
  downloaded from UCSC genome browser table brower
  contain all info given
  hg19 

header to refseq file :
#bin    name    chrom   strand  txStart txEnd   cdsStart        cdsEnd  exonCount       exonStarts      exonEnds     score   name2   cdsStartStat    cdsEndStat      exonFrames

header to cpg file :
#bin    chrom   chromStart      chromEnd        name    length  cpgNum  gcNum      perCpg  perGc   obsExp

Will need to extract / reformat later.

cp scripts/port to region_metaplot/
  will use the metaplot_lowmem_both_0.2.pl from here as it is probably most recent
  need to test and fix errors / figure out file format
  cp'd metaplot*.pl, bed.bed, wig.wig to region_metaplot/test_metaplot 

the DRIP/DRIPc file peaks are the wig files
bed files are all cpg, all refseq files
note : all *.score* files have a track header

format of *.score*
chr#  [start] [end] [SICER score]

format of wig file
variableStep chrom=chr# span=#
[start] [score]
[start2]  [score2]

use bedgraph_to_wig.pl to transfer *.score* files to *.wig files (it can handle tracks / headers)

maybe test with just chr19 for both wig and bed files first

metaplot script reqs:
  bed file needs to be in this format:
  chr#  [start] [end] [strand]
  
note : the SICER score should not be used as the [score] for the wig file because it will get added and is not actually an indication of height.
  Do not use the SICER output wig files, they are just the raw DRIP(c) data with less resolution

Try making score=1 for everything in wig file first
  note : avg is height / count for the script, and this will make all (height/count) = 1 so may be a problem as all avg will = 1. 

First run : will use SICER score as [score] just to see

cp /data/aparna/DRIP_DRIPc/peakfiles/NT2_drip2* /data/aparna/region_metaplots/test_metaplot/

cat NT2_drip* | grep chr19 > chr19_drip_peaks.bedgraph

bedgraph_to_wig.pl chr19_drip_peaks.bedgraph 
  outfile is chr19_drip_peaks.bedgraph.wig
  rm NT2_drip* chr19_drip_peaks.bedgraph

now need to make refseq file into a testfile for only chr19 and important columns

awk '{print $3 "\t" $5 "\t" $6 "\t" $4}' refseq_all_genes_allinfo.txt > refseq_allgenes_cols.bed

cat refseq_allgenes_cols.bed | grep chr19 > chr19_refseq.bed
cp chr19_refseq.bed test_metaplot

11.7.13

Ran ./metaplot_lowmem_0.2.pl chr19_drip_peaks.bedgraph.wig chr19_refseq.bed
  output : metaplot_outfile.{pdf, R, txt}
  error in R : need mgcv package for smoothing (probably)
    library(mgcv) says that mgcv is built prior to 3.0 version, need to reinstall
    installed neccesary packages on local computer, can run 
      R --no-save < metaplot_outfile.R
    on local
Note : probably peak files are not the ones to be used. Use original DRIP(c) wig files (these actually have height)

Current runs are just to test if metaplot_lowmem*.pl actually works
Note : use version local to the dir, NOT the version in scripts/ or else many many problems debuging.

Now to test with original DRIPc files (which I don't have)
  Testing with just chr19
  use chr19_refseq.bed as bed file
  I need to get the DRIPc/DRIP wig files as used on genome browser session

11.12.13

R problems fixed.
Recieved NT2_dripc_minus_treat_afterfiting_all.wig NT2_dripc_plus_treat_afterfiting_all.wig in folder region_metaplots/DRIPc_wig/
  These are combined rep1/rep2 files. Use combined files from now on.
Make a combined peak file by cat , sort , bedtools merge. rep1/rep2 keep +/- seperate

YWL: I combined rep1 and rep2 peak files (taking mean score if 2 peaks overlap):
cat NT2_dripc_rep1_plus-W350-G700-E0.000000000000005.scoreisland NT2_dripc_rep2_plus-W350-G700-E0.000000000000005.scoreisland | sort -k1,1 -k2,2n | awk '{print $1 "\t" $2 "\t" $3 "\t.\t" $4 "\t+"}' > temp
bedtools merge -scores mean -i temp > NT2_dripc_plus.bed
cat NT2_dripc_rep1_minus-W350-G700-E0.000000000000005.scoreisland NT2_dripc_rep2_minus-W350-G700-E0.000000000000005.scoreisland | sort -k1,1 -k2,2n | awk '{print $1 "\t" $2 "\t" $3 "\t.\t" $4 "\t-"}' > temp
bedtools merge -scores mean -i temp > NT2_dripc_minus.bed
rm temp
awk '{print $1 "\t" $2 "\t" $3 "\t.\t" $4 "\t+"}' /data/aparna/DRIP_DRIPc/peakfiles/NT2_dripc_plus.bed > NT2_dripc_sicer.bed
awk '{print $1 "\t" $2 "\t" $3 "\t.\t" $4 "\t-"}' /data/aparna/DRIP_DRIPc/peakfiles/NT2_dripc_minus.bed >> NT2_dripc_sicer.bed

So far metaplot_lowmem* seems to be working. Going to test now with the DRIPc wigs.
rm metaplot_outfile*
Want to make just a chr19 wig (to test with).
  Wrote script parse_wig.pl to read through wig file. mv parse_wig.pl to scripts/
  output is chr19.wig. mv to chr19_NT2_dripc_plus_all.wig. mv to DRIPc_wig/
    this is just chr19 from the combined repeates DRIPc wig file
now need to run metaplot_lowmem*.pl with DRIPc_wig/chr19_NT2_dripc_plus_all.wig refseq_chr19.bed <- not sure if correct file name

11.13.13

Going to run parse_wig.pl over NT2_dripc_minus_treat_afterfiting_all.wig, then cat both chr19 wigs together. 

parse_wig.pl NT2_dripc_minus_treat_afterfiting_all.wig chr19
mv chr19.wig chr19_NT2_dripc_minus_all.wig
cat chr19_NT2_dripc_minus_all.wig chr19_NT2_dripc_plus_all.wig >> chr19_NT2_dripc_both_all.wig

cd to test_metaplot/

./metaplot_lowmem_both_0.2.pl ../DRIPc_wig/chr19_NT2_dripc_both_all.wig chr19_refseq.bed refseq_chr19

./metaplot*.pl did work and output a metaplot. But it looks very strange. Large peak at -5000 bp.
Also, where does 5000 come from? Find and check. Need to adjust this. Perhaps better peaks will show once this is changed.
  it is not set in the script (did a /5000 search in vim) 
  has something to do with $x in process () ?
Going to run ./metaplot_lowmem*.pl with the plus and minus DRIPc wig files seperate

rm metaplot_outfile.*
./metaplot_lowmem_both_0.2.pl ../DRIPc_wig/chr19_NT2_dripc_plus_all.wig ../chr19_refseq.bed refseq_chr19_plus

Looks slightly different but still huge peak at 5000
Try running with wig.wig bed.bed to test if still 5000
  uninitialized values, this won't work

testing with H3K4Me3 and refseq chr19

./metaplot_lowmem_both_0.2.pl GSM779435_H3K4Me3_cycling_peaks.bedgraph.wig ../chr19_refseq.bed h3k4me3_refseq_19

  Got the strangest graph. Now going to run over whole genome refseq. Maybe it is a chr19 issue?

./metaplot_lowmem_both_0.2.pl GSM779435_H3K4Me3_cycling_peaks.bedgraph.wig ../refseq_allgenes_cols.bed h3k4me3_refseq

Other issue : why doesn't metaplot_lowmem*.pl print out chrs as it finishes them? It only prints them all out at the end of process (). Something to do with the perl interpreter?

H3K4Me3 is horribly wrong. What is wrong with this script?

cp metaplot_lowmem_both_0.2.pl DEBUG_metaplot_0.2.pl

---new---

make a list of genes that are not protein coding in both directions
download refseq all genes 
seperate by plus and minus
make a list of genes that do not have a TSS on the opposite strand within 2KB upstream of their own TSS

ex 
using 1 kb for ex
gene A (+) TSS is 1500
gene B (-) TSS is 1400
1000.....1100.....1300....1400....1500...
                                  A ->->->
                     <-<-<- B
Throw out both gene A and B
window upstream of gene A is 1500 to 500
window upstream of gene B is 1400 to 2400
because window of A overlaps TSS of B, throw out A
Because window of B overlaps TSS of A, throw out B
(use bedtools intersect for this)

Then find all genes on + that have an antisense R-loop peak on - within 2kb
Overlap with peak files

Later : metaplots of these genes

--new--

take file of all TSS without another TSS on opp strand within 2kb
overlap with sicer file of both strands both reps merged
  bedtools intersect -u 
  do one run strand-specific (+ to +)
  and one NOT strand specific (+ to -)
  so -S and -(other)


## DEBUG NOTES ##
debug run :
./DEBUG_metaplot_0.2.pl GSM779435_H3K4Me3_cycling_peaks.bedgraph.wig ../chr19_refseq.bed refseq

$x changes for each $num2
confirmed $x in print_results = $x for last chr bedfile # why did I think this was a good idea?

when num2 = 1 x = 8623 (???)
but x does restart every time num increments
does x equal total num bp for each line?
shouldn't it equal m then? no. it should equal $end - $start + 1

confirmed $x = $end - $start + 2

so essentially x is a little more than the length of a gene
updated for every gene of every chr of every bedfile
the last of these is passed to print_results ()

in print_results () :
$h = 0 - ( $x / 2 )

then for $i = 1 ; $i < $x ; $i ++
print OUT $h + 1
  these are the bp x-axis coordinates

for each i then find the avg and count from the data of bedfile pos=i
  note : this data should be normalized where 0 = TSS (or something) 

trying to run stella's metaplot script with same files.
need a bedfile with format chr start end name dot strand

awk '{print $1 "\t" $2 "\t" $3 "\tname\tdot\t" $4}' chr19_refseq.bed > test_chr19_morecols.bed
perl stellas_metaplot.pl GSM779435_H3K4Me3_cycling_peaks.bedgraph.wig 500 ../test_chr19_morecols.bed 
outfile :
test_chr19_morecols.bed.GSM779435_H3K4Me3_cycling_peaks.bedgraph.wig.tsv

This also output a really strange graph. Either I am not understanding something obvious or something is wrong with one of the files.

now going to try DEBUG_metaplot*.pl with AGS known correct wig file and all refseq
aparna@zeus:/data/aparna/testing_metaplot$ cp AGS1_meth.wig ../region_metaplots/test_metaplot/

./DEBUG_metaplot_0.2.pl AGS1_meth.wig ../refseq_allgenes_cols.bed refseq_all

11.14.13

I think I know the error! It is a file formatting error, which is why both scripts seem to give strange results. For the bed file, need to pre-process before running the script.

Currently bedfile is 
chr#  start end strand

need to take this and for each start +-(window) (so like 500) output in new file throwing out the "end" and of course using end instead of start for - strand.
  write a script that does this (perl, I don't know awk ifelse)
  use this file for bed file
ex
chr1  1000  1400  +
chr1  2100  6000  -

new file:
chr1  500 1500  +
chr1  5500  6500  -

(using window size of 500 here) Note this is for TSS! For TTS, use the other number (end instead of start for +, start instead of end for -)

If this change is made, the use of $x makes WAY more sense (but is still not the best way of doing things ... very inefficient)
Still not sure about $k initialization or $l needing +1, but first make this change and check, then can optimize other variables later. Removing $x will throw many errors, but can be fixed and is probably a good idea. Instead have user input for window size.

script is preprocess_bed.pl. Need to test and put in scripts/

./preprocess_bed.pl chr19_refseq.bed 500
./preprocess_bed.pl  refseq_allgenes_cols.bed 500

outfiles :
TSS_processedchr19_refseq.bed        
TSS_processedrefseq_allgenes_cols.bed

mv preprocess_bed.pl ../scripts/
./DEBUG_metaplot_0.2.pl ../DRIPc_wig/chr19_NT2_dripc_plus_all.wig ../TSS_processedchr19_refseq.bed refseq19

again strange graph maybe because chr19 or 500 is too small window
Pos slope line with very large CL / smoothing
issue : $x is 1002 not 1000 

running with all plus DRIPc wig over all genes refseq
screen -S test_metaplot ./DEBUG_metaplot_0.2.pl ../DRIPc_wig/NT2_dripc_plus_treat_afterfiting_all.wig ../TSS_processedrefseq_allgenes_cols.bed all_refseq_plusDRIPc

try with H3K4Me3 after this run
run started at (11/14/13 13:10:39)
is now :26 done
sharp elbow at 0 bp

running with H3K4Me3

screen -S test_metaplot ./DEBUG_metaplot_0.2.pl GSM779435_H3K4Me3_cycling_peaks.bedgraph.wig ../TSS_processedrefseq_allgenes_cols.bed refseq_tss_h3k4me3

metaplot looks very strange but original metaplot was over 2000 and this was 500

ran preprocess_bed over refseq all and chr19 with 1000 window

re-running metaplot (mine and stella's with same files)
screen -S test_metaplot ./DEBUG_metaplot_0.2.pl GSM779435_H3K4Me3_cycling_peaks.bedgraph.wig ../TSS_processedrefseq_allgenes_cols.bed refseq_tss_h3k4me3

screen -S test2 perl stellas_metaplot.pl GSM779435_H3K4Me3_cycling_peaks.bedgraph.wig 1000 ../TSS_processedrefseq_allgenes_cols.bed

ran it over 1000 ... should have done over 2000
still looks strange 

re-doing over 2000 also making a bed with extra columns for stella's
STILL wrong

11.15.13

make a list of all DRIPc peaks with no DRIP peaks and all DRIP peaks with no DRIPc peaks
sort by score

modifying drip peak file to match format of dripc peak file (using NT@_dripc_sicer.bed)

cp  NT2_drip2-W100-G200-E0.000000000000005.scoreisland drip2_W100G200E5-15_peaks.scoreisland
delete header line
awk '{print $1 "\t" $2 "\t" $3 "\t.\t" $4}' drip2_W100G200E5-15_peaks.scoreisland > drip2_peaks.bed

bedtools intersect -v -a NT2_dripc_sicer.bed -b drip2_peaks.bed > dripc_nooverlap_drip.bed
bedtools intersect -v -a drip2_peaks.bed -b NT2_dripc_sicer.bed > drip_nooverlap_dripc.bed
sort -k 5 -nr drip_nooverlap_dripc.bed > sorted_drip_nooverlap_dripc.bed 
sort -k 5 -nr dripc_nooverlap_drip.bed > sorted_dripc_nooverlap_drip.bed 

wig_to_metaplot.pl is in test_metaplot. Needs seperate +/- files for bed.
grep + (TSSfile) > plus_(TSSfile)
grep - (TSSfile) > minus_(TSSfile)

ran wig_to_metaplot.pl, very flat line. Run over 2000 window.
./wig_to_metaplot.pl -w GSM779435_H3K4Me3_cycling_peaks.bedgraph.wig -b ../plus_TSS_processedrefseq_allgenes_cols.bed,../minus_TSS_processedrefseq_allgenes_cols.bed -n refseq_all

going to run my script again.
screen -S testing ./metaplot_lowmem_both_0.2.pl GSM779435_H3K4Me3_cycling_peaks.bedgraph.wig ../TSS_processedrefseq_allgenes_cols.bed refseq_all

what if it is an hg error? It looks like a file error now, since all three scripts are giving very strange graphs.

Hooray! It is a file format error!
Ran my script at Yoong Wearn's script. wig_to_metaplot.pl has an extra thing in the R script. Inserted that into metaplot_outfile.R and ran R --vanilla < metaplot_outfile.R. Resulting pdf is essentially EXACTLY the same as the metaplot.pdf! There is nothing actually wrong with my script, I'm just making a very basic error somewhere!

It is almost certainly the bed file. So that means a hg error, my preprocess_bed.pl, refseq download issue, or I'm using the wrong coordinates. Wigfile is probably ok, though it may also be bedgraph_to_wig messing up (but I was still getting weird graphs with AGS, which is known to be ok).

Going to eliminate the possibility of wig file issue first.

screen -S test1 ./wig_to_metaplot.pl -w AGS1_meth.wig -b ../plus_TSS_processedrefseq_allgenes_cols.bed,../minus_TSS_processedrefseq_allgenes_cols.bed -n refseq_all
screen -S test2 ./metaplot_lowmem_both_0.2.pl AGS1_meth.wig ../TSS_processedrefseq_allgenes_cols.bed refseq_all

AGS turned out ok! So it's a wig file issue .. or both AGS and bed file are same hg
try with DRIPc now.

screen -S test2 ./metaplot_lowmem_both_0.2.pl ../DRIPc_wig/NT2_dripc_plus_treat_afterfiting_all.wig ../TSS_processedrefseq_allgenes_cols.bed refseq_all
screen -S test1 ./wig_to_metaplot.pl -w ../DRIPc_wig/NT2_dripc_plus_treat_afterfiting_all.wig -b ../plus_TSS_processedrefseq_allgenes_cols.bed,../minus_TSS_processedrefseq_allgenes_cols.bed -n refseq_all

also got hg19_refseq_genes.tsv which has chr, strand, txStart, txEnd
awk '{print $1 "\t" $3 "\t" $4 "\t" $2}' hg19_refseq_genes.tsv > format_hg19_refseq_genes.bed
preprocess_bed.pl format_hg19_refseq_genes.bed 2000
removed header line
TSS_processedformat_hg19_refseq_genes.bed outfile
grep + TSS_processedformat_hg19_refseq_genes.bed > plus_TSS_processedformat_hg19_refseq_genes.bed 
grep - TSS_processedformat_hg19_refseq_genes.bed > minus_TSS_processedformat_hg19_refseq_genes.bed

Going to re-run AGS with bed files I KNOW are hg19 after DRIPc run is finished.
  otherwise outfiles will be overwritten

What on earth? the outfile for DRIPc from my script looks almost correct. Can still see that elbow, but maybe that's because my window size was too small?
What if there was no problem, just my window was too small so it looked wrong?
(besides the file format issue I already fixed)
This is the most ridiculous issue.

Preprocess bed file to 10K and try.

preprocess_bed.pl refseq_allgenes_cols.bed 10000
mv TSS_processedrefseq_allgenes_cols.bed 10K_TSS_processedrefseq_allgenes_cols.bed 
screen -S DRIPc ./metaplot_lowmem_both_0.2.pl ../DRIPc_wig/NT2_dripc_plus_treat_afterfiting_all.wig ../10K_TSS_processedrefseq_allgenes_cols.bed refseq_genes

  Hooray! This came out correct!!!

then run with the minus (afterward! or else temp file issues)

screen -S DRIPc ./metaplot_lowmem_both_0.2.pl ../DRIPc_wig/NT2_dripc_minus_treat_afterfiting_all.wig ../10K_TSS_processedrefseq_allgenes_cols.bed refseq_genes

there are still small issues with the metaplot script but I think it's working
Don't run DEBUG! the ./metaplot_lowmem*.pl seems to be correct

diff shows the metaplot script in /data/aparna/scripts/port is the same as in /data/aparna/region_metaplots/test_metaplot

now working on the new analysis of peaks

made dir antisense_peaks
cp refseq_allgenes_cols.bed to this dir
separate plus and minus

grep - refseq_allgenes_cols.bed > minus_refseq_allgenes_cols.bed 
grep + refseq_allgenes_cols.bed > plus_refseq_allgenes_cols.bed 

make a file of coordinates 2000 upstream of TSS for both files (keeping in mind flipping minus)

awk '{print $1 "\t" $2 - 2000 "\t" $2 "\t" $4}' plus_refseq_allgenes_cols.bed > upstream_plus_refseq_allgenes_cols.bed
awk '{print $1 "\t" $3 - 2000 "\t" $3 "\t" $4}' minus_refseq_allgenes_cols.bed > upstream_minus_refseq_allgenes_cols.bed 

make a list of genes that do not have a TSS on the opposite strand within 2KB upstream of their own TSS
Note : doing no gene within 2kb upstream of TSS.

bedtools intersect -c -a upstream_plus_refseq_allgenes_cols.bed -b minus_refseq_allgenes_cols.bed > upstreamplus_nooverlap_minusgenes.bed
bedtools intersect -c -a upstream_minus_refseq_allgenes_cols.bed -b plus_refseq_allgenes_cols.bed > upstreamminus_nooverlap_plusgenes.bed

antisense R-loops
  filter all TSS that have a TSS (TSS only) on the opposite strand 2 KB + or -
  then take that TSS list and take 2KB upstream only and overlap with peak file of the opposite strand
  output peaks
  need to re-do this

metaplot
  modify script:
    input 2 wig files + and -
    if gene is + (from bed file) 
      value in sense array and antisense array
        sense array is from + wig file
        antisense from - wig file
    before outputting text file add a - to all values in antisense array
    text file : 
    pos sense antisense
    make complicated R graph

antisense
  moved all upstream* files to sub dir filtered
  make a list of 2kb window + and - to each TSS
  make a list of all just TSS to overlap with
awk '{print $1 "\t" $2 - 2000 "\t" $2 + 2000 "\t" $4}' plus_refseq_allgenes_cols.bed > 2kbaround_plus_TSS_refseqall.bed
awk '{print $1 "\t" $3 - 2000 "\t" $3 + 2000 "\t" $4}' minus_refseq_allgenes_cols.bed > 2kbaround_minus_TSS_refseqall.bed
awk '{print $1 "\t" $2 "\t" $2 "\t" $4}' plus_refseq_allgenes_cols.bed > TSS_plus_refseqall.bed
awk '{print $1 "\t" $3 "\t" $3 "\t" $4}' minus_refseq_allgenes_cols.bed > TSS_minus_refseqall.bed
bedtools intersect -c -a 2kbaround_plus_TSS_refseqall.bed -b TSS_minus_refseqall.bed > 2kbaround_plus_nooverlap_minusTSS_refseq.bed
bedtools intersect -c -a 2kbaround_minus_TSS_refseqall.bed -b TSS_plus_refseqall.bed > 2kbaround_minus_nooverlap_plusTSS_refseq.bed

11.18.13

Running 
avg_wig_multi_bed_span_big.pl ../../DRIP_DRIPc/DRIP_data/NT2_drip2.bed 1 ../cache ../../DRIP_DRIPc/peakfiles/drip2_peaks.bed  
  this is wrong, because NT2_drip2.bed is not a wig file
probably need the DRIP wig file to do this

cp metaplot_lowmem_both_0.2.pl ../../scripts/

mkdir metaplots_DRIPc_plus_minus_allrefseq
 mv PLUS* and MINUS* from test_metaplot to this dir

now always run metaplot_lowmem from scripts/

parsing cpg_islands_all.txt to be useful (note no strand info)
awk '{print $2 "\t" $3 "\t" $4}' cpg_islands_all.txt > cpg_islands_all_parsed.bed
  lack of strand info will mess up metaplot_lowmem*

Made a directory and copied over metaplot script to start working on 0.3 fixing many issues it has

mkdir modify_script
cp test_metaplot/metaplot_lowmem_both_0.2.pl modify_script/a_metaplot_lowmem_0.3.pl
cp TSS_files/10K_TSS_processedrefseq_allgenes_cols.bed modify_script/
cp test_metaplot/AGS1_meth.wig modify_script/

to test use AGS wig and 10K TSS file UPDATE no use the TSS_processedrefseq_allgenes_cols.bed file 10K TSS takes too long
going to test that this is correct with current working metaplot_lowmem_0.2.pl in scripts/

metaplot_lowmem_both_0.2.pl AGS1_meth.wig 10K_TSS_processedrefseq_allgenes_cols.bed refseq

  took too long

metaplot_lowmem_both_0.2.pl AGS1_meth.wig TSS_processedrefseq_allgenes_cols.bed refseq

  note this is in the reference/ folder
  mv all outfiles to reference.*

all test runs should be the same :
./a_metaplot_lowmem_0.3.pl reference/AGS1_meth.wig reference/TSS_processedrefseq_allgenes_cols.bed refseq


TODO metaplot script mods 0.3
X  make it print out chrs as it processes them
  get rid of $x 
  make $l and $k correct
  user validation and file validation so it doesn't break
  option for no strand info

11.19.13

sense antisense metaplots

mkdir sense_antisense
 mkdir plus_wig
 mkdir minus_wig
cat 10K_TSS_processedrefseq_allgenes_cols.bed | grep + >> PLUS_10K_TSS_processedrefseq_allgenes_cols.bed 
 cat 10K_TSS_processedrefseq_allgenes_cols.bed | grep - >> MINUS_10K_TSS_processedrefseq_allgenes_cols.bed 

 metaplot_lowmem_both_0.2.pl ../../DRIPc_wig/NT2_dripc_plus_treat_afterfiting_all.wig ../../TSS_files/PLUS_10K_TSS_processedrefseq_allgenes_cols.bed plus_refseq_10k ../../TSS_files/MINUS_10K_TSS_processedrefseq_allgenes_cols.bed minus_refseq_10k

 metaplot_lowmem_both_0.2.pl ../../DRIPc_wig/NT2_dripc_minus_treat_afterfiting_all.wig ../../TSS_files/PLUS_10K_TSS_processedrefseq_allgenes_cols.bed plus_refseq_10k ../../TSS_files/MINUS_10K_TSS_processedrefseq_allgenes_cols.bed minus_refseq_10k

running in two seperate dirs to prevent temp file overwrite
awk '{print $1 "\t" $2 "\t" "-" $3}' metaplot_outfile.txt > pluswig_minusadded.txt
awk '{print $1 "\t" "-" $2 "\t" $3}' metaplot_outfile.txt > minuswig_minusadded.txt

11.20.13

Working on DRIP / DRIPc mapping

map DRIPc peaks to DRIP wig and DRIPc combined wig (once script is written to combine them)

avg_wig_multi_bed_span_big.pl NT2_drip2_treat_afterfiting_all.wig 1 cache ../../DRIP_DRIPc/peakfiles/NT2_dripc_sicer.bed 

out :NT2_drip2_treat_afterfiting_all_NT2_dripc_sicer.txt
  values (heights) seem to be in the third column  

combining DRIPc wigs

./add_plus_minus_wigs.pl ../../region_metaplots/DRIPc_wig/NT2_dripc_plus_treat_afterfiting_all.wig ../../region_metaplots/DRIPc_wig/NT2_dripc_minus_treat_afterfiting_all.wig 

  script works, is quite slow
  the variableStep blocks are not sorted, but the positions are
  outfile name is wrong
  outfile : NT2_dripc_plus_minus_rep1rep2_combined.wig
    (renamed)

avg_wig_multi_bed_span_big.pl NT2_dripc_plus_minus_rep1rep2_combined.wig 1 cache ../../DRIP_DRIPc/peakfiles/NT2_dripc_sicer.bed 
  Output of ../../DRIP_DRIPc/peakfiles/NT2_dripc_sicer.bed: NT2_dripc_plus_minus_rep1rep2_combined_NT2_dripc_sicer.txt
mv add_plus_minus_wigs.pl ../../scripts/

adding all to git

aparna@zeus:/data/aparna/DRIP_DRIPc/peakfiles$ bedtools intersect -a NT2_dripc_sicer.bed -b drip2_peaks.bed > DRIPc_DRIP_common_peaks.bed 
aparna@zeus:/data/aparna/DRIP_DRIPc/peakfiles$ bedtools intersect -v -a NT2_dripc_sicer.bed -b drip2_peaks.bed > DRIPc_unique_peaks.bed 
aparna@zeus:/data/aparna/DRIP_DRIPc/peakfiles$ bedtools intersect -v -b NT2_dripc_sicer.bed -a drip2_peaks.bed > DRIP_unique_peaks.bed \

screen -S mapping avg_wig_multi_bed_span_big.pl NT2_drip2_treat_afterfiting_all.wig 0 cache ../../DRIP_DRIPc/peakfiles/DRIPc_DRIP_common_peaks.bed ../../DRIP_DRIPc/peakfiles/DRIPc_unique_peaks.bed ../../DRIP_DRIPc/peakfiles/DRIP_unique_peaks.bed 

ywl did this:

avg_wig_multi_bed_span_big.pl NT2_dripc_plus_minus_rep1rep2_combined.wig 0 cache ../../DRIP_DRIPc/peakfiles/DRIPc_DRIP_common_peaks.bed ../../DRIP_DRIPc/peakfiles/DRIPc_unique_peaks.bed ../../DRIP_DRIPc/peakfiles/DRIP_unique_peaks.bed

paste <(cut -f 4 NT2_drip2_treat_afterfiting_all_DRIPcpaste <(cut -f 4 NT2_drip2_treat_afterfiting_all_DRIPc_DRIP_common_peaks.txt) <(cut -f 4 NT2_dripc_plus_minus_rep1rep2_combined_DRIPc_DRIP_common_peaks.txt) > common_drip_dripc.txt

paste <(cut -f 4 NT2_drip2_treat_afterfiting_all_DRIPc_unique_peaks.txt) <(cut -f 4 NT2_dripc_plus_minus_rep1rep2_combined_DRIPc_unique_peaks.txt) > dripcunique_drip_dripc.txt

paste <(cut -f 4 NT2_drip2_treat_afterfiting_all_DRIP_unique_peaks.txt) <(cut -f 4 NT2_dripc_plus_minus_rep1rep2_combined_DRIP_unique_peaks.txt) > dripunique_drip_dripc.txt

11.21.13

R commands to make plot
> plot(log10(common$V1), log10(common$V2), xlab="DRIP wig score", ylab="DRIPc wig score", pch=20, cex=0.5, col=rgb(0,100,0,50,maxColorValue=225))
> abline(lm(log10(common$V2)~log10(common$V1)), col="red")
> points(log10(dripc_unique$V1), log10(dripc_unique$V2), pch=20, cex=0.5, col=rgb(100,0,0,50,maxColorValue=225))
> points(log10(drip_unique$V1), log10(drip_unique$V2), pch=20, cex=0.5, col=rgb(0,0,100,50,maxColorValue=225))

working on splitting gene classes

have the files 2kb_plus_nooverlap* and minus for same
these print the TSS 2kb + and - and in the 5th column the # of overlaps with b (i.e if there is another TSS (antisense) withing 2kb +- TSS)

now need to run through two files : plus all refseq genes and this nooverlap file. For every gene that has "0" in 5th column in nooverlap file, put in "no antisense TSS" file. Otherise, put in "antisense TSS" file. Store line number?
wrote script filter_genes.pl

aparna@zeus:/data/aparna/antisense_peaks$ cp ../region_metaplots/refseq_beds/refseq_all_genes_allinfo.txt .

aparna@zeus:/data/aparna/antisense_peaks$ grep + refseq_all_genes_allinfo.txt > plus_refseq_allgenes_allinfo.bed
aparna@zeus:/data/aparna/antisense_peaks$ grep - refseq_all_genes_allinfo.txt > minus_refseq_allgenes_allinfo.bed

  note : this gives too much info. And gene names are bad (NM_etc). but previous (chr, start, end, strand) does not give enough info. Want a genelist that can be used with hashgeneparser and the get genes from web script. Test the NM name?
YES NM name works

aparna@zeus:/data/aparna/antisense_peaks$ awk '{print $3 "\t" $5 "\t" $6 "\t" $2 "\t" $4}' plus_refseq_allgenes_allinfo.bed > plus_refseq_allgenes_5cols.bed
aparna@zeus:/data/aparna/antisense_peaks$ awk '{print $3 "\t" $5 "\t" $6 "\t" $2 "\t" $4}' minus_refseq_allgenes_allinfo.bed > minus_refseq_allgenes_5cols.bed

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ perl filter_genes.pl ../2kbaround_plus_nooverlap_minusTSS_refseq.bed ../plus_refseq_allgenes_5cols.bed 
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ mv antisense_present.bed plus_2kb_aroundTSS_antisense_present.bed
mv no_antisense_present.bed plus_2kb_aroundTSS_no_antisense_present.bed
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ perl filter_genes.pl ../2kbaround_minus_nooverlap_plusTSS_refseq.bed ../minus_refseq_allgenes_5cols.bed 
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ mv antisense_present.bed minus_2kb_aroundTSS_antisense_present.bed
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ mv no_antisense_present.bed minus_2kb_aroundTSS_no_antisense_present.bed

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ filter_genes.pl ../2kbaround_plus_nooverlap_minusTSS_refseq.bed ../TSS_plus_refseqall.bed 
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ mv antisense_present.bed plus_TSSonly_antisense_present.bed 
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ mv no_antisense_present.bed plus_TSSonly_no_antisense_present.bed 

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ filter_genes.pl ../2kbaround_minus_nooverlap_plusTSS_refseq.bed ../TSS_minus_refseqall.bed 
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ mv no_antisense_present.bed minus_TSSonly_no_antisense_present.bed
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ mv antisense_present.bed minus_TSSonly_antisense_present.bed

  made a list of TSS only with/without antisense TSS present within +- 2kb of TSS
  now take these (or just the noantisense TSS files) lists and bedtools intersect with peakfiles
  first need to make a file of only 2kb upstream to do the overlap
    what peakfiles? 
      DRIPc of the opposite strand rep1/rep2 combined
        what options? -u

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ awk '{print $1 "\t" $2 - 2000 "\t" $2 "\t" $4}' plus_TSSonly_no_antisense_present.bed > 2kbupstream_plusTSS_noantisense.bed
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ awk '{print $1 "\t" $2 "\t" $2 + 2000 "\t" $4}' minus_TSSonly_no_antisense_present.bed > 2kbupstream_minusTSS_noantisense.bed

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ bedtools intersect -u -a 2kbupstream_plusTSS_noantisense.bed -b ../../DRIP_DRIPc/peakfiles/NT2_dripc_minus.bed > 2kbup_plusTSS_noantisenseTSS_antisense_peak.bed
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ bedtools intersect -u -a 2kbupstream_minusTSS_noantisense.bed -b ../../DRIP_DRIPc/peakfiles/NT2_dripc_plus.bed > 2kbup_minusTSS_noantisenseTSS_antisense_peak.bed
  
  actually, ignore this. run with -c and filter_genes.pl over the 5 col refseq genelists. This will generate lists of genes for + and - that have no antisense TSS within +- 2kb of its TSS, yet has a DRIPc antisense peak within 2kb upstream of its TSS.

  overwriting the 2kbup files with bedtools intersect -c option

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ bedtools intersect -c -a 2kbupstream_plusTSS_noantisense.bed -b ../../DRIP_DRIPc/peakfiles/NT2_dripc_minus.bed > 2kbup_plusTSS_noantisenseTSS_antisense_peak.bed
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ bedtools intersect -c -a 2kbupstream_minusTSS_noantisense.bed -b ../../DRIP_DRIPc/peakfiles/NT2_dripc_plus.bed > 2kbup_minusTSS_noantisenseTSS_antisense_peak.bed

(ran filter_genes)

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ filter_genes.pl 2kbup_plusTSS_noantisenseTSS_antisense_peak.bed ../plus_refseq_allgenes_5cols.bed 

  something is wrong. num lines in these files are less than that of refseq
  these files 
    the 2kbup files were generated from TSSonly which came from noantisense files. noantisense were produced via filter_genes.pl ... which is NOT bedtools intersect -c.Therefore line numbers will not match.
    may need to write a script that takes in the 2kbup files, takes the TSS (col 3 for + col 2 for -) and puts in hash. Read in refseq 5col gene file and take start/TSS, check exists() for hash, if 1 then print in noantisenseTSS_antisensepeak file
    writing script filtergenes_compareTSS.pl.  

    script finished

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ ./filtergenes_compareTSS.pl 2000 2kbupstream_plusTSS_noantisense.bed ../plus_refseq_allgenes_5cols.bed
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ mv filteredout.bed plus_genes_noantisenseTSS_antisense_peak.bed
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ ./filtergenes_compareTSS.pl 2000 2kbupstream_minusTSS_noantisense.bed ../minus_refseq_allgenes_5cols.bed 
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps$ mv filteredout.bed minus_genes_noantisenseTSS_antisense_peak.bed

OUTFILES

/data/aparna/antisense_peaks/2kb_TSS_overlaps/plus_genes_noantisenseTSS_antisense_peak.bed
/data/aparna/antisense_peaks/2kb_TSS_overlaps/minus_genes_noantisenseTSS_antisense_peak.bed

These genes have NO TSS +- 2 kb of their TSS on the other strand, yet have a antisense DRIPc peak within 2kb upstream of their TSS.

11.22.13

Out of 22829 refseq (-) genes, 19048 have an antisense peak 2kb upstream with no antisense TSS upstream (??)
  That is too many. There must be some error.
    messed up with all the files
    this includes genes that do not themselves have a sense peak as well as those that do
    The peaks are very small 
    
The process to find these.

Download all refseq genes
extract a 5col bed out of them (chr, start, end, name, strand)
split into + and - files
for each, make a file of just TSSs (chr, TSS, TSS, strand)
  TSSonly
for each, take TSSonly file and make a file of 2kb window + and - of TSS
  2kbaroundTSS
{
  for each, bedtools intersect -c -a 2kbaroundTSS -b otherstrand_TSSonly > 2kbaround_numints
  filter_genes 2kbaround_numints (+|-)_refseq_5col
  mv antisense_present 2kbaround_antisenseTSS_genes.bed
  mv no_antisense_present 2kbaround_noantisenseTSS_genes.bed
    these two files are done : genelists of no antisense TSS
  bedtools intersect -v -a 2kbaroundTSS -b otherstrand_TSSonly > 2kbaround_noantisenseTSS
  make file of just 2kb upstream using 2kbaround_noantisenseTSS
    2kbupstream_noantisenseTSS
  bedtools intersect -u -a 2kbupstream_noantisenseTSS -b antisense_peakfile > 2kbup_noantiTSS_antipeak
  filtergenes_compareTSS <window> 2kbup_noantiTSS_antipeak (+|-)_refseq_5col
    filtered_out.bed
  mv filtered_out.bed 2kbup_noantiTSS_antipeak_genes.bed
}
OUTFILES
  2kbaround_antisenseTSS_genes.bed
  2kbaround_noantisenseTSS_genes.bed
  2kbup_noantiTSS_antipeak_genes.bed
    these are all 5col bed files

attempt2

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ cp ../../refseq_all_genes_allinfo.txt .
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ awk '{print $3 "\t" $5 "\t" $6 "\t" $2 "\t" $4}' refseq_all_genes_allinfo.txt > refseq_allgenes_5col.bed
sed -i -e "1d" refseq_allgenes_5col.bed
  removes header 
  not really needed because of grep
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ grep + refseq_allgenes_5col.bed > plus_refseq_allgenes_5col.bed
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ grep - refseq_allgenes_5col.bed > minus_refseq_allgenes_5col.bed

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ awk '{print $1 "\t" $2 "\t" $2 "\t" $5}' < plus_refseq_allgenes_5col.bed > TSSonly_plus.bed  
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ awk '{print $1 "\t" $3 "\t" $3 "\t" $5}' < minus_refseq_allgenes_5col.bed > TSSonly_minus.bed

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ awk '{print $1 "\t" $3 - 2000 "\t" $3 + 2000 "\t" $5}' < minus_refseq_allgenes_5col.bed > 2kbaround_TSS_minus.bed
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ awk '{print $1 "\t" $2 - 2000 "\t" $2 + 2000 "\t" $5}' < plus_refseq_allgenes_5col.bed > 2kbaround_TSS_plus.bed

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ bedtools intersect -c -a 2kbaround_TSS_plus.bed -b TSSonly_minus.bed > 2kbaround_numints_plus.bed
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ bedtools intersect -c -a 2kbaround_TSS_minus.bed -b TSSonly_plus.bed > 2kbaround_numints_minus.bed

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ filter_genes.pl 
2kbaround_numints_plus.bed plus_refseq_allgenes_5col.bed

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ mv no_antisense_present.bed 2kbaround_noantisenseTSS_plus_genes.bed
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ mv antisense_present.bed 2kbaround_antisenseTSS_plus_genes.bed
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ mv antisense_present.bed 2kbaround_antisenseTSS_minus_genes.bed
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ mv no_antisense_present.bed 2kbaround_noantisenseTSS_minus_genes.bed

  THESE ARE OUTFILES

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ bedtools intersect -v -a 2kbaround_TSS_plus.bed -b TSSonly_minus.bed >2kbaround_noantisenseTSS_plus.bed
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ bedtools intersect -v -a 2kbaround_TSS_minus.bed -b TSSonly_plus.bed > 2kbaround_noantisenseTSS_minus.bed

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ awk '{print $1 "\t" $2 "\t" $2 + 2000 "\t" $4}' 2kbaround_noantisenseTSS_plus.bed > 2kbupstream_noantisenseTSS_plus.bed
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ awk '{print $1 "\t" $3 - 2000 "\t" $3 "\t" $4}' 2kbaround_noantisenseTSS_minus.bed > 2kbupstream_noantisenseTSS_minus.bed

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ bedtools intersect -u -a 2kbupstream_noantisenseTSS_plus.bed -b ../../../DRIP_DRIPc/peakfiles/NT2_dripc_minus.bed > 2kbup_noantiTSS_antipeak_plus.bed
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ bedtools interse
ct -u -a 2kbupstream_noantisenseTSS_minus.bed -b ../../../DRIP_DRIPc/peakfiles/NT2_dripc_plus.bed > 2kbup_noantiTSS_antipeak_minus.bed

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ filtergenes_compareTSS.pl 2000 2kbup_noantiTSS_antipeak_plus.bed plus_refseq_allgenes_5col.bed 
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ mv filteredout.bed 2kbup_noantipeak_plus_genes.bed
  aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ mv 2kbup_noantipeak_plus_genes.bed 2kbup_noantiTSS_antipeak_plus_genes.bed

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ filtergenes_compareTSS.pl 2000 2kbup_noantiTSS_antipeak_minus.bed minus_refseq_allgenes_5col.bed
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ mv filteredout.bed 2kbup_noantiTSS_antipeak_minus_genes.bed

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ mkdir outfiles
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ mv 2kbaround_antisenseTSS_*_genes.bed outfiles/
aparna@zeus:/data/aparnai/antisense_peaks/2kb_TSS_overlaps/attempt2$ mv 2kbaround_noantisenseTSS_*_genes.bed outfiles/
aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2$ mv 2kbup_noantiTSS_antipeak_*_genes.bed outfiles/

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2/outfiles$ wc -l 2kbup_noantiTSS_antipeak_plus_genes.bed ../plus_refseq_allgenes_5col.bed 
   981 2kbup_noantiTSS_antipeak_plus_genes.bed
 24013 ../plus_refseq_allgenes_5col.bed
 24994 total

aparna@zeus:/data/aparna/antisense_peaks/2kb_TSS_overlaps/attempt2/outfiles$ wc -l 2kbup_noantiTSS_antipeak_minus_genes.bed ../minus_refseq_allgenes_5col.bed 
  1039 2kbup_noantiTSS_antipeak_minus_genes.bed
 22829 ../minus_refseq_allgenes_5cl.bed
 23868 total

these numbers look correct. going to rm attempt1 and mv attempt2/* .

So on each strand there are about 1000 genes that have an antisense peak, but no antisense TSS within 2kb of their TSS.
~4% for plus, ~4.5% for minus

should write a script that can do all this and take options for different sized windows and TSS or TTS etc.

filter_gene_peaks.sh works! but the file names (temp and out) are not very good.

Need to first filter genelist for unique start site only 
Then assign genes to bidirectional unidirecitonal
  1 kb window around TSS (so 1kb +-)
then metaplot
wait on this until genelist classes are decided

11.25.13

Working on making metaplot script more efficient.
  folder is modify_script
  mv YWL's script to this folder

testing benchmark.pl to make sure it works
  results are giving that for small arrays / hashes, it is actually FASTER to use !defined array[] than !defined hash{} !
  running it with bigger lists now
    with large lists hashes are faster
  what? exists and defined are faster on arrays than on hashes. But defined is depreciated and exists is depreciated on arrays.

  need to change arrays to hashes and use exists() to make sure it will still work in future verions of perl

  or find a different way of doing it.

ran 
  ./b_wig_to_metaplot_strand_specific_lowmem.pl -w reference/cpy1_AGS1_meth.wig,reference/cpy2_AGS1_meth.wig -b reference/PLUS_TSS_processedrefseq_allgenes_cols.bed,reference/MINUS_TSS_processedrefseq_allgenes_cols.bed -n test

to get a baseline as to what the split strands graph should look like. Mved outfiles to reference/reference2.*
cpy1_AGS* and cpy2_AGS* are exactly the same, use one for + and one for -

12.2.13

using folder /data/aparna/modify_script

12.3.13

to make metaplot of sense/antisense combined do this :


aparna@zeus:~/DATA/region_metaplots/sense_antisense$ awk '{print $1 "\t" $3 "\t" $2}' minus_wig/minuswig_minusadded.txt > NEW_minuswigminusadded.txt
aparna@zeus:~/DATA/region_metaplots/sense_antisense$ ./avg_metaplot_txt_files.pl plus_wig/pluswig_minusadded.txt NEW_minuswigminusadded.txt 
  vim outfile.txt and add headers
aparna@zeus:~/DATA/region_metaplots/sense_antisense$ cp plus_wig/metaplot_outfile.R .
aparna@zeus:~/DATA/region_metaplots/sense_antisense$ vim metaplot_outfile.R 
  change infile
aparna@zeus:~/DATA/region_metaplots/sense_antisense$ R --vanilla < metaplot_outfile.R 
aparna@zeus:~/DATA/region_metaplots/sense_antisense$ mv NEWmetaplot_outfile.pdf sense_antisense_avged_metaplot.pdf

aparna@zeus:~/DATA/region_metaplots/sense_antisense$ cp avg_metaplot_txt_files.pl ..
/../scripts/     

12.4.13

Figuring out where to put the check for  + / - bedfile
no -- need a value from BOTH wig files
just need to keep it seperate -- no need for check right now

$k and $l

end = 4 start = 1
$l = 3 -- 4X
3 .. 2 .. 1 .. 0

$k = 1 ++ 4X
1 .. 2 .. 3 .. 4

$m goes start -> end
1 .. 2 .. 3 .. 4

make $k = 0

but still need to input - strand stuff -- for bed file for both wigs
what is faster : 2 for loops or if/else in for loops?
changing $k to $o because confusion

process_ss SEEMS to be working -- no errors but can't see output until end
need to fix process (normal) and deal with results
remember results for ss have a different data structure -- either change normal results array to have this or have 2 different print_results (which is probably right)

outfile is just 1 for both sense and antisense.
this means sense for + bed = sense for - bed = error in process

no, this means that ... THIS IS RIDICULOUS. I have height in num and denom.
HOORAY that was probably the error!!!

R spacing for header is messed up

IT WORKS!

now fix R part, fix processing normal metaplot, test time 

12.5.13

R syntax error should be fixed
FIXED the normal metaplot functions and tested -- THEY WORK!!!!
Need to clean up script and write COMMENTS everywhere -- it is very very confusing right now
Tested time with -s : faster by 1 min (2 min 30 sec instead of 3 min 30 sec) than the other metaplot strand-specific script.

Need to actually test on DRIPc. Should take maybe a few hours to run? Time it

aparna@zeus:/data/aparna/modify_script/DRIPc_testrun$ time ../c_metaplot_lowmem_0.3_split.pl -s /data/aparna/region_metaplots/DRIPc_wig/NT2_dripc_plus_treat_afterfiting_all.wig /data/aparna/region_metaplots/DRIPc_wig/NT2_dripc_minus_treat_afterfiting_all.wig 20000 /data/aparna/region_metaplots/TSS_files/PLUS_10K_TSS_processedrefseq_allgenes_cols.bed /data/aparna/region_metaplots/TSS_files/MINUS_10K_TSS_processedrefseq_allgenes_cols.bed 10Krefseq

splitting up wigfiles is slow -- optimize?
  should figure out how to make a cache, would speed it up a lot

  Processing a chomosome is WAY slower with -s
    maybe 1 min per? For some chrs several minutes per
    will take ~30 min for processing
    split-files maybe a few minutes (mainly wig)
    Expecting maybe an hour for full processing of DRIPc
   
stop printing $options, not needed
fix usage statement
get rid of $beds[0] as the mult wig test, use $test in get_input

R syntax issue not fixed. but when 10K is deleted from 10Krefseq{sense, antisense} is deleted, it works.
Script took only 37 minutes!!!! 
Graph looks correct (same as the combined-files metaplot). check against known strand-specific metaplot graph.

12.6.13

Testing original wig_to_metaplot_ss script

aparna@zeus:/data/aparna/modify_script/DRIPC_wigtometa_test$ time ../a_wig_to_metaplot_strand_specific_lowmem.pl -w /data/aparna/region_metaplots/DRIPc_wig/NT2_dripc_plus_treat_afterfiting_all.wig,/data/aparna/region_metaplots/DRIPc_wig/NT2_dripc_minus_treat_afterfiting_all.wig -b /data/aparna/region_metaplots/TSS_files/PLUS_10K_TSS_processedrefseq_allgenes_cols.bed,/data/aparna/region_metaplots/TSS_files/MINUS_10K_TSS_processedrefseq_allgenes_cols.bed -n refseq

cleaning up ss metaplot_lowmem, need to add comments

Strand Specific Metaplot Script is /data/aparna/scripts/c_metaplot_lowmem_0.3_split.pl

  It works and runs over all refseq DRIPc -s in 37 min.
  Cleaned up code and added comments (still need to do more so it is less confusing)
  The .R outfile may have error with the headers, but it is probably fixed

wigtometaplot test finished 
real    144m17.349s
user    141m34.371s

1.6.13

comment and clean up metaplot script
look at list of topics and pick one

replication origin 
  for each cell type there are these files : G1 S1 S2 S3 S4 G2 (Pk) (Vly) Ws (Sd) 
  () denote in Table Browser but not Genome Browser

Many, many cell types.
Need to keep cell types seperate. Combine cell cycle files somehow?
Do same analysis on all cell type files

Cutoff wig value, make a "peak" (ex. of darkest color on genome browser) find center, repeat for each cell type file
Merge all into one file (bed) with values/names reflecting stage of cell cycle
sine wave?
use "centers" to find maxima/minima with some kind of cut off?
NOTE paper uses hg18
take G1 data for one cell type and DRIPc data, chr19 (wigs). Run a fixed size sliding window and avg, correlate

aparna@zeus:/data/aparna/replication_origins$ parse_wig.pl ../region_metaplots/DRIPc_wig/NT2_dripc_plus_treat_afterfiting_all.wig chr1
aparna@zeus:/data/aparna/replication_origins$ parse_wig.pl ../region_metaplots/DRIPc_wig/NT2_dripc_minus_treat_afterfiting_all.wig chr1
aparna@zeus:/data/aparna/replication_origins$ mv chr1.wig chr1plus.wig
aparna@zeus:/data/aparna/replication_origins$ mv chr1.wig chr1minus.wig
aparna@zeus:/data/aparna/replication_origins$ add_plus_minus_wigs.pl chr1plus.wig chr1minus.wig 
aparna@zeus:/data/aparna/replication_origins$ mv combined_1_1.wig NT2_dripc_both_chr1.wig

1.8.14

Debugging sliding windows script
it is extremely slow
  need to test with smaller file size, may be infinite looping.
1.9.14 --
  tested with testfile.wig, output calculation seems right
  actually for slidingWindowAvg2 values are wrong
  for 3 values are almost right, and script seems faster
---
for s50 add up the two files then look at % ?

1.9.14 

wrote new sliding windows script that seems much faster (3). Calculations seem right. Running with DRIPc

aparna@zeus:/data/aparna/replication_origins$ screen -S slidingwindowdripc ./3slidingwindowavg.pl NT2_dripc_both_chr1.wig 10000

  script may have issues exiting, check. No infinite loops -- after last message, script did not exit immediately in test, needed to be killed.

  if this works fine, use this algorithm for all sliding window things. Wish there was a way to get rid of exists(), that seems to slow things down. But with hash, need exists() or else undefined scalar error. 

  somehow convert to array? Which is slower : really big array (millions of indicies) or exists() several million times? Probably exists() 

also this uses a TON of memory, make lowmem (because of reading in dripc wig, even though it's only 1 chr) (and all the calculations and probably the huge arrays and hashes -> reduce or undef() )

script started at 12:02, at 12:15 in printing

problem seems to be high mem usage, rather than slowness, this isn't that slow (definately compared to the first attempt, which over 2 hrs printed nothing) .

printing takes forever too, compared to how fast it normally is. Many many values being printed -- possibly use a different format other than bedgraph?

outfile is massive, already 3G . Reduce this somehow! 4.8 GB final. Script is not exiting even after final message ... \n issue? 

script completely done at 12:21. ~20 mins to run over all dripc chr1 +/- . It is impractical for whole genome, but way faster than last attempts. Should be faster on other data too. K562 Ws file has at least x10^2 fewer lines than dripc 

note : Ws file is bed for some reason, need to convert to wig so script doesn't crash

aparna@zeus:/data/aparna/replication_origins$ bedgraph_to_wig.pl K562_Ws_chr1_repliseq.bed 

outfile is  K562_Ws_chr1_repliseq.bed

aparna@zeus:/data/aparna/replication_origins$ mv outfile3.bed dripc_chr1_plusminus_avg_10KW.bed

aparna@zeus:/data/aparna/replication_origins$ screen -S slidingwindowWs ./3slidingwindowavg.pl K562_Ws_chr1_repliseq.bed.wig 10000

  started at 1:15
  done reading in by :19

aparna@zeus:/data/aparna/replication_origins$ mv outfile3.bed k562Ws_chr1_avg_10KW.bed
current outfile format is 
chr pos val
need 
chr pos pos val

use awk
aparna@zeus:/data/aparna/replication_origins$ awk '{print $1 "\t" $2 "\t" $2 "\t" $3}' dripc_chr1_plusminus_avg_10KW.bed > dripc_chr1_plusminus_avg_10KW.bedgraph

then make a wig file out of it to make shorter?

bedgraph file for dripc is 7G.

Outfiles are too big to open in R. Need to reduce ...

maybe have window overlap be > 1? try with .25 of window size?
Trying with this.

2.5K too big, 250 too big, trying with 100 (get ~0 for all pos if shift is too big)
100 too big

1.10.14

Tried with 25, still not good. Trying with 10.
aparna@zeus:/data/aparna/replication_origins$ screen -s slidingwindowdripc ./3slidingwindowavg.pl NT2_dripc_both_chr1.wig 10000

All numbers still < 1, but file size is .5G

aparna@zeus:/data/aparna/replication_origins$ mv outfile3.bed nt2_dripc_10KW_10bpshit.bed

running with same params over Ws file.

aparna@zeus:/data/aparna/replication_origins$ screen -s slidingwindowdripc ./3slidingwindowavg.pl K562_Ws_chr1_repliseq.bed.wig 10000

aparna@zeus:/data/aparna/replication_origins$ awk '{print $1 "\t" $2 "\t" $2 "\t" $3}' nt2_dripc_10KW_10bpshift.bed > nt2_dripc_10KW_10bpshift.bedgraph

aparna@zeus:/data/aparna/replication_origins$ mv outfile3.bed k562_10KW_10bpshift.bed
aparna@zeus:/data/aparna/replication_origins$ awk '{print $1 "\t" $2 "\t" $2 "\t" $3}' k562_10KW_10bpshift.bed > k562_10KW_10bpshift.bedgraph

1.13.14

Finished attempt 2 at script, tested with testfile, SEEMS to be bug-free. going to run now with actual data.
aparna@zeus:~/DATA/replication_origins/attempt2$ cp b_slidingwindow2files.pl ../

first need to get chr19 data
aparna@zeus:~/DATA/replication_origins$ cp ../region_metaplots/DRIPc_wig/chr19_NT2_dripc_both_all.wig .

script crashed because K562chr19 file is fixedStep!
AND for some strange reason all the positions have decimals, which will mess up script/hash lookup!

pick a different chromosome or download all genome data and filter?

to get variableStep : "custom track" -> data points -> get in file
browser crashes, will be huge file (9+ Mb) because span=1 for some ridiculous reason, most values are the same
also has comment lines, need to delete or catch case
maybe will be easier to just use chr1?

also add print debug lines -> doing now while firefox crashess

killing download

fixed step is weird, only values are displayed. can probably convert to variableStep easily

running with chr1 (screen)
aparna@zeus:~/DATA/replication_origins/attempt2$ mv ../K562_Ws_chr1_repliseq.bed.wig ../NT2_dripc_both_chr1.wig .
aparna@zeus:~/DATA/replication_origins/attempt2$ screen -S slidingwindow_chr1 ./b_slidingwindow2files.pl NT2_dripc_both_chr1.wig K562_Ws_chr1_repliseq.bed.wig 10000 10

started at 1:35, find_limits very fast
start and end look correct
read_in for chr1dripc took until 1:41
done analyze at 1:47 -> this is way faster | dripc temp is 350 MB
memory usage is still high 32.8%
no crashes with analyze! hopefully outfile will not be all 0


if you change the filter to 10 mil lines max on table browser, outfile is bedgraph format!

need to go through and undef() variables

going to kill and try to undef stuff.

downloaded chr19 bedgraph Ws file K562
aparna@zeus:~/DATA/replication_origins/attempt2$ bedgraph_to_wig.pl K562_Ws_chr19.bedgraph 

aparna@zeus:~/DATA/replication_origins/attempt2$ screen -S slidingwindowchr19 ./b_slidingwindow2files.pl chr19_NT2_dripc_both_all.wig K562_Ws_chr19.bedgraph.wig 10000 10

start at 2:03
start read-in at 2:03
completely done ar 2:14

Values are not all 0! They look correct.

R is slow but works!
outfile size :
txt 134 Mb
bed 178 Mb

pdf of R graph is 164 Mb!
also has 2 pages for some reason.
R commands

> pdf("testgraph.pdf")
> plot (file$V1, file$V2, main="K562 vs dripc Ws chr19", xlab="dripc", ylab="K562 Ws track", pch=10, col=rgb(0,100,0,50,maxColorValue=255), pch=16)
Error in localWindow(xlim, ylim, log, asp, ...) : 
  formal argument "pch" matched by multiple actual arguments
> plot (file$V1, file$V2, main="K562 vs dripc Ws chr19", xlab="dripc", ylab="K562 Ws track", pch=10, col=rgb(0,100,0,50,maxColorValue=255))
> abline(lm(file$V2~file$V1), col="red")
> dev.off()

run script again with shift of 50 or something after renaming current outfiles
R takes forever to make plot

no correlation. Graph in attempt2/K562_vs_DRIPc_chr19.pdf and screenshot of graph also there in case pdf takes forever to load

find replication origins(using S50), find midpoint, find distance to nearest DRIPc peak

Files in twofilecompare/

already have a merged early replication file : sorted_merged_early_format.bed

aparna@zeus:~/DATA/replication_origins/twofilecompare$ ./add_two_tracks.pl K562_S4_repliseq.bed K562_G2_repliseq.bed 
outfile is outfile.bed
aparna@zeus:~/DATA/replication_origins/twofilecompare$ awk '{print $1 "\t" $2 "\t" $3 "\t" "." "\t" $4}' outfile.bed > merged_late_format.bed
seems to be already formatted? Yes, script has a sort line.

aparna@zeus:~/DATA/replication_origins/twofilecompare$ mv merged_late_format.bed sorted_merged_late_format.bed

Two ways to do this : take sliding window and look for avg > 50 or just take the lines with value > 50

problem is how large to make sliding window .. just take lines.

here are the infiles :
sorted_merged_late_format.bed
sorted_merged_early_format.bed

1.14.14

running sliding window script with 10Kb window 100 bp shift
will run again with 10kb window 1000 bp shift
aparna@zeus:/data/aparna/replication_origins/attempt2/10kb_100$ ./b_slidingwindow2files.pl ../chr19_NT2_dripc_both_all.wig ../K562_Ws_chr19.bedgraph.wig 10000 100

cor = 0.2183859

aparna@zeus:/data/aparna/replication_origins/attempt2/10kb_1000$ ./b_slidingwindow2files.pl ../chr19_NT2_dripc_both_all.wig ../K562_Ws_chr19.bedgraph.wig 10000 1000

0.2138263

trying with 1 kb window 100 bp shift
aparna@zeus:/data/aparna/replication_origins/attempt2/10kb_1000$ ./b_slidingwindow2files.pl ../chr19_NT2_dripc_both_all.wig ../K562_Ws_chr19.bedgraph.wig 1000 100

cor=0.1592702

look up the human genome paper's data

1.16.14

Binary search algorithm with distances written : test_binarysearch.pl in twofilecompare/ for example program

1.21.14

Can smooth with loess filter in R ~ gaussian
Can find max and mins in R
need a way to find inflection pts in R
nfl2 <- c(FALSE, diff(diff(diff(lopts)>0)<0)>0)
> points(x[infl2 ], lopts[infl2 ], col="red")
> 
> infl2 <- c(FALSE, diff(diff(diff(lopts)>0)>0)>0)
> points(x[infl2 ], lopts[infl2 ], col="red")

INFLECTION PTS

> points(x[infl2 ], lopts[infl2 ], col="red")
>
> infl2 <- c(FALSE, diff(diff(diff(lopts)>0)>0)>0)
> points(x[infl2 ], lopts[infl2 ], col="red")

rest of R code:

> x = seq(1,15)
> y = c(4,5,6,5,5,6,7,8,7,7,6,6,7,8,9)
> plot(x,y,type="1")
Error in plot.xy(xy, type, ...) : invalid plot type '1'
> 
> plot(x,y,type="l")
> lo<-loess(y~x)
> lopts = predict(lo,x)
> lines(x,lopts, col="red")
> infl2 <- c(FALSE, diff(diff(diff(lopts)>0)<0)>0)
> lines(x[infl2 ],lopts[infl2 ], col="green")
> points(x[infl2 ],lopts[infl2 ], col="green")
> infl2 <- c(FALSE, diff(diff(diff(lopts)>0)>0)>0)
> points(x[infl2 ],lopts[infl2 ], col="blue")
> infl2 <- c(FALSE, diff(diff(diff(lopts)>0)!=0)>0)
> points(x[infl2 ],lopts[infl2 ], col="purple")
> 

NEVERMIND still only gives max and min on other test dataset

way to estimate infl point with 2 data pts for max/min

> x <- sum(x[infl ]) / length(x[infl ])
> esty <- sum(lopts[infl ]) / length(lopts[infl ])
> points(estx, esty, col="purple")
> 
THIS MAY HAVE WORKED

> smoothingSpline = smooth.spline(x,y,spar=0.35)
> lines(smoothingSpline, col="green")
> smoothingSpline = smooth.spline(x,y,spar=0.5)
> lines(smoothingSpline, col="green")
> smoothingSpline = smooth.spline(x,y,spar=1)
> lines(smoothingSpline, col="green")
> smoothingSpline = smooth.spline(x,y,spar=0.75)
> lines(smoothingSpline, col="green")
> lines(smoothingSpline, col="red")
> fit <- (smoothingSpline, deriv=1)
Error: unexpected ',' in "fit <- (smoothingSpline,"
> fit <- (smoothingSpline, x, deriv=1)
Error: unexpected ',' in "fit <- (smoothingSpline,"
> fit <- predict(smoothingSpline, x, deriv=1)
> fit
$x
  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18
 [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36
 [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54
 [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72
 [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90
 [91]  91  92  93  94  95  96  97  98  99 100

$y
  [1]  0.0287934102  0.0287832106  0.0287036630  0.0284578423  0.0280098348
  [6]  0.0274278812  0.0268161353  0.0262097119  0.0256437253  0.0250310014
 [11]  0.0243336821  0.0236010836  0.0226884749  0.0214882739  0.0200376289
 [16]  0.0183822546  0.0165678655  0.0146331314  0.0125802217  0.0103726357
 [21]  0.0081125554  0.0059021629  0.0036993738  0.0015280048 -0.0005460431
 [26] -0.0024757948 -0.0042693185 -0.0059816571 -0.0076632290 -0.0093644529
 [31] -0.0110942314 -0.0128256711 -0.0145229757 -0.0161413944 -0.0176361762
 [36] -0.0190001355 -0.0202368855 -0.0213572256 -0.0223771494 -0.0233180580
 [41] -0.0241853588 -0.0249983084 -0.0257761632 -0.0264694996 -0.0269454183
 [46] -0.0271204437 -0.0270438634 -0.0267649651 -0.0262364924 -0.0254044385
 [51] -0.0242620526 -0.0228677481 -0.0212902981 -0.0195400625 -0.0176498246
 [56] -0.0156523677 -0.0135037927 -0.0112951665 -0.0091614550 -0.0071172285
 [61] -0.0051770574 -0.0033498837 -0.0015941611  0.0001405990  0.0019547545
 [66]  0.0039561304  0.0061521941  0.0085726502  0.0112472035  0.0141456724
 [71]  0.0171780492  0.0202845081  0.0233499384  0.0262592293  0.0289952572
 [76]  0.0315733208  0.0340258423  0.0363684246  0.0385220876  0.0403922491
 [81]  0.0419673505  0.0432358333  0.0443448177  0.0453177095  0.0460307942
 [86]  0.0464753803  0.0466427763  0.0465594298  0.0462867858  0.0458598419
 [91]  0.0452116659  0.0444416873  0.0437162682  0.0430602045  0.0424982922
 [96]  0.0419927425  0.0415665736  0.0412805927  0.0411316453  0.0411165769

> lines(fit, col="black")
> x
  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18
 [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36
 [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54
 [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72
 [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90
 [91]  91  92  93  94  95  96  97  98  99 100
>  infl <- c(FALSE, diff(diff(lopts)>0)!=0)
>  infl <- c(FALSE, diff(diff(fit$y)>0)!=0)
> points(fit$x[infl ], fit$y[infl ], col="orange")
> 

Write script and get s50, then figure this out, correct method will depend on number of data points  

1.22.14

Figured out inflection points!

https://stat.ethz.ch/pipermail/r-help/2009-March/193311.html
set.seed(123)
x <- sort(runif(200))
y <- sin(3*pi*x) + rnorm(200, sd=0.1)
smspl <- smooth.spline(x, y)

d2 <- function(x) predict(smspl, x , deriv=2)$y

x <- seq(0, 1, length=500)
plot(x, d2(x), type="l")
abline(h=0, lty=2)

uniroot(f=d2, interval=c(0.1, 0.5))  # first inflection point
uniroot(f=d2, interval=c(0.5, 0.9))  # second inflection point
 
Now have made folder s50 and downloaded all S phase files
aparna@zeus:/data/aparna/replication_origins/s50/sphase$ 

drwxrwxr-x 2 aparna aparna 4.0K Jan 22 13:00 ./
drwxrwxr-x 3 aparna aparna 4.0K Jan 22 12:55 ../
-rw-rw-r-- 1 aparna aparna 388M Jan 22 12:56 GSM922792_RepliSeq_S1_Hela_subtracted.bedGraph
-rw-rw-r-- 1 aparna aparna 512M Jan 22 12:57 GSM922793_RepliSeq_S2_Hela_subtracted.bedGraph
-rw-rw-r-- 1 aparna aparna 559M Jan 22 12:58 GSM922794_RepliSeq_S3_Hela_subtracted.bedGraph
-rw-rw-r-- 1 aparna aparna 612M Jan 22 12:58 GSM922795_RepliSeq_S4_Hela_subtracted.bedGraph
-rw-rw-r-- 1 aparna aparna 532M Jan 22 12:58 GSM922796_RepliSeq_S5_Hela_subtracted.bedGraph
-rw-rw-r-- 1 aparna aparna 556M Jan 22 12:59 GSM922797_RepliSeq_S6_Hela_subtracted.bedGraph

wrote script, am debugging
to use floor() need to use POSIX ; 

aparna@zeus:/data/aparna/replication_origins/s50$ perl s50method.pl 7360 146243000 sphase/chr8_S1.bedgraph sphase/chr8_S2.bedgraph sphase/chr8_S3.bedgraph sphase/chr8_S4.bedgraph sphase/chr8_S5.bedgraph sphase/chr8_S6.bedgraph 

"useless use of private variable" error still remains.

For loop seems to be working
  each loop is quite fast
for chr8 there are going to be 2924 outer loops!
~30 secs per loop?
need to test with WAY smaller dataset

smaller dataset

aparna@zeus:/data/aparna/replication_origins/s50/sphase$ head -400 chr8_S1.bedgraph > ../testdata/TEST_chr8_S1.bedgraph 
aparna@zeus:/data/aparna/replication_origins/s50/sphase$ head -400 chr8_S2.bedgraph > ../testdata/TEST_chr8_S2.bedgraph 
aparna@zeus:/data/aparna/replication_origins/s50/sphase$ head -400 chr8_S3.bedgraph > ../testdata/TEST_chr8_S3.bedgraph 
aparna@zeus:/data/aparna/replication_origins/s50/sphase$ head -400 chr8_S4.bedgraph > ../testdata/TEST_chr8_S4.bedgraph 
aparna@zeus:/data/aparna/replication_origins/s50/sphase$ head -400 chr8_S5.bedgraph > ../testdata/TEST_chr8_S5.bedgraph 
aparna@zeus:/data/aparna/replication_origins/s50/sphase$ head -400 chr8_S6.bedgraph > ../testdata/TEST_chr8_S6.bedgraph 

aparna@zeus:/data/aparna/replication_origins/s50$ perl ./s50method.pl 0 110900 testdata/TEST_chr8_S1.bedgraph testdata/TEST_chr8_S2.bedgraph testdata/TEST_chr8_S3.bedgraph testdata/TEST_chr8_S4.bedgraph testdata/TEST_chr8_S5.bedgraph testdata/TEST_chr8_S6.bedgraph 

ERRORS : 

the 'useless use of private variable'
something is wrong with the linear interpolation, keep getting negative numbers
  may be fixed, now get v large pos numbers
  
except for irritating 'useless' error everything is fixed, running over larger test set now

aparna@zeus:/data/aparna/replication_origins/s50$ head -1000 sphase/chr8_S1.bedgraph > test2/TEST2_chr8_S1.bedgraph
aparna@zeus:/data/aparna/replication_origins/s50$ head -1000 sphase/chr8_S2.bedgraph > test2/TEST2_chr8_S2.bedgraph
aparna@zeus:/data/aparna/replication_origins/s50$ head -1000 sphase/chr8_S3.bedgraph > test2/TEST2_chr8_S3.bedgraph
aparna@zeus:/data/aparna/replication_origins/s50$ head -1000 sphase/chr8_S4.bedgraph > test2/TEST2_chr8_S4.bedgraph
aparna@zeus:/data/aparna/replication_origins/s50$ head -1000 sphase/chr8_S5.bedgraph > test2/TEST2_chr8_S5.bedgraph
aparna@zeus:/data/aparna/replication_origins/s50$ head -1000 sphase/chr8_S6.bedgraph > test2/TEST2_chr8_S6.bedgraph

aparna@zeus:/data/aparna/replication_origins/s50$ perl s50method.pl 0 187500 test2/TEST2_chr8_S1.bedgraph test2/TEST2_chr8_S2.bedgraph test2/TEST2_chr8_S3.bedgraph test2/TEST2_chr8_S4.bedgraph test2/TEST2_chr8_S5.bedgraph test2/TEST2_chr8_S6.bedgraph 

not big enough test set

aparna@zeus:/data/aparna/replication_origins/s50$ rm test2/*
aparna@zeus:/data/aparna/replication_origins/s50$ head -2000 sphase/chr8_S1.bedgraph > test2/TEST2_chr8_S1.bedgraph
aparna@zeus:/data/aparna/replication_origins/s50$ head -2000 sphase/chr8_S2.bedgraph > test2/TEST2_chr8_S2.bedgraph
aparna@zeus:/data/aparna/replication_origins/s50$ head -2000 sphase/chr8_S3.bedgraph > test2/TEST2_chr8_S3.bedgraph
aparna@zeus:/data/aparna/replication_origins/s50$ head -2000 sphase/chr8_S4.bedgraph > test2/TEST2_chr8_S4.bedgraph
aparna@zeus:/data/aparna/replication_origins/s50$ head -2000 sphase/chr8_S5.bedgraph > test2/TEST2_chr8_S5.bedgraph
aparna@zeus:/data/aparna/replication_origins/s50$ head -2000 sphase/chr8_S6.bedgraph > test2/TEST2_chr8_S6.bedgraph

dataset still too small try with 10K

aparna@zeus:/data/aparna/replication_origins/s50$ perl s50method.pl 0 1164900 test2/TEST2_chr8_S1.bedgraph test2/TEST2_chr8_S2.bedgraph test2/TEST2_chr8_S3.bedgraph test2/TEST2_chr8_S4.bedgraph test2/TEST2_chr8_S5.bedgraph test2/TEST2_chr8_S6.bedgraph 

seems to be working fine, but all values are very high percentages ... seems unlikely with 23 50KB windows

Great thing is outfiles will be tiny!

1.24.14

FIXED WARNING! Error was in using => instead of >=

also perldoc diagnostics : a useful tool

now going to run on full chr8

aparna@zeus:/data/aparna/replication_origins/s50$ screen -S s50_chr8 ./s50method.pl 0 146274826 sphase/chr8_S1.bedgraph sphase/chr8_S2.bedgraph sphase/chr8_S3.bedgraph sphase/chr8_S4.bedgraph sphase/chr8_S5.bedgraph sphase/chr8_S6.bedgraph

:39 - :42 : 10 loops (~30) (11:42)

at 1:30 have 340 loops (~2hrs)

will probably take ~19hrs total! But uses almost no memory

at 3:08 630 loops done (~3.5 hrs)

1.24.14

Something seems to be wrong, all values seem to be 89

graph is completely wrong also there are much better ways of writing this script, rewriting functional bit.

but outfile is TINY 150K very good output format/method
aparna@zeus:/data/aparna/replication_origins/s50$ mv s50outfile.txt outfile1_wrong.txt

aparna@zeus:/data/aparna/replication_origins/s50$ ./s50method.pl 0 110900 sphase/chr8_S1.bedgraph sphase/chr8_S2.bedgraph sphase/chr8_S3.bedgraph sphase/chr8_S4.bedgraph sphase/chr8_S5.bedgraph sphase/chr8_S6.bedgraph 

  better way of testing, something is wrong as m_value is negative!

Fixed the addition errors! Now am deleting all debug stuff and running AGAIN on a test parameters

aparna@zeus:/data/aparna/replication_origins/s50$ ./s50method.pl 0 100000 sphase/chr8_S1.bedgraph sphase/chr8_S2.bedgraph sphase/chr8_S3.bedgraph sphase/chr8_S4.bedgraph sphase/chr8_S5.bedgraph sphase/chr8_S6.bedgraph 

#just change parameters and keep rest of command the same

aparna@zeus:/data/aparna/replication_origins/s50$ ./s50method.pl 61000000 64000000 sphase/chr8_S1.bedgraph sphase/chr8_S2.bedgraph sphase/chr8_S3.bedgraph sphase/chr8_S4.bedgraph sphase/chr8_S5.bedgraph sphase/chr8_S6.bedgraph

2:35 start (or 25? should be 35)
should be exactly 60 loops
2:38 have 10 loops 
2:40 have 20 loops
2:43 have 30 loops
at 2:46 error! Illegal division by zero at ./s50method.pl line 78.
  re-running with slope print out
  add an if slope = 0 line
  also if $outer = 0 what is $inner? -1 which is fine for percent calcs but for $s[$inner] messes up MASSIVELY
  may have just fixed both problems, testing. Slope may == 0 when inner == -1, fixed that case but what if slope is <<1 and therefore essentially 0? This may not even happen, so ignore for now except leave the debug DIE line
  passed over critical part without error, going to run as below on 10mil range
maybe not run on full chr, but pick a good region such as 51mil to 61mil and run over that on chr8

use that to test the calculus bit and rewrite script so as to be less ridiculous
(assume sorted files so break; when $startnum > $plus , next; when $endnum < $i (first if statement), determine whether to just read files into memory, or read 3 files at a time into mem, run through one full file at a time )

going to run on chr8 51mil-61mil should take about 1 hr (estimate)

aparna@zeus:/data/aparna/replication_origins/s50$ screen -S s50_chr8_10mil_bp ./s50method.pl 51000000 61000000 sphase/chr8_S1.bedgraph sphase/chr8_S2.bedgraph sphase/chr8_S3.bedgraph sphase/chr8_S4.bedgraph sphase/chr8_S5.bedgraph sphase/chr8_S6.bedgraph 

printing out all slopes too in screen

should also run over one of the known regions from the paper -- one of the regions from the paper centers around 55mb which is in the interval running right now

1.29.14

Going to try to understand the R code for interval-finding in order to run over s50.s50 works! Script should be rewritten to be less ridiculous but it runs fine.

1.30.14

Everything works! Got an R script to do the analysis of s50 profile and output early and late origin positions (need to make format chr# \t start \t end rather than just start \t end). run R script in R like this :
$ R
> source("s50plot.R")
otherwise no graph output (need to run locally/on zeus to see graph) note: all file names are hardcoded into script so change if need be!

How to get orgins using s50 profile analysis :

first run s50 script s50method.pl in /data/aparna/replication_origins/s50/
  this outputs s50outfile.txt
then get this outfile and R script (s50plot.R) to local/graphical 
run R script in R
  outputs temporary graph to visualize and two outfiles : earlyorigins.txt lateorigins.txt
    these outfiles are in format
    start end
    start2  end2
    so genome browser will get angry : need to add track line at top and also add chr# in col1
  tried everything over chr8:51000000-61000000 works fine! The origins called are rather broad and not stringent enough. This is because of the inflection-pt dependent way of calling origins. Stringency can be GREATLY improved if a threshold for the value of the max/min is put : so only output coordinates if the min between the inf pts is < 30 or something. Also this is run using the ORC1 paper's S phase files. No G1/G2 which also reduces stringency. Cell type is HeLa. 

Need to :
  heavily modify s50method.pl to be less ridiculous
  modify s50plot.R to have less hardcoding and better output format
    add track line manually, use awk to add chr col
  modify s50plot.R to have theshold on min/max for calling early/late
    done

Note : s50plot.R is currently just in /data/aparna/

idea : set height for segments at the theshold for the max/min to better visualize what is significant
  done

scp'ing the modified s50plot.R file over to replace current one

1.30.14

s50method.pl seems to crash somewhere and gives no outfile, running now to debug. Could possibly be a slope=0 case again

to correlate with DRIPc : find center of each origin peak, measure distance from center to nearest DRIPc peak, store distance. No need to store position. Plot distances vertically on box plot. Randomize DRIPc-sized peaks (take avg size) over whole genome in number of DRIPc peaks and again run script. Produce plot with randomized distance and nonrandom distance. 

FOREACH $origin
  $mean = find_center($origin{start}, $origin{end}) 
  binary_search(DRIPc_peaks) # find nearest peak
  $distance = abs($mean - $DRIPc_peaks[$index]) # use mean of DRIPc peak also
  @distances[@distances] = $distance

need to seperate hashes by chromosome, run only over same chromosome, have large outer loop FOREACH $chr like normal.

Learn to make vertical box plot R
use bedtools to randomize windows
http://www.statmethods.net/graphs/boxplot.html 
http://www.r-bloggers.com/box-plot-with-r-tutorial/
distances.pl written, untested, in /data/aparna/

aparna@zeus:~/DATA/DRIP_DRIPc/peakfiles$ awk '{print $3-$2}' NT2_dripc_sicer.bed | awk '{sum+=$1} END {print "Average = ",sum/NR}'
Average =  13135.7
aparna@zeus:~/DATA/DRIP_DRIPc/peakfiles$ wc -l NT2_dripc_sicer.bed 
19314 NT2_dripc_sicer.bed

made temporary genome sizes file
aparna@zeus:~$ awk '{print "chr" $1 "\t" $2}' genome_sizes_hg19.txt > filt_genomesizes_hg19.txt
aparna@zeus:~$ less filt_genomesizes_hg19.txt
aparna@zeus:~$ mv filt_genomesizes_hg19.txt DATA/

made file of random dripc-avg size windows over genome
aparna@zeus:~/DATA$ bedtools random -l 13136 -n 19314 -g filt_genomesizes_hg19.txt  > random_DRIPc-like_windows_genome.bed

note : there are multiple columns here so less first before inputing in script!

1.1.14

YES THE SCRIPTS WORKED

Debugged s50method.pl (also modification : if $m_value == 0 do not print out anything) 

made R script capable of handling NA's (LOCAL R script, need to transfer over)

Have a graph of chr8 !!!

It looks right !!!

outfiles on local : earlyorigins.txt lateorigins.txt. R script is VERY fast

2.2.14

Made R script capable of handling NA values.

distances.pl debugged and run.
infiles : 
earlyorigins.bed
lateorigins.bed

nt2dripcpeaks_chr8.bed
random_DRIPc-like_windows_chr8_cols.bed
cpgislands_chr8.bed

outfiles are in 
early_cpg_distances
early_distances_outfiles_DRIPc
early_distances_outfiles_random
late_cpg_distances
late_distances_outfiles_DRIPc
late_distances_outfiles_random

boxplots are
early_Dripc_cpg_random.png
late_dripc_cpg_random.png

Need to take a second look at distances script just in case.
Distances doesn't seem like a good way of seeing correlation, as there are so many more CpG peaks. Overlap, base pair %?
  maybe do bedtools intersect -wo and find percent bp overlap

This so far was only chr8. Need to rewrite s50 script for genome.
Also find a different way of calling origins and use to refine origins.
Also run R script over new data and compare those origins.

Need to clean up DATA/ folder. 

2.6.14

Moved many files to replication_origins/s50/distances/

aparna@zeus:/data/aparna/replication_origins/s50/distances$ l
browser_early.bed                 late_distances_outfiles_DRIPc/
browser_late.bed                  late_distances_outfiles_random/
cpgislands_chr8.bed               late_dripc_cpg_random.png
distances.pl*                     lateorigins.bed
early_Dripc_cpg_random.png        lateorigins.txt
early_cpg_distances/              nt2dripcpeaks_chr8.bed
early_distances_outfiles_DRIPc/   random_DRIPc-like_windows_chr8.bed
early_distances_outfiles_random/  random_DRIPc-like_windows_chr8_cols.bed
earlyorigins.bed                  random_DRIPc-like_windows_genome.bed
earlyorigins.txt                  s50outfile.txt
filt_genomesizes_hg19.txt         s50plot.R
late_cpg_distances/

2.7.14

Rewriting s50 script : s50_moremem.pl

2.10.14

Wrote s50_moremem.pl
Syntax checked but not tested.
aparna@zeus:/data/aparna/replication_origins/s50$ cp s50_moremem.pl CLEAN_s50_moremem.pl

debugging on CLEAN* file.

errors fixed but output is completely wrong

2.11.14

YAY output is correct! it was a matter of += m_val for each s file > 0 (because it goes 15%, 30% etc) .

aparna@zeus:/data/aparna/replication_origins/s50$ ./CLEAN_s50_moremem.pl test2/TEST2_chr8_S1.bedgraph test2/TEST2_chr8_S2.bedgraph test2/TEST2_chr8_S3.bedgraph test2/TEST2_chr8_S4.bedgraph test2/TEST2_chr8_S5.bedgraph test2/TEST2_chr8_S6.bedgraph
^ test usage

Running for real over chr 8 now.
aparna@zeus:/data/aparna/replication_origins/s50$ ./CLEAN_s50_moremem.pl sphase/chr8_S1.bedgraph sphase/chr8_S2.bedgraph sphase/chr8_S3.bedgraph sphase/chr8_S4.bedgraph sphase/chr8_S5.bedgraph sphase/chr8_S6.bedgraph 

Started 11:07

Temp files done in like 15 secs


oops forgot to remove the debug while  $infiniteloop < 10 (though really it should only be like 2 or 3)

aparna@zeus:/data/aparna/replication_origins/s50$ screen -s s50_chr8_faster ./CLEAN_s50_moremem.pl sphase/chr8_S1.bedgraph sphase/chr8_S2.bedgraph sphase/chr8_S3.bedgraph sphase/chr8_S4.bedgraph sphase/chr8_S5.bedgraph sphase/chr8_S6.bedgraph

running again under screen

11:15 (near when minute turns)
11:16 file 0
11:17 file 1
11:19 file 2
11:21 file 3
11:24 file 4
11:27 file 5
analyze is insanely fast (less than a second) and totally done at 11:29

In total script took 14 minutes (!!!!)
(it's barely using any memory AND it seems to be way faster!)

diff showed that the new script has one more entry (which should be disregareded probably cause may not be 50kb ... old script found a "newend"). That is the only difference diff found. The two graphs are /slightly/ different, but that seems to be due to smooth.spline (I guess every time it calculates it it's possible to get a slightly different curve? Or may have something to do with those last two values new script has). The data is the same though.

Now that 1 chr is quite fast can run over whole genome ... chr8 took ~15 mins so assume 23 * 15 = 345 / 60 = 5.75 hrs for whole genome approximately.

No crashes, outfiles are right, everything seems to work! Have not tested it's ability to do multiple chrs, it /should/ work fine though. 

The s50 whole genome files are in /data/aparna/replication_origins/s50/sphase (The files starting with GSM)

going to run whole genome (if only to test the mult-chr ability of this script)

aparna@zeus:/data/aparna/replication_origins/s50$ screen -S s50_genome ./CLEAN_s50_moremem.pl sphase/GSM922792_RepliSeq_S1_Hela_subtracted.bedGraph sphase/GSM922793_RepliSeq_S2_Hela_subtracted.bedGraph sphase/GSM922794_RepliSeq_S3_Hela_subtracted.bedGraph sphase/GSM922795_RepliSeq_S4_Hela_subtracted.bedGraph sphase/GSM922796_RepliSeq_S5_Hela_subtracted.bedGraph sphase/GSM922797_RepliSeq_S6_Hela_subtracted.bedGraph

11:49 start (hopefully will be done by 6 pm)

Apparently the foreach loop in read-in goes to 7 for some strange reason (but 6 & 7 are like instantaneous so should be empty in hash) but still they are pointlessly initialized ... which takes up memory and TIME.

11:57 done temp files
for some bizzare reason there is a file6 temp file (starts at 0 ... should end at 5)

Format of outfiles is <pos>\t<val>

will have to run R script seperately (in seperate dirs) for each chr

For new data, will have to seperate out into chr files (awk, grep) and reformat (awk) before running R script.

REASON WHY temp files goes to 6 and read-in files to 7 :
tempfiles sub :
  foreach my $i (0..scalar(@inputfiles))
read_in sub : 
  foreach my $i (0..scalar(@files))

these both mean $i = 0 < $i <= @files ; $i ++ NOT $i < @files which is what I need
Fix this!

fixed, re-running whole genome
start 12:08

should have a temp file directory

So takes ~10 mins to split all temp files, 11 mins per chr read-in, instantaneous analyze per chr, instantaneous print per chr.

Temp file read in done 12:15

Should mv s50_moremem.pl to new name since it is not debugged and is wrong, but may have useful comments.

12:26 totally done with chr11
$i problem fixed
Seems to be able to handle multiple chrs well

Actually estimate (10 mins temp , 10 mins read_in/analyze/print * # chrs) is 4 hrs.

1:26 7 chrs done (with outfiles)

(does seem to be taking 10 mins read-in per chr depending on chr length)

2.12.14

Script done, outfiles look correct! Made dir s50_orc1data_hela and mv all chr*outfile.txt files there. 

aparna@zeus:/data/aparna/replication_origins/s50$ mv s50_moremem.pl DEBUG_s50moremem.pl

Need to find out a way to have the R script accept parameters. Also make a version of the R script that doesn't output a graph so it can just be run over the files. Then write a bash script that calls all this.

  for f in (dir)
  do
    # run R script
    # reformat & rename outfiles with awk
  done
  cat all outfiles into early and late

wrote the bash script and modified R script, scp'd over.
aparna@zeus:~/DATA/replication_origins/s50$ l
CLEAN_s50_moremem.pl*  outfile1_wrong.txt    s50outfile.txt         testdata/
DEBUG_s50moremem.pl*   s50_control_calc.sh*  scientificnotation.pl
distances/             s50_orc1data_hela/    sphase/
nograph_s50plot.R*     s50method.pl*         test2/

s50_control_calc.sh is the bash script to call. Uses nograph_s50plot.R.

ran 

aparna@zeus:~/DATA/replication_origins/s50$ ./s50_control_calc.sh s50_orc1data_hela

outfiles are
  early_origins_all.txt
  late_origins_all.txt

Which contain all origins genome-wide from the ORC1 S phase data.

for some reason there is no chr1? 
Thresholds need to be stricter or overlap needed.
  may be due to ORC1 dataset being different than Genome Browser HeLa data
  CLEAN_s50_moremem.pl outfile chr1 exists, but it is not in the bash/R process outfiles

2.13.14
Error in uniroot(f = d2, interval = c(critptsx[i], critptsx[i - 1])) : 
  f() values at end points not of opposite sign
Execution halted
chr1
awk: cannot open earlyorigins.txt (No such file or directory)
awk: cannot open lateorigins.txt (No such file or directory)
rm: cannot remove `earlyorigins.txt': No such file or directory
rm: cannot remove `lateorigins.txt': No such file or directory

^ error message for chr1 in bash control script (error is from R) so no R outfile printed.

2.18.14

Fixed R script that was not working over new data. 

2.19.14

Starting download of all data for cell types GM12878, K562, HeLa, ESC cells (from somewhere)

Download done for all but ESC cells

aparna@zeus:/data/aparna/replication_origins/s50$ l
CLEAN_s50_moremem.pl*  hg19_smoothed_newdata/  parse_newdata.pl*     test2/
distances/             K562_ENCODE/            s50_control_calc.sh*  testdata/
GM_ENCODE/             nograph_s50plot.R*      s50_orc1data_hela/
HeLa_ENCODE/           other/                  sphase/

aparna@zeus:/data/aparna/replication_origins/s50$ screen -S s50_GM_genome ./CLEAN_s50_moremem.pl GM_ENCODE/GM12878_G1.txt GM_ENCODE/GM12878_S1.txt GM_ENCODE/GM12878_S2.txt GM_ENCODE/GM12878_S3.txt GM_ENCODE/GM12878_S4.txt GM_ENCODE/GM12878_G2.txt 

Need to check each input before to make sure there isn't a max line output warning because of no filter (need to increase line output limit to max on genome browser)

aparna@zeus:/data/aparna/replication_origins/s50$ screen -S s50_K562_genome ./CLEAN_s50_moremem.pl K562_ENCODE/K562_G1.txt K562_ENCODE/K562_S1.txt K562_ENCODE/K562_S2.txt K562_ENCODE/K562_S3.txt K562_ENCODE/K562_S4.txt K562_ENCODE/K562_G2.txt 

Need to run in seperate dirs!

aparna@zeus:/data/aparna/replication_origins/s50/GM_ENCODE$ screen -S s50_GM_genome ../CLEAN_s50_moremem.pl GM12878_G1.txt GM12878_S1.txt GM12878_S2.txt GM12878_S3.txt GM12878_S4.txt GM12878_G2.txt

aparna@zeus:/data/aparna/replication_origins/s50/K562_ENCODE$ screen -S s50_K562_genome ../CLEAN_s50_moremem.pl K562_G1.txt K562_S1.txt K562_S2.txt K562_S3.txt K562_S4.txt K562_G2.txt

aparna@zeus:/data/aparna/replication_origins/s50$ cp nograph_s50plot.R parse_newdata.pl s50_control_calc.sh CLEAN_s50_moremem.pl ../../scripts/

aparna@zeus:/data/aparna/replication_origins/s50$ ./s50_control_calc.sh s50_orc1data_hela 

aparna@zeus:/data/aparna/replication_origins/s50$ cp hg19_smoothed_newdata/early_origins_all.txt newdata_lymphoblastoid_early_origins_all.txt
aparna@zeus:/data/aparna/replication_origins/s50$ cp hg19_smoothed_newdata/late_origins_all.txt newdata_lymphoblastoid_late_origins_all.txt

added header track to all current outfiles 
deleted problematic lines 
newdata_lymphoblastoid_early_origins_all.txt  ORC1paper_HeLa_early_origins_all.txt
newdata_lymphoblastoid_late_origins_all.txt   ORC1paper_HeLa_late_origins_all.txt
All can now be uploaded on genome browser

wait ... for new data high means early and low means late (cause originally neg was late) ... so the "early" file is actually late and the late file is actually early ...

aparna@zeus:/data/aparna/replication_origins/s50$ mv newdata_lymphoblastoid_early_origins_all.txt temp
aparna@zeus:/data/aparna/replication_origins/s50$ mv newdata_lymphoblastoid_late_origins_all.txt newdata_lymphoblastoid_early_origins_all.txt 
aparna@zeus:/data/aparna/replication_origins/s50$ mv temp newdata_lymphoblastoid_late_origins_all.txt 

changed track names too, now they are correct

s50 took only 1 hr!!!
aparna@zeus:/data/aparna/replication_origins/s50/K562_ENCODE$ mkdir s50_outfiles
aparna@zeus:/data/aparna/replication_origins/s50/K562_ENCODE$ mv chr* s50_outfiles/
 same for GM

aparna@zeus:/data/aparna/replication_origins/s50/HeLa_ENCODE$ screen -S s50_HeLa_genome ../CLEAN_s50_moremem.pl HeLa_G1.txt HeLa_S1.txt HeLa_S2.txt HeLa_S3.txt HeLa_S4.txt HeLa_G2.txt

aparna@zeus:/data/aparna/replication_origins/s50/BG02ES_ENCODE$ screen -S s50_BG02ES_genome ../CLEAN_s50_moremem.pl BG02ES_G1.txt BG02ES_S1.txt BG02ES_S2.txt BG02ES_S3.txt BG02ES_S4.txt BG02ES_G2.txt 

aparna@zeus:/data/aparna/replication_origins/s50$ ./s50_control_calc.sh GM_ENCODE/s50_outfiles

aparna@zeus:/data/aparna/replication_origins/s50$ mv early_origins_all.txt GM12878_early_origins_all.txt

aparna@zeus:/data/aparna/replication_origins/s50$ mv late_origins_all.txt GM12878_late_origins_all.txt

Added track header
tested in genome browser
aparna@zeus:/data/aparna/replication_origins/s50$ ./s50_control_calc.sh K562_ENCODE/s50_outfiles

aparna@zeus:/data/aparna/replication_origins/s50$ mv early_origins_all.txt K562_early_origins_all.txt
aparna@zeus:/data/aparna/replication_origins/s50$ mv late_origins_all.txt K562_late_origins_all.txt

added track header
tested in genome browser

finished HeLa ENCODE and BG02ES (ESC)

2.21.14 

need to scp over all origin files again

overlap script that needs to be debugged is overlap_origin_files.sh
  somehow this deleted the original origin dir, need to use a test directory with this first

2.24.14

Debugging overlapping script
2.25.14 

fixed overlap script, common_origins outfiles produced. Error was in how array was passed and the need for -1 on the for loop in function.
Second for loops was not needed. 

2.26.14
overlap script works! outfiles in test_overlap. Going to put headers and move them into replication_origins/s50/origin_files/

aparna@zeus:/data/aparna/test_overlap$ cp overlap_origin_files.sh makeint.pl ../scripts/

Note : all origin files have threshold of {70%,30%} on the {max,min} for {late,early} 

bedtools -wo to find bp overlap, then find percent overlap

aparna@zeus:/data/aparna/replication_origins/s50/peak_comparison$ bedtools intersect -wo -a ../../../DRIP_DRIPc/peakfiles/NT2_dripc_sicer.bed -b ../origin_files/common_early_origins.bed > dripcpeaks_earlyorigins_wofile.bed

redid flipping a and b

aparna@zeus:/data/aparna/replication_origins/s50/peak_comparison$ bedtools intersect -wo -b ../../../DRIP_DRIPc/peakfiles/NT2_dripc_sicer.bed -a ../origin_files/common_early_origins.bed > dripcpeaks_earlyorigins_wofile.bed

aparna@zeus:/data/aparna/replication_origins/s50/peak_comparison$ bedtools intersect -wo -a ../origin_files/common_early_origins.bed -b ../../../region_metaplots/cpg_islands_all_parsed.bed > cpg_earlyorigins_wofile.bed

aparna@zeus:/data/aparna/replication_origins/s50/peak_comparison$ bedtools intersect -wo -a ../origin_files/common_late_origins.bed -b ../../../region_metaplots/cpg_islands_all_parsed.bed > cpg_lateorigins_wofile.bed

aparna@zeus:/data/aparna/replication_origins/s50/peak_comparison$ bedtools intersect -wo -b ../../../DRIP_DRIPc/peakfiles/NT2_dripc_sicer.bed -a ../origin_files/common_late_origins.bed > dripcpeaks_lateorigins_wofile.bed

--- for reference for awk command (not actually run, from notes)
aparna@zeus:~/DATA$ awk '{print $3-$2}' intersection.bed | awk '{sum+=$1} END { print "Average = ",sum/NR}'
---

aparna@zeus:/data/aparna/replication_origins/s50/peak_comparison$ awk '{print $10}' dripcpeaks_earlyorigins_wofile.bed | awk '{sum+=$1} END {print sum}'
478747800
aparna@zeus:/data/aparna/replication_origins/s50/peak_comparison$ awk '{print $3-$2}' ../../../DRIP_DRIPc/peakfiles/NT2_dripc_sicer.bed | awk '{sum+=$1} END {print sum}'
253703386

there must be duplicate entries in the -wo file
common origins files have a LOT of duplicates

aparna@zeus:/data/aparna/replication_origins/s50/peak_comparison$ awk '{print $3-$2}' common_early_origins.bed | awk '{sum+=$1} END {print sum}'
104915813
This file is free of duplicates but not sorted

aparna@zeus:/data/aparna/replication_origins/s50/peak_comparison$ awk '{print $10}' dripcpeaks_earlyorigins_wofile.bed | awk '{sum+=$1} END {print sum}'
15636641

aparna@zeus:/data/aparna/replication_origins/s50/peak_comparison$ remove_duplicate_lines.pl ../origin_files/common_late_origins.bed 

aparna@zeus:/data/aparna/replication_origins/s50/peak_comparison$ mv common_early_origins.bed ../origin_files/

aparna@zeus:/data/aparna/replication_origins/s50/peak_comparison$ bedtools intersect -wo -a ../origin_files/common_late_origins.bed -b ../../../DRIP_DRIPc/peakfiles/NT2_dripc_sicer.bed > dripcpeaks_lateorigins_wofile.bed 

aparna@zeus:/data/aparna/replication_origins/s50/peak_comparison$ awk '{print $10}' dripcpeaks_lateorigins_wofile.bed | awk '{sum+=$1} END {print sum}'
390499

aparna@zeus:/data/aparna/replication_origins/s50/peak_comparison$ bedtools intersect -wo -a ../origin_files/common_early_origins.bed -b ../../../region_metaplots/cpg_islands_all_parsed.bed > cpg_earlyorigins_wofile.bed 

aparna@zeus:/data/aparna/replication_origins/s50/peak_comparison$ awk '{print $7}' cpg_earlyorigins_wofile.bed | awk '{sum+=$1} END {print sum}'
1637644

aparna@zeus:/data/aparna/replication_origins/s50/peak_comparison$ bedtools intersect -wo -a ../origin_files/common_late_origins.bed -b ../../../region_metaplots/cpg_islands_all_parsed.bed > cpg_lateorigins_wofile.bed 

aparna@zeus:/data/aparna/replication_origins/s50/peak_comparison$ awk '{print $7}' cpg_lateorigins_wofile.bed | awk '{sum+=$1} END {print sum}'70279

aparna@zeus:/data/aparna/replication_origins/s50/peak_comparison$ awk '{print $3-$2}' ../../../region_metaplots/cpg_islands_all_parsed.bed | awk '{sum+=$1} END {print sum}'
21842742

aparna@zeus:/data/aparna/replication_origins/s50/peak_comparison$ awk '{print $3-$2}' ../origin_files/common_early_origins.bed | awk '{sum+=$1} END {print sum}' 
104915813
aparna@zeus:/data/aparna/replication_origins/s50/peak_comparison$ awk '{print $3-$2}' ../origin_files/common_late_origins.bed | awk '{sum+=$1} END {print sum}'i
63547547

dripc_early_overlap / dripc * 100
15636641/253703386*100
6.16335526558561579400

dripc_late_overlap / dripc * 100
390499/253703386*100
.15391950661628142400

dripc_early_overlap / early * 100
15636641/104915813*100
14.90398878193890562500

dripc_late_overlap / late * 100
390499/63547547*100
.61449893573390016100

cpg_early_overlap / cpg * 100
1637644/21842742*100
7.49742866532049868000

cpg_late_overlap / cpg * 100
70279/21842742*100
.32174989751744538300

cpg_early_overlap / early * 100
1637644/104915813*100
1.56091246226152772600

cpg_late_overlap / late * 100
70279/63547547*100
.11059278181107446900

2.28.14 

Look into using hypergeometric distribution to compare statistical significance of overlapping regions. phyper in R. Not sure what to use as "C" : number of bp? bp transcribed (80% of genome)? tried both and for dripc early got p of 0 essentially (was 14% overlap). 

Overlap is significant! Need to clean up origin peak files more : throw out non-ENCODE datasets, merge nearby peaks

aparna@zeus:/data/aparna/replication_origins/s50/cleanup_origins$ for f in origin_files/* ; do bedtools merge -d 50000 -i $f > $f.merged ; done 

This folder has no non-ENCODE datasets

aparna@zeus:/data/aparna/replication_origins/s50/cleanup_origins/origin_files$ mkdir merged
aparna@zeus:/data/aparna/replication_origins/s50/cleanup_origins/origin_files$ mv *.merged merged/
aparna@zeus:/data/aparna/replication_origins/s50/cleanup_origins$ ./overlap_origin_files.sh origin_files/merged/

aparna@zeus:/data/aparna/replication_origins/s50/cleanup_origins$ l
common_early_origins.bed  intersect_outfile.bed  origin_files/
common_late_origins.bed   makeint.pl*            overlap_origin_files.sh*

added track headers to common*

These contain common origins from 
BG02ES_early_origins_all.txt.merged
BG02ES_late_origins_all.txt.merged
GM12878_early_origins_all.txt.merged
GM12878_late_origins_all.txt.merged
HeLa_ENCODE_early_origins_all.txt.merged
HeLa_ENCODE_late_origins_all.txt.merged
K562_early_origins_all.txt.merged
K562_late_origins_all.txt.merged

which were merged if peaks were within 50kb as according to the ORC1 paper methods

Run overlaps over these and calculate percent overlap

aparna@zeus:/data/aparna/replication_origins/s50/cleanup_origins$ remove_duplicate_lines.pl common_early_origins.bed 
aparna@zeus:/data/aparna/replication_origins/s50/cleanup_origins$ remove_duplicate_lines.pl common_late_origins.bed 
aparna@zeus:/data/aparna/replication_origins/s50/cleanup_origins$ awk '{print $3-$2}' common_early_origins.bed | awk '{sum+=$1} END {print sum}'
265156281

aparna@zeus:/data/aparna/replication_origins/s50/cleanup_origins$ awk '{print $3-$2}' common_late_origins.bed | awk '{sum+=$1} END {print sum}'
116749914

aparna@zeus:/data/aparna/replication_origins/s50/cleanup_origins$  awk '{print $3-$2}' ../../../DRIP_DRIPc/peakfiles/NT2_dripc_sicer.bed | awk '{sum+=$1} END {print sum}'
253703386

aparna@zeus:/data/aparna/replication_origins/s50/cleanup_origins$ awk '{print $3-$2}
' ../../../region_metaplots/cpg_islands_all_parsed.bed | awk '{sum+=$1} END {print sum}'
21842742

aparna@zeus:/data/aparna/replication_origins/s50/cleanup_origins$ bedtools intersect -wo -a common_early_origins.bed -b ../../../DRIP_DRIPc/peakfiles/NT2_dripc_sicer.bed | awk '{print $10}' | awk '{sum+=$1} END {print sum}'
42311475

aparna@zeus:/data/aparna/replication_origins/s50/cleanup_origins$ bedtools intersect -wo -a common_late_origins.bed -b ../../../DRIP_DRIPc/peakfiles/NT2_dripc_sicer.bed | awk '{print $10}' | awk '{sum+=$1} END {print sum}'
758680

aparna@zeus:/data/aparna/replication_origins/s50/cleanup_origins$ bedtools intersect -wo -a common_early_origins.bed -b ../../../region_metaplots/cpg_islands_all_parsed.bed | awk '{print $7}' | awk '{sum+=$1} END {print sum}'
4363668

aparna@zeus:/data/aparna/replication_origins/s50/cleanup_origins$ bedtools intersect -wo -a common_late_origins.bed -b ../../../region_metaplots/cpg_islands_all_parsed.bed | awk '{print $7}' | awk '{sum+=$1} END {print sum}'
112081

dripc_early_overlap / dripc * 100
> 42311475/253703386*100
[1] 16.67754

dripc_late_overlap / dripc * 100
> 758680/253703386*100
[1] 0.2990421

dripc_early_overlap / early * 100
> 42311475/265156281*100
[1] 15.95718

dripc_late_overlap / late * 100
> 758680/116749914*100
[1] 0.6498335

cpg_early_overlap / cpg * 100
> 4363668/21842742*100
[1] 19.97766

cpg_late_overlap / cpg * 100
> 112081/21842742*100
[1] 0.513127

cpg_early_overlap / early * 100
> 4363668/265156281*100
[1] 1.645697

cpg_late_overlap / late * 100
> 112081/116749914*100
[1] 0.09600093

check numbers to make sure
also need to add this notebook to git
need to remove centromeres! Re-do all overlaps with centromeres removed.

2.3.14

Removing errors (peaks over gap regions)
downloaded gaps from mapping/sequencing track

going to do bedtools intersect -v -a <origin file> -b <gap file> for cleaned up common origin files.

aparna@zeus:/data/aparna/replication_origins/s50/cleanup_origins$ bedtools intersect -v -a common_early_origins.bed -b gaps_hg19.bed > common_early_origins_clean_gaprm.bed
aparna@zeus:/data/aparna/replication_origins/s50/cleanup_origins$ bedtools intersect -v -a common_late_origins.bed -b gaps_hg19.bed > common_late_origins_clean_gaprm.bed

aparna@zeus:/data/aparna/replication_origins/s50/cleanup_origins$ sort -k 1,1 -k 2,2g common_early_origins_clean_gaprm.bed > common_early_origins_clean_gaprm_sort.bed 
aparna@zeus:/data/aparna/replication_origins/s50/cleanup_origins$ sort -k 1,1 -k 2,2g common_late_origins_clean_gaprm.bed > common_late_origins_clean_gaprm_sort.bed 

aparna@zeus:/data/aparna/replication_origins/s50/cleanup_origins$ cp common* ../origin_files/

aparna@zeus:/data/aparna/replication_origins/s50/origin_files$ rm common_early_origins.bed common_late_origins.bed 

aparna@zeus:/data/aparna/replication_origins/s50/origin_files$ l
BG02ES_early_origins_all.txt
BG02ES_late_origins_all.txt
common_early_origins_clean_gaprm_sort.bed
common_late_origins_clean_gaprm_sort.bed
GM12878_early_origins_all.txt
GM12878_late_origins_all.txt
HeLa_ENCODE_early_origins_all.txt
HeLa_ENCODE_late_origins_all.txt
K562_early_origins_all.txt
K562_late_origins_all.txt
newdata_lymphoblastoid_early_origins_all.txt
newdata_lymphoblastoid_late_origins_all.txt
ORC1paper_HeLa_early_origins_all.txt
ORC1paper_HeLa_late_origins_all.txt

now can do the bp overlaps

aparna@zeus:/data/aparna/replication_origins/s50$ remove_duplicate_lines.pl origin_files/common_early_origins_clean_gaprm_sort.bed 
aparna@zeus:/data/aparna/replication_origins/s50$ remove_duplicate_lines.pl origin_files/common_late_origins_clean_gaprm_sort.bed 

aparna@zeus:/data/aparna/replication_origins/s50$ awk '{print $3-$2}' origin_files/common_early_origins_clean_gaprm_sort.bed | awk '{sum+=$1} END {print sum}'
254364461

aparna@zeus:/data/aparna/replication_origins/s50$ awk '{print $3-$2}' origin_files/common_late_origins_clean_gaprm_sort.bed | awk '{sum+=$1} END {print sum}'
94243199

aparna@zeus:/data/aparna/replication_origins/s50$ awk '{print $3-$2}' ../../DRIP_DRIPc/peakfiles/NT2_dripc_sicer.bed | awk '{sum+=$1} END {print sum}'
253703386

aparna@zeus:/data/aparna/replication_origins/s50$ awk '{print $3-$2}
' ../../region_metaplots/cpg_islands_all_parsed.bed | awk '{sum+=$1} END {print sum}'
21842742

early=254364461
late=94243199
dripc=253703386
cpg=21842742

aparna@zeus:/data/aparna/replication_origins/s50$ bedtools intersect -wo -a origin_files/common_early_origins_clean_gaprm_sort.bed -b ../../DRIP_DRIPc/peakfiles/NT2_dripc_sicer.bed | awk '{print $10}' | awk '{sum+=$1} END {print sum}'
40192163
aparna@zeus:/data/aparna/replication_origins/s50$ bedtools intersect -wo -a origin_files/common_late_origins_clean_gaprm_sort.bed -b ../../DRIP_DRIPc/peakfiles/NT2_dripc_sicer.bed | awk '{print $10}' | awk '{sum+=$1} END {print sum}'
478812

dripc_early=40192163
dripc_late=478812

aparna@zeus:/data/aparna/replication_origins/s50$ bedtools intersect -wo -a origin_files/common_early_origins_clean_gaprm_sort.bed -b ../../region_metaplots/cpg_islands_all_parsed.bed | awk '{print $7}' | awk '{sum+=$1} END {print sum}'
4221264
aparna@zeus:/data/aparna/replication_origins/s50$ bedtools intersect -wo -a origin_files/common_late_origins_clean_gaprm_sort.bed -b ../../region_metaplots/cpg_islands_all_parsed.bed | awk '{print $7}' | awk '{sum+=$1} END {print sum}'
83119

cpg_early=4221264
cpg_late=83119

-------------------
early=254364461
late=94243199
dripc=253703386
cpg=21842742
dripc_early=40192163
dripc_late=478812
cpg_early=4221264
cpg_late=83119
-------------------

dripc_early/dripc*100
> 40192163/253703386*100
[1] 15.84219

dripc_late/dripc*100
> 478812/253703386*100
[1] 0.1887291

dripc_early/early*100
> 40192163/254364461*100
[1] 15.80101

dripc_late/late*100
> 478812/94243199*100
[1] 0.50806

cpg_early/cpg*100
> 4221264/21842742*100
[1] 19.32571

cpg_late/cpg*100
> 83119/21842742*100
[1] 0.3805337

cpg_early/early*100
> 4221264/254364461*100
[1] 1.659534

cpg_late/late*100
> 83119/94243199*100
[1] 0.08819628

> 15.84219/0.1887291    
[1] 83.94143          (dripc_early/dripc*100) / (dripc_late/dripc*100)
> 15.80101/0.50806
[1] 31.10068          (dripc_early/early*100) / (dripc_late/late*100)
> 19.32571/0.3805337
[1] 50.7858           (cpg_early/cpg*100) / (cpg_late/cpg*100)
> 1.659534/0.08819628
[1] 18.81637          (cpg_early/early*100) / (cpg_late/late*100)

may get slightly different numbers if the individual origin files are cleaned, then a common file is made. Note : these are also merged all peaks within 50kb. Note : the common files were made from _uncleaned_ but merged seperate origin files, and then overlaped, gaprmed sorted. This is probably okay because they were merged first.

common_origin_files_clean.sh was supposed to do all this but is not working

aparna@zeus:/data/aparna$ cp notes/notebook scripts/
added, committed, pushed to git 

3.4.14

common origin files were actually not sorted

aparna@zeus:/data/aparna/replication_origins/s50$ sort -k 1,1 -k2,2n origin_files/common_late_origins_clean_gaprm_sort.bed > common_late_origins.bed
aparna@zeus:/data/aparna/replication_origins/s50$ sort -k 1,1 -k2,2n origin_files/common_early_origins_clean_gaprm_sort.bed > common_early_origins.bed

track heading is at bottom. Moving to top.

aparna@zeus:/data/aparna/replication_origins/s50$ ls origin_files/
BG02ES_early_origins_all.txt       K562_late_origins_all.txt
BG02ES_late_origins_all.txt        ORC1paper_HeLa_early_origins_all.txt
GM12878_early_origins_all.txt      ORC1paper_HeLa_late_origins_all.txt
GM12878_late_origins_all.txt       common_early_origins.bed
HeLa_ENCODE_early_origins_all.txt  common_late_origins.bed
HeLa_ENCODE_late_origins_all.txt   newdata_lymphoblastoid_early_origins_all.txt
K562_early_origins_all.txt         newdata_lymphoblastoid_late_origins_all.txt

not sure if these are merged or not?

common* is merged, gaprm, etc etc

origin_files/ are different than cleanup_origins/origin_files/ and cleanup_origins/origin_files/merged/

script works!

cleaned up dir a bit, cleaned up origin_files/ dir. FINAL COMMON ORIGIN FILES encode : 

aparna@zeus:/data/aparna/replication_origins/s50$ ./common_origin_files_clean.sh ../../DRIP_DRIPc/peakfiles/NT2_dripc_sicer.bed ../../region_metaplots/cpg_islands_all_parsed.bed gaps_hg19.bed origin_files/ENCODE 

Outfiles are common_early_origins.bed common_late_origins.bed
origin_files/ENCODE contains sorted, merged, gaprm individual origin outfiles.
There are no headers for any files

Counts
DRIPc count: 253703386
CpG count: 21842742
Common Early count: 232297634
Common Late count: 90206435
DRIPc_early overlap count: 36589654
DRIPc_late overlap count: 421415
CpG_early overlap count: 3721307
CpG_late overlap count: 64862

aparna@zeus:/data/aparna/replication_origins/s50$ mv common_early_origins.bed origin_files/common_origins/common_early_origins_ENCODE.bed 
aparna@zeus:/data/aparna/replication_origins/s50$ mv common_late_origins.bed origin_files/common_origins/common_late_origins_ENCODE.bed

aparna@zeus:/data/aparna/replication_origins/s50$ mv common_origin_files_clean.sh ../../scripts/

The above counts are FINAL. The files in origin_files/ENCODE are cleaned up FINAL. The common origin files listed above are FINAL.

need to add headers
calculating percentages in R now

FINAL PERCENTAGES
----------------------------------------------
dripc_early/dripc*100
> 36589654/253703386*100
[1] 14.42222

dripc_late/dripc*100
> 421415/253703386*100
[1] 0.1661054

dripc_early/early*100
> 36589654/232297634*100
[1] 15.7512

dripc_late/late*100
> 421415/90206435*100
[1] 0.4671673

cpg_early/cpg*100
> 3721307/21842742*100
[1] 17.03681

cpg_late/cpg*100
> 64862/21842742*100
[1] 0.2969499

cpg_early/early*100
> 3721307/232297634*100
[1] 1.601956

cpg_late/late*100
> 64862/90206435*100
[1] 0.07190396


dripc_early/dripc_late
> 36589654/421415
[1] 86.8257

cpg_early/cpg_late
> 3721307/64862
[1] 57.37268
---------------------------------------------

3.5.14

Run DRIPc peak overlap with each origin file independently
  just report the difference early late % overlaps
bp percent overlap with genes (refseq)
RNA-seq data
  For coordinates of each peak, take avg of RNAseq expression level.

Do all this for early & late peaks

Comparing difference between early & late peak percent overlaps

DRIPc

aparna@zeus:/data/aparna/replication_origins/s50$ for f in origin_files/ENCODE/* ; do echo $f ; bedtools intersect -wo -a $f -b ../../DRIP_DRIPc/peakfiles/NT2_dripc_sicer.bed | awk '{print $10}' | awk '{sum+=$1} END {print sum}' ; done
origin_files/ENCODE/BG02ES_early_origins_all.txt
99391273
origin_files/ENCODE/BG02ES_late_origins_all.txt
9484139
origin_files/ENCODE/GM12878_early_origins_all.txt
103237239
origin_files/ENCODE/GM12878_late_origins_all.txt
18794908
origin_files/ENCODE/HeLa_ENCODE_early_origins_all.txt
102087740
origin_files/ENCODE/HeLa_ENCODE_late_origins_all.txt
20119965
origin_files/ENCODE/K562_early_origins_all.txt
90990314
origin_files/ENCODE/K562_late_origins_all.txt
20242672

BG02ES
> 99391273/9484139
[1] 10.47974
GM12878
> 103237239/18794908
[1] 5.49283
HeLa 
> 102087740/20119965
[1] 5.073952
K562
> 90990314/20242672
[1] 4.494975


CpG

aparna@zeus:/data/aparna/replication_origins/s50$ for f in origin_files/ENCODE/* ; do echo $f ; bedtools intersect -wo -a $f -b ../../region_metaplots/cpg_islands_all_parsed.bed | awk '{print $7}' | awk '{sum+=$1} END {print sum}' ; done
origin_files/ENCODE/BG02ES_early_origins_all.txt
8712732
origin_files/ENCODE/BG02ES_late_origins_all.txt
677071
origin_files/ENCODE/GM12878_early_origins_all.txt
8802787
origin_files/ENCODE/GM12878_late_origins_all.txt
1091814
origin_files/ENCODE/HeLa_ENCODE_early_origins_all.txt
8740936
origin_files/ENCODE/HeLa_ENCODE_late_origins_all.txt
1231600
origin_files/ENCODE/K562_early_origins_all.txt
8732054
origin_files/ENCODE/K562_late_origins_all.txt
866741

BG02ES
> 8712732/677071
[1] 12.86827
GM12878
> 8802787/1091814
[1] 8.062534
HeLa
> 8740936/1231600
[1] 7.09722
K562
> 8732054/866741
[1] 10.07458


Above data looked odd so I used the same command on the common origin files and got the correct results : 

aparna@zeus:/data/aparna/replication_origins/s50$ for f in origin_files/common_origins/* ; do echo $f ; bedtools intersect -wo -a $f -b ../../DRIP_DRIPc/peakfiles/NT2_dripc_sicer.bed | awk '{print $10}' | awk '{sum+=$1} END {print sum}' ; done
origin_files/common_origins/common_early_origins_ENCODE.bed
36589654
origin_files/common_origins/common_late_origins_ENCODE.bed
421415

> 36589654/421415
[1] 86.8257

aparna@zeus:/data/aparna/replication_origins/s50$ for f in origin_files/common_origins/* ; do echo $f ; bedtools intersect -wo -a $f -b ../../region_metaplots/cpg_islands_all_parsed.bed | awk '{print $7}' | awk '{sum+=$1} END {print sum}' ; done
origin_files/common_origins/common_early_origins_ENCODE.bed
3721307
origin_files/common_origins/common_late_origins_ENCODE.bed
64862

> 3721307/64862
[1] 57.37268

Genes --------

Used txStart txEnd (transcription start && end)
file is in bed format
chrom  txStart txEnd (hopefully will not freak out bedtools)

going to run it absolute without considering overlapping genes.

aparna@zeus:/data/aparna/replication_origins/s50$ for f in origin_files/common_origins/* ; do echo $f ; bedtools intersect -wo -a $f -b genes_hg19_refseq.bed | awk '{print $7}' | awk '{sum+=$1} END {print sum}' ; done
origin_files/common_origins/common_early_origins_ENCODE.bed
317453752
origin_files/common_origins/common_late_origins_ENCODE.bed
38739389

> 317453752/38739389
[1] 8.194599

---------------------

common_early / common_late 
> 232297634/90206435
[1] 2.575178

so for each calculation of overlap_early / overlap_late , ~2.6 of the difference is due to early_bp_count > late_bp_count.
Can the calculations just be adjusted by subtracting 2.6 from the overlap_early / overlap_late calculation?

Those calculations are only useful for comparing to each other, since that will not change (adjustment will prob be linear). 

So you can say DRIPc 86% is better than CpG 57% etc. even though neither takes into account that early > late. Need stronger tests to really prove significance of correlation. 

maybe multiply early stuff my scaling factor of 0.9742482 ?
> 86.8257 * 0.9742482
[1] 84.58978

?

Need to find RNA-seq expression comparison and learn to do Monte Carlo simulation with random windows of size early_origins and late_origins and see how good DRIPc/CpG/gene/RNA-seq bp%overlap is.

Probably will not be able to find an analytical test that can deal with the size of numbers.

the obvious inefficient way : 

1000 times :
  generate random windows in probable regions of genome
    nonrandom regions would be a better test, but way more difficult to figure out
  calculate overlap percents
  store in array to graph later

bedtools shuffle with -chrom option and -excl option with gaps file and -i is the origin file to generate pseudorandom weighted windows for monte carlo simulation

this command works very well

aparna@zeus:/data/aparna/replication_origins/s50/stats$ bedtools shuffle -chrom -excl ../gaps_hg19.bed -i common_early_origins_ENCODE.bed -g hg19.genome > temp;  bedtools intersect -wo -a temp -b NT2_dripc_sicer.bed | awk '{print $10}' | awk '{sum+=$1} END {print sum}' >> testfile ; rm temp

for i in {0..50000} ; do bedtools shuffle -chrom -excl ../gaps_hg19.bed -i common_early_origins_ENCODE.bed -g hg19.genome > temp_1_$i ; bedtools intersect -wo -a temp_1_$i -b NT2_dripc_sicer.bed ; done

aparna@zeus:/data/aparna/replication_origins/s50/stats$ time for i in {0..1000} ; do bedtools shuffle -chrom -excl ../gaps_hg19.bed -i common_early_origins_ENCODE.bed -g hg19.genome > temp ; bedtools intersect -wo -a temp -b NT2_dripc_sicer.bed | awk '{print $10}' | awk '{sum+=$1} END {print sum}' >> testfile ; rm temp ; done  

real  1m25.156s
user  1m9.016s
sys 0m11.441s

1000 repeats is fast. Now need to find out how many simulations will be required

printing out absolute bp overlaps, find percent in R which is better at handling lists

3.6.14

Printing out total bp count for files

aparna@zeus:/data/aparna/replication_origins/s50$ for f in origin_files/ENCODE/* ; do echo $f ; awk '{print $3 - $2}' $f | awk '{sum+=$1} END {print sum}'; done
origin_files/ENCODE/BG02ES_early_origins_all.txt
720610379
origin_files/ENCODE/BG02ES_late_origins_all.txt
456967260
origin_files/ENCODE/GM12878_early_origins_all.txt
786232962
origin_files/ENCODE/GM12878_late_origins_all.txt
609288673
origin_files/ENCODE/HeLa_ENCODE_early_origins_all.txt
771978719
origin_files/ENCODE/HeLa_ENCODE_late_origins_all.txt
558570901
origin_files/ENCODE/K562_early_origins_all.txt
697862749
origin_files/ENCODE/K562_late_origins_all.txt
586542087

aparna@zeus:/data/aparna/replication_origins/s50$ awk '{print $3-$2}' genes_hg19_refseq.bed | awk '{sum+=$1} END {print sum}'
2.76847e+09

Using 10k for simulation for now
aparna@zeus:/data/aparna/replication_origins/s50/stats$ time for i in {0..10000} ; do bedtools shuffle -chrom -excl ../gaps_hg19.bed -i common_early_origins_ENCODE.bed -g hg19.genome > temp ; bedtools intersect -wo -a temp -b NT2_dripc_sicer.bed | awk '{print $10}' | awk '{sum+=$1} END {print sum}' >> simulation_random_10k_earlyoriginsENCODE_DRIPc.txt ; rm temp ; done

real  14m11.365s
user  11m10.070s
sys 2m10.792s

it's significant!

running with late

aparna@zeus:/data/aparna/replication_origins/s50/stats$ cp ../origin_files/common_origins/common_late_origins_ENCODE.bed .
aparna@zeus:/data/aparna/replication_origins/s50/stats$ time for i in {0..10000} ; do bedtools shuffle -chrom -excl ../gaps_hg19.bed -i common_late_origins_ENCODE.bed -g hg19.genome > temp ; bedtools intersect -wo -a temp -b NT2_dripc_sicer.bed | awk '{print $10}' | awk '{sum+=$1} END {print sum}' >> simulation_random_10k_lateoriginsENCODE_DRIPc.txt ; rm temp ; done

real    13m42.170s
user    10m46.332s
sys     2m3.608s

difference is also significant

Running early origins common for CpG islands
aparna@zeus:/data/aparna/replication_origins/s50/stats$ time for i in {0..10000} ; do bedtools shuffle -chrom -excl ../gaps_hg19.bed -i common_early_origins_ENCODE.bed -g hg19.genome > temp ; bedtools intersect -wo -a temp -b ../../../region_metaplots/cpg_islands_all_parsed.bed | awk '{print $7}' | awk '{sum+=$1} END {print sum}' >> simulation_random_10k_earlyoriginsENCODE_CpG.txt ; rm temp ; done 
real  14m45.893s
user  11m49.268s
sys 2m6.932s

CpG early is significant

Running late origins common for CpG islands
parna@zeus:/data/aparna/replication_origins/s50/stats$ time for i in {0..10000} ; do bedtools shuffle -chrom -excl ../gaps_hg19.bed -i common_late_origins_ENCODE.bed -g hg19.genome > temp ; bedtools intersect -wo -a temp -b ../../../region_metaplots/cpg_islands_all_parsed.bed | awk '{print $7}' | awk '{sum+=$1} END {print sum}' >> simulation_random_10k_lateoriginsENCODE_CpG.txt ; rm temp ; done

real  14m1.959s
user  11m7.282s
sys 2m0.368s

cpg late is significant
cpg differences is also significant

These are uncorrected

3.7.14

RNAseq data : mapping to peaks? but need to take avg over each peak.

Bedtools intersect no options peakfile and RNAseq data

RNAseq data is in /data/aparna/replication_origins/s50/RNAseq/
NT2_rep1.bed
NT2_rep2.bed
headers removed. file format is
chr start end count

hg19_gene_merged.bed : gene body list
 
> wilcox.test(1,2,paired=TRUE
then bon... correction over the array of p values

3.10.14


aparna@zeus:/data/aparna/replication_origins/s50/RNAseq$ bedtools intersect -a NT2_rep1.bed -b common_early_origins_ENCODE.bed | less
 works but changing -b to -a and -a to -b doesn't 
  keeps count column

do this then there will never be a partial overlap case -> script if cascade gets simpler.

nvm found error one of the ifs had $start - $end

fixed mapping script, ran, outfile is RNAseq_peak_avg_output.bed

aparna@zeus:/data/aparna/replication_origins/s50/RNAseq$ mv RNAseq_peak_avg_output.bed RNAseq_early_avg_output.bed 

aparna@zeus:~/DATA/replication_origins/s50$ for f in origin_files/common_origins/* ; do echo $f ; bedtools intersect -wo -a $f -b ../../clean_genelist_hg19.bed | awk '{print $7}' | awk '{sum+=$1} END {print sum}' ; done
origin_files/common_origins/common_early_origins_ENCODE.bed
141692748
origin_files/common_origins/common_late_origins_ENCODE.bed
18308360

> 141692748/18308360
[1] 7.739238

time for i in {0..10000} ; do bedtools shuffle -chrom -excl ../gaps_hg19.bed -i common_early_origins_ENCODE.bed -g hg19.genome > temp ; bedtools intersect -wo -a temp -b ../../../clean_genelist_hg19.bed | awk '{print $7}' | awk '{sum+=$1} END {print sum}' >> simulation_random_10k_earlyoriginsENCODE_genes.txt ; rm temp ; done
real  10m54.320s
user  8m32.336s
sys 1m38.834s

clean_genelist_hg19 is hg19_gene_merged.bed but with only first 3 cols
aparna@zeus:~/DATA$ awk '{print $3-$2}' clean_genelist_hg19.bed | awk '{sum+=$1} END {print sum}'
1167671234

early_genes / genes * 100
> 141692748/1167671234*100
[1] 12.13464
late_genes / genes * 100
> 18308360/1167671234*100
[1] 1.567938


Done mapping RNAseq
aparna@zeus:/data/aparna/replication_origins/s50/RNAseq$ l
common_early_origins_ENCODE.bed    RNAseq_NT2rep1_early_avg_output.bed
intersection_repl1_early.bedgraph  RNAseq_NT2rep1_late_avg_output.bed
map_avg_RNAseq_origins.pl*         RNAseq_NT2rep2_early_avg_output.bed
NT2_rep1.bed                       RNAseq_NT2rep2_late_avg_output.bed
NT2_rep2.bed

aparna@zeus:~/DATA/replication_origins/s50/stats$ time for i in {0..10000} ; do bedtools shuffle -chrom -excl ../gaps_hg19.bed -i common_late_origins_ENCODE.bed -g hg19.genome > temp ; bedtools intersect -wo -a temp -b ../../../clean_genelist_hg19.bed | awk '{print $7}' | awk '{sum+=$1} END {print sum}' >> simulation_random_10k_lateoriginsENCODE_genes.txt ; rm temp ; done

running random sim late origins genes

need to merge/avg scores of rep1/rep2 (use bedtools merge)

do statistical test to show early/late RNAseq are different

genes are prob barely significant find out after random sim is done

headers added to RNAseq avg files

> earlydata<-early$V1/1167671234
> earlydata<-early$V1/1167671234*100   
> latedata<-late$V1/1167671234*100
> summary(earlydata)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  7.439   8.397   8.601   8.603   8.807   9.765 
> summary(latedata)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  2.366   2.915   3.050   3.053   3.192   3.814 
> early$V1/late$V1
> summary(diff)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  2.142   2.678   2.818   2.831   2.970   3.773 
> 
genes is signficant

made merged files 

merged_RNAseq_early_avg_output.bed
merged_RNAseq_late_avg_output.bed

3.11.14

find avg for early RNAseq and late RNAseq

aparna@zeus:/data/aparna/replication_origins/s50/RNAseq$ awk '{print $4}' merged_RNAseq_early_avg_output.bed | awk '{sum+=$1} END {print sum/NR}'
2.65333

aparna@zeus:/data/aparna/replication_origins/s50/RNAseq$ awk '{print $4}' merged_RNAseq_late_avg_output.bed | awk '{sum+=$1} END {print sum/NR}'
0.016053


3.13.14

Need to do more simulations to calculate significance

aparna@zeus:~/DATA/replication_origins/s50/stats$ time for i in {0..1000000} ; do bedtools shuffle -chrom -excl ../gaps_hg19.bed -i common_early_origins_ENCODE.bed -g hg19.genome > temp ; bedtools intersect -wo -a temp -b NT2_dripc_sicer.bed | awk '{print $10}' | awk '{sum+=$1} END {print sum}' >> simulation_random_1mil_earlyoriginsENCODE_DRIPc.txt ; rm temp ; done


running six simulations simultaneously. 1000000 * {early, late}{DRIPc, CpG, genes}

will take at max probably 25 hrs
start at 3:40 pm

smallest p-value possible will be 10^-6

running 1 mil sims threaded outfile is in /data/aparna/replication_origins/s50/stats/another_run/TEST
^outfile with overlaps only

need to run over other 5 datasets after this finishes.

3.31.14

dripc early and late 1mil simulations done. running cpg early simulation 1mil. output is num overlaps only.

DRIPc early is significant to p < 1E-6
simulation:
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  7.017   8.612   8.913   8.915   9.213  10.740 

DRIPc late is significant to p < 1E-6
simulation:
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.875   2.693   2.872   2.876   3.053   4.042

RNAseq :

> early_RNAseq<-read.delim("merged_RNAseq_early_avg_output.bed", header=F)
> late_RNAseq<-read.delim("merged_RNAseq_late_avg_output.bed", header=F)
> early_RNAseq<-early_RNAseq$V4
> late_RNAseq<-late_RNAseq$V4
> summary(early_RNAseq)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
 0.0000  0.9834  1.7320  2.6570  3.3500 29.7100       1 
> summary(late_RNAseq)
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max.     NA's 
0.000000 0.003314 0.007328 0.016110 0.011900 0.359300        1 

> (mean(early_RNAseq)-mean(late_RNAseq))/sqrt(var(early_RNAseq)/(length(early_RNAseq)-1) + var(late_RNAseq)/(length(late_RNAseq)-1))
[1] 24.33294
> df<-(length(early_RNAseq)+length(late_RNAseq)-2)
> df
[1] 1012

p < 1E-5 there is a significant difference

running cpg late, cpg early is done

4.7.14

PacBio :

take raw reads from aparna@zeus:/media/drobo/wearn/Riley_pacbio/Raw$ , use fasta files, make index and remap using default bismark parameters. use the reference file pFC53.fa, find complement and delete wrong region from the reference.

script for region calling is complete and works.

made dir pacbio and copied over pFC53.fa. 

aparna@zeus:/media/drobo/zeus_backup/aparna/pacbio$ samtools faidx pFC53/pFC53.fa
  made index file

need to re-debarcode?
need to re-align reads to reference
>produce bam file

4.8.14

command to find regions : 
aparna@zeus:/media/drobo/zeus_backup/aparna/pacbio/region_calling$ for f in ../run_mapping/relaxed_params_samfiles_pacbio/* ; do ./converted_regions_pacbio.pl $f -r 100 50 -0.1 ; done ; mv ../run_mapping/relaxed_params_samfiles_pacbio/*_OUT* outfiles/ ; wc -l outfiles/*

>  586/ 2247
[1] 0.2607922 # percent reads with at least one "significant" region 

aparna@zeus:/media/drobo/zeus_backup/aparna/pacbio/region_calling$ for f in ../run_mapping/minscore_-0.4_samfiles_pacbio/* ; do ./converted_regions_pacbio.pl $f -r 100 50 -0.1 ; done ; mv ../run_mapping/minscore_-0.4_samfiles_pacbio/*_OUT* outfiles/ ; wc -l outfiles/*

> 81 / 714
[1] 0.1134454 # with more stringent mapping -0.4 minscore

default paramters yield no sig regions with :
aparna@zeus:/media/drobo/zeus_backup/aparna/pacbio$ for f in ../run_mapping/default_parameters_samfiles_pacbio/* ; do ./converted_regions_pacbio.pl $f -r 100 50 -0.1 ; done ; mv ../run_mapping/default_parameters_samfiles_pacbio/*_OUT* outfiles/ ; wc -l outfiles/*

removed the weird region 936-1045 from genome

have script to convert but do not use yet

running mapping w/ relaxed param on just region removed genome yields fewer reads than on not-region-removed

#region not removed
aparna@zeus:/data/aparna/pacbio/run_mapping$ wc -l unchanged_pFC53/relaxed_params_samfiles_pacbio/*
     376 unchanged_pFC53/relaxed_params_samfiles_pacbio/bc_1.fa_bt2_bismark.sam
      83 unchanged_pFC53/relaxed_params_samfiles_pacbio/bc_2.fa_bt2_bismark.sam
     245 unchanged_pFC53/relaxed_params_samfiles_pacbio/bc_3.fa_bt2_bismark.sam
     650 unchanged_pFC53/relaxed_params_samfiles_pacbio/bc_4.fa_bt2_bismark.sam
     424 unchanged_pFC53/relaxed_params_samfiles_pacbio/bc_5.fa_bt2_bismark.sam
     469 unchanged_pFC53/relaxed_params_samfiles_pacbio/bc_6.fa_bt2_bismark.sam
    2247 total
# region removed messed up and deleted everything after 965 or whatever
aparna@zeus:/data/aparna/pacbio/run_mapping$ wc -l samfiles_pacbio/*
     316 samfiles_pacbio/bc_1.fa_bt2_bismark.sam
      71 samfiles_pacbio/bc_2.fa_bt2_bismark.sam
     190 samfiles_pacbio/bc_3.fa_bt2_bismark.sam
     551 samfiles_pacbio/bc_4.fa_bt2_bismark.sam
     365 samfiles_pacbio/bc_5.fa_bt2_bismark.sam
     383 samfiles_pacbio/bc_6.fa_bt2_bismark.sam
    1876 total

# region removed for real
aparna@zeus:/data/aparna/pacbio/run_mapping$ wc -l samfiles_pacbio/*
    236 samfiles_pacbio/bc_1.fa_bt2_bismark.sam
     61 samfiles_pacbio/bc_2.fa_bt2_bismark.sam
    181 samfiles_pacbio/bc_3.fa_bt2_bismark.sam
    440 samfiles_pacbio/bc_4.fa_bt2_bismark.sam
    286 samfiles_pacbio/bc_5.fa_bt2_bismark.sam
    319 samfiles_pacbio/bc_6.fa_bt2_bismark.sam
   1523 total

> 165 / 1523
[1] 0.1083388

Using original not-region-deleted not-inverted pFC53.fa file

Take one good read (with sig regions) from a exp and one from a control (as well as 2 reads that don't map well?) and try different alignment stringencies counting actual converted Cs, not avg number of reads with a converted region.
  -> count lowercase and return from string from bismark

b
  only runs 4 and 6 have reads with >1000 bp "significant" region (4 has 1, 6 has 2)

  
Stochhmm
  max DRIPC_chr19_both seems to be 141 but avg is ~3. (note the peaks are v sharp and with long spaces between) Look at peaks and manually define values for each class
 
aparna@zeus:/data/aparna/
wrote script shift_wig.pl
aparna@zeus:/data/aparna/GA/final_peak_calls/R$ ./shift_wig.pl ../DRIP/DRIP
1/NT2_drip1_treat_afterfiting_all.wig 2.25

aparna@zeus:/data/aparna/GA/final_peak_calls/R$ mv shift.out DRIP1_shifted_2.25.wig

aparna@zeus:/data/aparna/GA/final_peak_calls/R$ mv DRIP1_shifted_2.25.wig ../DRIP/DRIP1/

aparna@zeus:/data/aparna/GA/final_peak_calls/DRIP/DRIP1$ ./wig2fa.pl -i DRIP1_shifted_2.25.wig 

aparna@zeus:/data/aparna/GA/final_peak_calls/R$ cp shift_wig.pl ../../../scripts/

wrote script shift_wig.pl
aparna@zeus:/data/aparna/GA/final_peak_calls/R$ ./shift_wig.pl ../DRIP/DRIP
1/NT2_drip1_treat_afterfiting_all.wig 2.25

aparna@zeus:/data/aparna/GA/final_peak_calls/R$ mv shift.out DRIP1_shifted_2.25.wig

aparna@zeus:/data/aparna/GA/final_peak_calls/R$ mv DRIP1_shifted_2.25.wig ../DRIP/DRIP1/

aparna@zeus:/data/aparna/GA/final_peak_calls/DRIP/DRIP1$ ./wig2fa.pl -i DRIP1_shifted_2.25.wig 

aparna@zeus:/data/aparna/GA/final_peak_calls/R$ cp shift_wig.pl ../../../scripts/
stochhmm$ vim wig2fa.pl 

wrote script shift_wig.pl
aparna@zeus:/data/aparna/GA/final_peak_calls/R$ ./shift_wig.pl ../DRIP/DRIP
1/NT2_drip1_treat_afterfiting_all.wig 2.25

aparna@zeus:/data/aparna/GA/final_peak_calls/R$ mv shift.out DRIP1_shifted_2.25.wig

aparna@zeus:/data/aparna/GA/final_peak_calls/R$ mv DRIP1_shifted_2.25.wig ../DRIP/DRIP1/

aparna@zeus:/data/aparna/GA/final_peak_calls/DRIP/DRIP1$ ./wig2fa.pl -i DRIP1_shifted_2.25.wig 

aparna@zeus:/data/aparna/GA/final_peak_calls/R$ cp shift_wig.pl ../../../scripts/
# edited values
aparna@zeus:/data/aparna/stochhmm$ cp ../region_metaplots/DRIPc_wig/chr19_NT2_dripc_plus_all.wig .
b
#running on plus dripc only first to test. Modified wig2fa.pl to take in filenames without mitochy library and not last; when $chr != 1 initially 

chr19:18,942,002-18,994,562 #peak region 52,561 bp
chr19:19,048,662-19,159,257 #nopeak region 110,596 bp

need to insert tabs into peak.bed nopeak.bed using nano, doesn't work in vim and fastaFromBed complains
also remove commas

aparna@zeus:/data/aparna/stochhmm$ fastaFromBed -fi chr19_NT2_dripc_plus_all.wig.customfa -bed peak.bed -fo peak.fa

copied over HMM_Counter.pl to stochmm dir and removed mitochy lib dependancy

aparna@zeus:~/DATA/stochhmm$ ./HMM_Counter.pl -i peak.fa -r 3 -w L,M,H,N -o peak.count

aparna@zeus:~/DATA/stochhmm$ ./HMM_Counter.pl -i nopeak.fa -r 3 -w L,M,H,N -o nopeak.count

#example
bin/RunGC-Skew_short.pl -s <DRIP.fa> -m model.hmm -t 0.9 -l 100 -o DRIP

aparna@zeus:/data/aparna/stochhmm$ cat peak.count >> DRIPc_peaks_plus_chr19.hmm 
aparna@zeus:/data/aparna/stochhmm$ cat nopeak.count >> DRIPc_peaks_plus_chr19.hmm 

aparna@zeus:/data/aparna/stochhmm$ stochhmm -seq chr19_NT2_dripc_plus_all.wig.customfa -model DRIPc_peaks_plus_chr19.hmm -posterior -threshold 0.9 -gff > output_gff.txt

4.14.14

aparna@zeus:/data/aparna/stochhmm$ bedtools intersect -wo -a output.bed -b ../DRIP_DRIPc/peakfiles/NT2_dripc_plus.bed | awk '{print $8}' | awk '{sum+=$1} END {print sum}'

aparna@zeus:/data/aparna/stochhmm$ awk '{print $3 - $2}' output.bed | awk '{sum+=$1} END {print sum}'

peak.bed
chr19   18942002        18994562
nopeak.bed
chr19   19048662        19159257
> 1567241/1683898
[1] 0.9307221

nopeak and medpeak called EVERYTHING. Lowpeak called nothing. Only highpeak did not fail.

medpeak.bed
chr19 16179592  16253378

makes it call almost exactly the same as peak from peak/nopeak. How to make it choose only the medium-sized peaks, not high or low?

highpeak.bed
chr19 54477846  54498633
chr19 36066191  36067197
chr19 49986326  50007495
chr19 10212013  10231930

highpeak had good results

peak.bed (from peak/nopeak)
chr19 18942002  18994562

also has good results

4.15.14

Do proper write-up of Replication Origins stuff

Work on stochhmm with DRIP peak calling

intention is to improve DRIP peak calling -> use HeLa DRIP data correlate with replication origins 

ignoring all DRIPc peak calling with stochhmm now, go with just DRIP.
Don't need to classify DRIP peaks, just need to have better peak calling on DRIP.

data in /data/aparna/DRIP_DRIPc/DRIP_data is ONLY in bed files, need the wig./replicat

downloaded DRIP wig which is in /data/aparna/DRIP_wigs

this is seperated by chr
.bed files are still wigs
there is a large header in each file
downloaded from table browser custom tracks NT2 DRIP2 Lionel
  filter : 10,000,000 lines and >= 3 score!!! (Same for HeLa DRIP data)

getting HeLa DRIP data also

can practice on the NT2 data and then use same/similar model on HeLa

Using chr8 as the test chr since 19 is weird

4.16.14

aparna@zeus:/data/aparna/DRIP_wigs$ cp DRIP_HeLa/chr8_helaDRIP.wig ../stoch
hmm/DRIP/
aparna@zeus:/data/aparna/stochhmm/DRIP$ nano peak.bed
aparna@zeus:/data/aparna/stochhmm/DRIP$ nano nopeak.bed
aparna@zeus:/data/aparna/stochhmm/DRIP$ ./wig2fa.pl -i chr8_helaDRIP.wig 
aparna@zeus:/data/aparna/stochhmm/DRIP$ mv DRIPc_peaks_plus_chr19.hmm DRIP_HeLa_peaks_chr8.hmm
aparna@zeus:/data/aparna/stochhmm/DRIP$ vim DRIP_HeLa_peaks_chr8.hmm

aparna@zeus:/data/aparna/stochhmm/DRIP$ fastaFromBed -fi chr8_helaDRIP.wig.customfa -bed peak.bed -fo peak.fa
index file chr8_helaDRIP.wig.customfa.fai not found, generating...
aparna@zeus:/data/aparna/stochhmm/DRIP$ fastaFromBed -fi chr8_helaDRIP.wig.customfa -bed nopeak.bed -fo nopeak.fa
aparna@zeus:/data/aparna/stochhmm/DRIP$ ./HMM_Counter.pl -i peak.fa -r 3 -w L,M,H,N,S -o peak.count
aparna@zeus:/data/aparna/stochhmm/DRIP$ ./HMM_Counter.pl -i nopeak.fa -r 3 -w L,M,H,N,S -o nopeak.count
aparna@zeus:/data/aparna/stochhmm/DRIP$ cat peak.count >> DRIP_HeLa_peaks_chr8.hmm 
aparna@zeus:/data/aparna/stochhmm/DRIP$ vim DRIP_HeLa_peaks_chr8.hmm 
aparna@zeus:/data/aparna/stochhmm/DRIP$ cat nopeak.count >> DRIP_HeLa_peaks_chr8.hmm 
aparna@zeus:/data/aparna/stochhmm/DRIP$ vim DRIP_HeLa_peaks_chr8.hmm 
aparna@zeus:/data/aparna/stochhmm/DRIP$ stochhmm -seq chr8_helaDRIP.wig.customfa -model DRIP_HeLa_peaks_chr8.hmm -posterior -threshold 0.9 -gff > output_gff.txt

no changing of transition probabilities makes the least difference on the peak length. Will need to change the .bed files. However, stochmm is calling peaks better than SICER. if it had less skinny peaks that would be good. 

4.17.14

Ran DRIPc simulation stats calculation (percent difference) in R just to complete :

> dripc_early<-read.delim("1mil_simulation_dripc_early.txt", header=F)
> dripc_late<-read.delim("1mil_simulation_dripc_late.txt", header=F)
> diff<-dripc_early$V1[0:1000000]/dripc_late
> summary(diff)
       V1       
 Min.   :1.989  
 1st Qu.:2.893  
 Median :3.104  
 Mean   :3.127  
 3rd Qu.:3.335  
 Max.   :5.372  

4.18.14

Running run.pl over CpG early for to complete 1mil simulation.
Need to do the same for genes early and late.

Intersected drip2_peaks.bed with common early origins

aparna@zeus:/data/aparna/replication_origins/s50$ bedtools intersect -wo -a origin_files/common_origins/common_early_origins_ENCODE.bed -b ../../DRIP_DRIPc/peakfiles/drip2_peaks.bed | awk '{print $9}' | awk '{sum +=$1} END {print sum}'
23115410

Intersecting with late :

aparna@zeus:/data/aparna/replication_origins/s50$ bedtools intersect -wo -a origin_files/common_origins/common_late_origins_ENCODE.bed -b ../../DRIP_DRIPc/peakfiles/drip2_peaks.bed | awk '{print $9}' | awk '{sum +=$1} END {print sum}'
25293

Need to run a simulation over drip2 also

Total DRIP2 bp 
aparna@zeus:/data/aparna/replication_origins/s50$ awk '{print $3-$2}' ../../DRIP_DRIPc/peakfiles/drip2_peaks.bed | awk '{sum+=$1} END {print sum}'
93416335
drip2_early/drip2*100
> 23115410/93416335*100
drip2_late/drip2*100
[1] 24.74451
> 25293/93416335*100
[1] 0.02707556
drip2 early/late
> 23115410/25293
[1] 913.9054
# prob due to fewer small peaks being called in DRIP vs DRIPc
# still need to run simulation

# there are more DRIPc peaks than DRIP ... seems okay ... (dripc_peaks/drip2_peaks)
> 253703386/93416335
[1] 2.715835

Working with stochhmm peaks NT2 :
aparna@zeus:/data/aparna/stochhmm/DRIP/nt2$ vim DRIP_NT2_peaks_chr8.hmm 

genetic algorithm : /media/drobo/mitochi/HMM/GA_StochHMM

4.25.14

Working on evaluate script
output from faster
,123707,25440085,250705,183850
real  0m22.421s
user  0m22.229s
sys 0m0.084s

stored only blocks >thresh (20) in the wig file cache
made a HUGE difference.

can't test actual output.

$self->{DIST}->{P}->{COUNTS}->{$orders}
aparna@zeus:/data/aparna/GA$ ./G_A_random.pl chr8.wig.customfa DRIP_NT2_peaks_chr8.hmm out 5 5 0.9 5

4.28.14

Testing stochhmm DRIP to see if it is producing too many peaks with current model
aparna@zeus:/data/aparna/stochhmm/DRIP/nt2$ stochhmm -model DRIP_NT2_peaks_chr8.hmm -seq chr8.wig.customfa -posterior -threshold 0.9 -gff > testout.txt

going to run this command after :

aparna@zeus:/data/aparna/GA$ screen -S ga_chr8_DRIP ./G_A_random.pl chr8.wig.customfa DRIP_NT2_peaks_chr8.hmm out 5 5 0.9 5

after copying over fasta, model. evaluate was taking a long time and there were a LOT of entries in each .report file.

looks fine, copying over just in case.

aparna@zeus:/data/aparna/stochhmm/DRIP/nt2$ cp DRIP_NT2_peaks_chr8.hmm chr8
.wig.customfa ../../../GA/

Running

== DEBGUG NOTES ==

aparna@zeus:/data/aparna/GA$ screen -S ga_chr8_DRIP ./G_A_random.pl chr8.wig.customfa DRIP_NT2_peaks_chr8.hmm out 5 5 0.9 5

with modified faster_eval file to print out each time it is run.

start 1:17

last test, stochhmm runs took ~6mins and perl (evaluate) >6 mins (then zeus got slow so I killed it)

Evaluate may need to be further modified we'll see after the first run what happens. 
  It may be too permissive letting too many peaks get through when they should be thrown out
  Need to somehow take into account the score/height of each peak, currently does not select for higher peaks
  Model's transition probabilities may need to be modified, though the test initial run of stochhmm looked pretty good.

1:24 done with stochhmm round 1, models are being evaluated

(7 mins stochmm run 5 gens pop size 5 threads 5)

  need to remove all the now-extraneous print statements in G_A.pm (for debug) fixed those errors.

  evaluate isn't printing anything out ...

  IT ISN'T PRINTING TO STDRR IT IS PRINTING TO GA 

  remove that line!
  
  removed, going to let it run anyway ...
  will probably die right after running all evaluate scripts ...
  at 1:35 all perl processes got D in top ...
  
  killed at 1:39 

  trying again at 1:42 -- killed

  stochhmm is printing out each bp on its own line!
    transition probabilities were wrong. 

  now nothing is being printed in report 
  only 4 peaks printed in report???

  faster_eval_peaks is freaking because blank lines at bottom
  directly put transition prob. in print_out thing and it gave ~7k peaks -- good!

  making faster_eval_peaks.pl skip line if $line == ""
  changed that to $line eq ""

  faster* died ... cache not defined? Explicitly set to /data/aparna/GA/cache

  woohoo evaluate didn't die immediately!
  ~7k peaks in each report, each run of faster_* uses 100% CPU and 0.0% mem  and uninitialized val ... crash
    only crashes with GA stochhmm output is fed to it

(last lines)
output ga stoch
chr8  StochHMM  Peak  146171592 146173554 . + .
output stoch
chr8  StochHMM  Peak  146021382 146021454 . + .

maybe index is too big

aparna@zeus:/data/aparna/GA$ faster_eval_peaks.pl out/0.report 0.9
!exists 100774

debugged faster* in /data/aparna/scripts
copied over to GA folder

running GAstochhmm again

start 2:30
done with stochhmm at 2:32 (!!!)
perl start at 2:32 
100% CPU 0.0% MEM
aparna@zeus:/data/aparna/GA$ faster_eval_peaks.pl out/0.report 0.9
!exists 100774

it passed round 0 at 2:33!!! It runs!

On round 1
done with stochhmm at 2:35
7715 peaks (same # of peaks ... good or bad?)
done at 2:36

max pop/individual not increasing at all (or changing) ...

Round 0 result: Max Pop: 0.482981485742857      Max Individual: 0.482981485742857
Round 1 result: Max Pop: 0.482981485742857      Max Individual: 0.482981485742857
Round 2 result: Max Pop: 0.482981485742857      Max Individual: 0.482981485742857
Round 3 result: Max Pop: 0.482981485742857      Max Individual: 0.482981485742857
Round 4 result: Max Pop: 0.482981485742857      Max Individual: 0.482981485742857
Round 5 result: Max Pop: 0.482981485742857      Max Individual: 0.482981485742857

but #tp is changing a little -- so they should not all be the same
also diffed and they are different.
fine because pop size is 5
DEBUGGING (presumably) done!

====
aparna@zeus:/data/aparna/GA/out$ screen -S ga_chr8_DRIP ./G_A_random.pl chr8.wig.customfa DRIP_NT2_peaks_chr8.hmm out 50 50 0.9 12

0.hmm is the highest scoring one
running with larger population, generations since 5 5 5 test worked (!)

aparna@zeus:/data/aparna/GA$ screen -S ga_chr8_DRIP ./G_A_random.pl chr8.wig.customfa DRIP_NT2_peaks_chr8.hmm out 50 50 0.9 12
2:53

3:05 done with round 0 stochhmm
3:14 done with perl (evaluation)
Round 0 result: Max Pop: 0.482981466403545      Max Individual: 0.482981485742857
Round 6 result: Max Pop: 0.482981485742857      Max Individual: 0.482981485742857
possibly will need to increase mutation ... there is not much variation in the tp etc scores.

in total each generation takes ~28 mins

25 hrs! 

SAVE current scripts G_A.pm G_A_random.pl faster_eval_peaks.pl make_cache.pl and all inputs before changing anything!

4.29.14

Finished before 10:26 AM. Takes less than 25 hrs!

optimal file and original model output is nearly exactly the same. Optimal shifts some peaks by 1 bp here and there, exactly same genome browser appearence.

Need much larger mutation rate / change. Or initial input model is nearly optimal for current evaluate test.

running same GA command above but changed mutation rates to 0.2 an 0.4

after changing mutation rates stochhmm segfaults. Only when using 50 50 12 not 5 5 5 for some reason. Testing with original values does not cause segfault.

Probably over-mutating em and giving invalid em.
$MUTATION_RATE=0.2;  
$MAX_MUTATION_CHANGE=0.4;
Above segfaults

trying
$MUTATION_RATE=0.2;  
$MAX_MUTATION_CHANGE=0.2;
# segfault

trying
$MUTATION_RATE=0.02;  
$MAX_MUTATION_CHANGE=0.2;
# no segfault

trying
$MUTATION_RATE=0.1;  
$MAX_MUTATION_CHANGE=0.2;
# no segfault

trying
$MUTATION_RATE=0.1;  
$MAX_MUTATION_CHANGE=0.4;
# no segfault
# going to let this run and test out how this mutation rate affects result. 
10% mutation rate 40% allowed to change at max
10% of models get mutated or 10% of emissions get mutated? Each emmission.



Round 3 result: Max Pop: 0.485093386781667      Max Individual: 0.485093450828899

fixed segfault issue hopefully by implementing a ceiling-like function on mutate random values (sometimes would go to zero, just made everything ceiling so min emission is 1 always).

Running again with 0.2 0.4 which should not segfault now.
running with time
  start at 2:11 PM

aparna@zeus:/data/aparna/GA$ time ./G_A_random.pl chr8.wig.customfa DRIP_NT2_peaks_chr8.hmm out 50 50 0.9 12

Round 0 result: Max Pop: 0.483393062131425      Max Individual: 0.485093363928102
Round 1 result: Max Pop: 0.485017952541389      Max Individual: 0.485093363928102


Round 10 result:        Max Pop: 0.485093392255073      Max Individual: 0.485093392255072

Round 23 result:        Max Pop: 0.493089089575885      Max Individual: 0.493089089575885

Definitely evolving

got round 11 stochhmm segfault! But let it run and no problems arose ... it moved on to round 12 ...

check hmm file 31
hmmm no emissions == 0 ... but tp is severely reduced. it's in segfault_out. Letting GA continue to run (with ceiling bascially on mutate $value). Next run, try the not-ceiling only check if < 1 in G_A.pm (already modified).

6:55 PM on round 12.

11:32 round 24

4.30.14

~16hrs to run
stochhmm segfaulted as in above notes
final peaks ~9k
zoom out they look exactly the same ...
zoom in it appears some peaks have been broken up more.

Increase transition probabilities
also try with modified not ceiling

aparna@zeus:/data/aparna/GA$ stochhmm -model DRIP_NT2_peaks_chr8.hmm -seq c
hr8.wig.customfa -posterior -threshold 0.9 -gff > tr_p_mod_dripnt2_stochmm.txt

probably should also increase mutation rate

aparna@zeus:/data/aparna/stochhmm_GA_prep$ stochhmm -model DRIP_NT2_peaks_chr8.hmm -seq chr8.wig.customfa -posterior -threshold 0.9 -gff > tr_p_mod_dripnt2_stochhmm.txt

further decreased nopeak transition prob
peak transition prob is v large

stochhmm -model DRIP_NT2_peaks_chr8.hmm -seq chr8.wig.customfa -posterior -threshold 0.9 -gff > testout.txt

change to EMISSION: SCORE: COUNTS in hmms otherwise segfault
parna@zeus:/data/aparna/stochhmm_GA_prep$ ./get_wig_lines.pl chr8.wig 20000000 100000000
aparna@zeus:/data/aparna/stochhmm_GA_prep$ less chr8.wig.out
parna@zeus:/data/aparna/stochhmm_GA_prep$ stochhmm -model DRIP_NT2_peaks_chr8.hmm -seq chr8.wig.out.customfa -posterior -threshold 0.9 -gff > testout.txt

added state NOPEAK_GENOMIC. states are now
PEAK           P
NOPEAK_BETWEEN B
NOPEAK_GENOMIC G

peaks are smaller but seem much cleaner
going with this model as a base
aparna@zeus:/data/aparna/stochhmm_GA_prep$ vim DRIP_NT2_peaks_chr8.hmm 
aparna@zeus:/data/aparna/stochhmm_GA_prep$ mv DRIP_NT2_peaks_chr8.hmm DRIP_NT2_3states_peaks_chr8.txt
aparna@zeus:/data/aparna/stochhmm_GA_prep$ cp DRIP_NT2_3states_peaks_chr8.txt ../GA/

now need to modify G_A.pm

modified, debugged, running
3:30
aparna@zeus:/data/aparna/GA$ time ./G_A_random.pl chr8.wig.customfa DRIP_NT2_3states_peaks_chr8.txt out/ 50 50 0.9 12

$MUTATION_RATE=0.4;  #How often do mutations occur # NOTE define
$MAX_MUTATION_CHANGE=0.6;

5.1.4
Round 35 0.report is worse than initial, it resembles SICER output.
  High mutation (.4,.6)
  need lower mutation (.2, .4) 
  Evaluate script is probably not optimal
  Very slow since 8 threads
    Test on .5 of chr8
  best peaks are test 4 stochhmm single run
  -> initial input model for current GA run
  
Need to select for longer peaks or merge peaks
3 state model is the best

f hit 1 for current hypermutated run, use these mutation values.
Peaks look very short, but are v likely to all be peaks.
use 0.report from this super stringent run as a false neg counter.
Modify evaluate : using faster_better_eval_peaks.pl
also use smaller test set

done writing new eval script
fn_caller_0.report needed to call fn

small region to test on :
chr8:15,345,469-39,792,388

15345469  39792388 
aparna@zeus:/data/aparna/stochhmm_GA_prep/small_wigs$ get_wig_lines.pl ../chr8.wig 15345469 39792388
aparna@zeus:/data/aparna/stochhmm_GA_prep$ wc -l chr8.wig.out
619033 chr8.wig.out
aparna@zeus:/data/aparna/stochhmm_GA_prep$ ./wig2fa.pl -i chr8.wig.out -o chr8_smallregion.customfasta
aparna@zeus:/data/aparna/stochhmm_GA_prep$ cp chr8_smallregion.customfasta ../GA/

aparna@zeus:/data/aparna/GA$ time ./G_A_random.pl chr8_smallregion.customfasta DRIP_NT2_3states_peaks_chr8.txt out/ 50 50 0.9 8

running GA stochhmm over this small 24,446,920 bp region of chr8

5.2.14

Done with run in ~5hrs.
real    340m0.798s
user    2238m45.035s
sys     68m48.702s

Round 50 result:        Max Pop: 0.892806946957768      Max Individual: 0.893125464711271

looks slightly better than last run but still not good.

rewrote faster_better again

aparna@zeus:/data/aparna/GA$ mv /data/aparna/scripts/faster_better_eval_peaks.pl 0.1_faster_better_eval_peaks.pl 
aparna@zeus:/data/aparna/GA$ mv faster_better_eval_peaks.pl 0.2_faster_better_eval_peaks.pl 
aparna@zeus:/data/aparna/GA$ cp 0.2_faster_better_eval_peaks.pl /data/aparna/scripts/
aparna@zeus:/data/aparna/GA$ cp 0.2_faster_better_eval_peaks.pl /data/aparna/scripts/faster_better_peaks.pl


aparna@zeus:/data/aparna/GA$ mv out run2_out_stillstringent
aparna@zeus:/data/aparna/GA$ mkdir out
aparna@zeus:/data/aparna/GA$ ./G_A_random.pl chr8_smallregion.customfasta DRIP_NT2_3states_peaks_chr8.txt out/ 50 50 0.9 8

5.4.14

Round 50 result:        Max Pop: 0.846826394941766      Max Individual: 0.852442771088944

very specific not sensitive 

aparna@zeus:/data/aparna$ mv scripts/faster_better_eval_peaks.pl 0.2_eval.pl

./G_A_random.pl chr8_smallregion.customfasta DRIP_NT2_3states_peaks_chr8.txt out/ 50 50 0.9 8
aparna@zeus:/data/aparna/GA$ cp 0.3_faster_eval_peaks.pl 0.4_faster_eval_peaks.pl

modified G_A.pm to have $sen instead of $f in line 424
    $rpt->[1]->{SCORE} = $sen;

aparna@zeus:/data/aparna/GA$ ./G_A_random.pl chr8_smallregion.customfasta DRIP_NT2_3states_peaks_chr8.txt out/ 50 16 0.9 8
aparna@zeus:/data/aparna/GA/out$ wc -l {0..16}.report

aparna@zeus:/data/aparna/GA/peakshapes$ fastaFromBed -fi ../chr8.wig.customfa -bed broad.bed -fo broad.fa
aparna@zeus:/data/aparna/GA/peakshapes$ fastaFromBed -fi ../chr8.wig.customfa -bed small.bed -fo small.fa
aparna@zeus:/data/aparna/GA/peakshapes$ fastaFromBed -fi ../chr8.wig.customfa -bed sharp.bed -fo sharp.fa
aparna@zeus:/data/aparna/GA/peakshapes$ fastaFromBed -fi ../chr8.wig.customfa -bed med.bed -fo med.fa
aparna@zeus:/data/aparna/GA/peakshapes$ ./HMM_Counter.pl -i broad.fa -r 3 -w L,M,H,N -o broad.count
aparna@zeus:/data/aparna/GA/peakshapes$ ./HMM_Counter.pl -i small.fa -r 3 -w L,M,H,N -o small.count
aparna@zeus:/data/aparna/GA/peakshapes$ ./HMM_Counter.pl -i sharp.fa -r 3 -w L,M,H,N -o sharp.count
aparna@zeus:/data/aparna/GA/peakshapes$ ./HMM_Counter.pl -i med.fa -r 3 -w L,M,H,N -o med.count
aparna@zeus:/data/aparna/GA/peakshapes$ cat broad.count >> DRIP_NT2_peakshapes.hmm 
aparna@zeus:/data/aparna/GA/peakshapes$ vim DRIP_NT2_peakshapes.hmm 
aparna@zeus:/data/aparna/GA/peakshapes$ cat small.count >> DRIP_NT2_peakshapes.hmm 
aparna@zeus:/data/aparna/GA/peakshapes$ vim DRIP_NT2_peakshapes.hmm 
aparna@zeus:/data/aparna/GA/peakshapes$ cat sharp.count >> DRIP_NT2_peakshapes.hmm 
aparna@zeus:/data/aparna/GA/peakshapes$ vim DRIP_NT2_peakshapes.hmm 
aparna@zeus:/data/aparna/GA/peakshapes$ cat med.count >> DRIP_NT2_peakshapes.hmm 

need to do a single run of stochhmm to figure out gff/outfile

run25 of current gastochhmm : WAY too many false positives

uncommented 
    my $acc = ($tp + $fn + $tn + $fn) == 0 ? 0 : ($tp + $tn) / ($tp + $fp + $tn + $fn);
    my $f = $acc;
   $rpt->[1]->{SCORE} = $f;
commented
#   my $f = ($pre + $rec) == 0 ? 0 : (2 * $pre * $rec) / ($rec + $pre);

aparna@zeus:/data/aparna/GA$ ./G_A_random.pl chr8_smallregion.customfasta DRIP_NT2_3states_peaks_chr8.txt out/ 50 16 0.9 8

got around it by calling almost nothing

back to original G_A.pm stuff, running
aparna@zeus:/data/aparna/GA$ ./G_A_random.pl chr8_smallregion.customfasta DRIP_NT2_3states_peaks_chr8.txt out/ 25 16 0.9 8

to see if overtraining is happening

single stochhmm run is overcalling stuff but otherwise okay

going to modify G_A.pm to take in this 
aparna@zeus:/data/aparna/GA/peakshapes$ cp DRIP_NT2_peakshapes.hmm DRIP_NT2_peakshapes_nosmall.hmm
b/c small is getting way overcalled

aparna@zeus:/data/aparna/GA/peakshapes$ stochhmm -model DRIP_NT2_peakshapes_nosmall.hmm -seq ../chr8.wig.customfa -posterior -threshold 0.9 -gff > peakshapes.txt

messed up the hmm file, fixed, replaced sharp emissions with new counts, tr prob is 10 bp
aparna@zeus:/data/aparna/GA$ vim 0.4_faster_eval_peaks.pl 

removed all the stuff about stringent peaks, going with thresholded values still

reduced sharp peak transition probability to 1000ish

maybe go for 15 runs

5.6.14

Round 15 result:        Max Pop: 0.415482715362258      Max Individual: 0.421297859409818

changed sharp peak bed to just that one 900bp sharp peak
aparna@zeus:/data/aparna/GA/peakshapes$ stochhmm -model DRIP_NT2_peakshapes_nosmall.hmm -seq ../chr8.wig.customfa -posterior -threshold 0.9 -gff > peakshapes.txt

also added two useful scripts addheader.sh and convert.sh to scripts/

15runs looks a lot like single run DRIP (fragmented, not 4). Which model is being used?

did not catch sharp peak increasing tr to 100
  running

STILL did not catch, increasing to 1000

aparna@zeus:/data/aparna/GA$ cp G_A.pm G_A.pm.save

STILL not calling it (even fixed the 0.009 issue!)

trying with 100 again (with correct tr prob)

changed G_A_5states.pm read-in of emissions to be /\s+/ instead of /\t/, now it runs

need to clean up messy code

going to run 25 gens of 16 pop size 8 threads of new 5state GAstochhmm

running single stochhmm trying to catch that sharp peak with 100 and slightly different range around the peak in the bed file

"" except with 1000

possibly add another emission : S for super high (>70) ?

STILL no Sharp

adding more emmissions 

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ cp ../../chr8.wig .
aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ mv chr8.wig chr8_moreem.wig
aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ ./wig2fa.pl -i chr8_moreem.wig                    

Added several new emission states, now going to do single stochhmm run with new messed up stuff 

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ stochhmm -model DRIP_NT2_peakshapes_nosmall.hmm -seq chr8_moreem.wig.customfa -posterior -threshold 0.9 -gff >> moreemissions_5states.gff

in original model, H is > 25 which is not really high. HOPEFULLY this will not call the entire chromosome


POSSIBLY FOUND ERROR
in Sharp.fa THERE IS NO EMISSION BUT 'N'
  WHY?
but it's on the genome browser (using the bed file)
It's in the chr8 wig file...

chr8  70601979  70602935

70602041        38.7008
70602051        48.622
70602061        58.5433
70602071        68.4646
70602081        78.3858
70602091        88.3071
70602101        98.2283
70602111        106.165
70602121        114.102
70602131        122.039
...
70602431        247.047
70602441        247.047
70602451        247.047
70602461        251.016
70602471        253
70602481        249.031
70602491        239.11
70602501        229.189
70602511        219.268

why is it showing up as N????

but in the original sharp.fa with less emmissions it is not all NNN...

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ ./wig2fa.pl -i chr8_
moreem.wig.out -o testregion.customfa

it works with testregion but not with the normal wig?????
70602471

the value is there ... in the normal wig

wig2fa thinks it's printing, but it's not working somehow.

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ ./wig2fa.pl -i chr8_moreem.wig -o DEBUG.fa

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ fastaFromBed -fi DEBUG.fa -bed sharp.bed -fo sharp.fa 

either its not printing or the index is messed up
>chr8:70601979-70602935
NNNNNNNNNNNNLLLLLLLLLLMMMMMMMMMMMMM # from original file
>chr8:70601979-70602935
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS # from testregion
the index must be off ... either wig2fa or fastaFromBed

  my ($number) = @_;
  return("N") if $number == 0; # none
  return("L") if $number > 0 and $number < 10; # low
  return("O") if $number > 10 and $number < 25; # medium low
  return("M") if $number > 25 and $number < 40; # medium
  return("H") if $number > 40 and $number < 70; # high
  return("S") if $number >= 70; # super high

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ cp ../../../stochhmm_GA_prep/wig2fa.pl .

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ ./wig2fa.pl -i chr8_moreem.wig 
aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ ./wig2fa.pl -i chr8_moreem.wig.out -o test2.customfa

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ fastaFromBed -fi chr8_moreem.wig.customfa -bed sharp.bed -fo sharp.fa 
# this is fine ...
aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ fastaFromBed -fi test2.customfa -bed sharp.bed -fo sharp.fa 
# so is this

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ mv wig2fa.pl SAVE_wig2fa.pl

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ cp SAVE_wig2fa.pl wig2fa.pl

changed emissions

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ ./wig2fa.pl -i chr8_moreem.wig 

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ ./wig2fa.pl -i chr8_moreem.wig.out -o test2.customfa

fastaFromBed -fi chr8_moreem.wig.customfa -bed sharp.bed -fo sharp.fa
# messed up!!!!!!! all N's

converted back to 
  return("N") if $number == 0;
  return("L") if $number <= 10;
  return("M") if $number > 10 and $number < 25;
  return("H") if $number >= 25 ;
and not messed up any more

  return("N") if $number == 0;
  return("L") if $number <= 10;
  return("O") if $number > 10 and $number < 25;
  return("M") if $number > 25 and $number < 40;
  return("H") if $number >= 40;
gives mostly Ns with a few Ls

As long as 4 states are maintained it doesn't mess up.

  return("N") if $number == 0;
  return("L") if $number <= 10;
  return("M") if $number > 10 and $number < 40;
  return("H") if $number >= 40;
this is fine

can replace and with && and it works (4 emissions)

  my ($number) = @_;
  return("N") if $number == 0;
  return("L") if $number <= 10;
  return("O") if $number <= 25;
  return("M") if $number <= 40;
  return("H") if $number <= 70;
  return("S") if $number > 70;

THIS WORKS for some reason. Why would the previous not work and this does? Has something to do with only one 'and' and not more or else mess up???

now with this wig2fa.pl re-run everything in this folder.

check to see if sharp peak region is within any of the other bed files 


aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ ./wig2fa.pl -i chr8_moreem.wig 
aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ fastaFromBed -fi chr8_moreem.wig.customfa -bed broad.bed -fo broad.fa 
aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ fastaFromBed -fi chr8_moreem.wig.customfa -bed sharp.bed -fo sharp.fa 
aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ fastaFromBed -fi chr8_moreem.wig.customfa -bed med.bed -fo med.fa 
aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ fastaFromBed -fi chr8_moreem.wig.customfa -bed nopeakbetween.bed -fo nopeakbetween.fa 
aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ fastaFromBed -fi chr8_moreem.wig.customfa -bed nopeakgenomic.bed -fo nopeakgenomic.fa 
aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ ./HMM_Counter.pl -i broad.fa -r 3 -w N,L,O,M,H,S -o broad.count 
aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ ./HMM_Counter.pl -i sharp.fa -r 3 -w N,L,O,M,H,S -o sharp.count 
aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ ./HMM_Counter.pl -i med.fa -r 3 -w N,L,O,M,H,S -o med.count 
aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ ./HMM_Counter.pl -i nopeakbetween.fa -r 3 -w N,L,O,M,H,S -o nopeakbetween.count 
aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ ./HMM_Counter.pl -i nopeakgenomic.fa -r 3 -w N,L,O,M,H,S -o nopeakgenomic.count 

cat'd to hmm
now run stochhmm

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ stochhmm -model DRIP_NT2_peakshapes_nosmall.hmm -seq chr8_moreem.wig.customfa -posterior -threshold 0.9 -gff > moreemissions_5states.gff 

5.7.14

Still didn't catch sharp peak with more emissions!
More em looks better, fewer artefacts

Actually it DID call the peak (!!!) but not as Sharp. Called as Broad.
chr8    StochHMM        Broad   70601910        70602898        .       + 
Remove Sharp state?

Removed sharp state

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ vim DRIP_NT2_-small-sharp_moreem.hmm 

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ stochhmm -model DRIP_NT2_-small-sharp_moreem.hmm -seq chr8_moreem.wig.customfa -posterior -threshold 0.9 -gff > moreemissions_4states.gff

compare to 5state moreem model

Options : 

GA_stochhmm with 4 state model
GA_stochhmm with 5 state model
GA_stochhmm with 3 state model
GA_stochhmm with 2 state model

stochhmm with 5 state model
stochhmm with 4 state model
stochhmm with 3 state model
stochhmm with 2 state model

Repeat above with threshold-only evaluate.pl
"" with by-eye evaluate.pl

stochhmm 4state & 5state almost the same, 4state slightly more broken up

Maybe add in a new "small" peak type?

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ nano newsmall.bed

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ fastaFromBed -fi chr8_moreem.wig.customfa -bed newsmall.bed -fo newsmall.fa

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ ./HMM_Counter.pl -i newsmall.fa -r 3 -w N,L,O,M,H,S -o newsmall.count

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ cp DRIP_NT2_-small-sharp_moreem.hmm DRIP_NT2_+small-sharp_moreem.hmm 
aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ cat newsmall.count >> DRIP_NT2_+small-sharp_moreem.hmm 
aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ vim DRIP_NT2_+small-sharp_moreem.hmm 

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ stochhmm -model DRIP_NT2_+small-sharp_moreem.hmm -seq chr8_moreem.wig.customfa -posterior -threshold 0.9 -gff > moreemissions_5states_newsmall.gff

with small is no better and calls only one new peak

modify GA to take in 4 states with no sharp

aparna@zeus:/data/aparna/GA$ vim G_A_5states.pm 
aparna@zeus:/data/aparna/GA$ cp peakshapes/more_emissions/DRIP_NT2_-small-sharp_moreem.hmm .

 The Emission table doesn't contain enough rows.  Expected Rows: 216 
 Please check the Emission Table and formatting for EMISSION: SCORE: COUNTS

^ error from stochhmm when trying to run GA_stochhmm with moreem and 4 states (using 5state scripts modified).

debugged, number of emissions is hardcoded changed all 4's to 6's (don't forget the one in array2string!) works now.

Running GAstochhmm over 4 states for 25 rounds of 16 population, with evaluate script being the 0.3 version

aparna@zeus:~/DATA/GA$ ./G_A_5states_random.pl chr8_smallregion.customfasta DRIP_NT2_-small-sharp_moreem.hmm 4stateout/ 25 16 0.9 8

4.8.14

Round 25 result:        Max Pop: 0.482535376453959      Max Individual: 0.509046890642252

For GA stochhmm with more emissions 4 states

25 runs is overtraining do 10 runs.

aparna@zeus:~/DATA/GA$ ./G_A_5states_random.pl chr8_smallregion.customfasta DRIP_NT2_-small-sharp_moreem.hmm 4stateout/ 10 16 0.9 8

replace evaluate in scripts/ with 0.4 version (no stringent test)
write evaluate script based on by-eye calls

Round 10 result:        Max Pop: 0.433187827348132      Max Individual: 0.443548493132346

This run was more stringent than the 25run.

Probably because only 10 runs, probability/randomness with 16pop means there is no guarantee each 10run will even be remotely similar

Two options :

run many instances of 10runs, take avg peaks (basically bootstrapping)
redo evaluate
  and/or how $f is calculated

Evaluate options:
by eye
stricter mathematical assessment (will require taking avg directly over each peak ... makes it slow)

Hidden Markov Model is pretty well optimized.

copying 0.4 evaluate to scripts/ and going to run GA for 10 runs with 50 population to hopefully make it reproducible.

aparna@zeus:/data/aparna/GA$ ./G_A_5states_random.pl chr8_smallregion.customfasta DRIP_NT2_-small-sharp_moreem.hmm 4stateout/ 10 50 0.9 8

Round 10 result:        Max Pop: 0.520823808208656      Max Individual: 0.564604376555841

still worse than the 25 gen one.

Running GA for 50 pop 25 gens.

aparna@zeus:/data/aparna/GA$ ./G_A_5states_random.pl chr8_smallregion.customfasta DRIP_NT2_-small-sharp_moreem.hmm 4stateout/ 25 50 0.9 8

currently using the 0.4 eval, which doesn't look too great. Rewrote bits into 0.5 eval, use that next.

5.9.14

Round 25 result:        Max Pop: 0.615874431009141      Max Individual: 0.625535746931092

way too stringent as expected. going to copy 0.5 eval to scripts/ and try again
aparna@zeus:/data/aparna/GA$ cp 0.5_eval.pl /data/aparna/scripts/faster_better_eval_peaks.pl 

15 runs 50 pop

aparna@zeus:/data/aparna/GA$ ./G_A_5states_random.pl chr8_smallregion.customfasta DRIP_NT2_-small-sharp_moreem.hmm 4stateout/ 15 50 0.9 8

Round 15 result:        Max Pop: 0.795423867605892      Max Individual: 0.798815822625346

still looks bad. 50 population is not working out. Try 16 pop for 25 runs.

aparna@zeus:~/DATA/GA$ ./G_A_5states_random.pl chr8_smallregion.customfasta DRIP_NT2_-small-sharp_moreem.hmm 4stateout/ 25 16 0.9 8

5.10.14

Round 25 result:        Max Pop: 0.786118145990609      Max Individual: 0.786755365740281

still not good. lowering mutation and running the same params.

mutate 0.2 max 0.4

aparna@zeus:~/DATA/GA$ ./G_A_5states_random.pl chr8_smallregion.customfasta DRIP_NT2_-small-sharp_moreem.hmm 4stateout/ 25 16 0.9 8

removed first and last from eval script : 0.6. Current run is looking bad, repeat with 0.6

test at ~8 runs doesn't look too bad, probably one of the better GA runs

However, the HMM still calls the sparse, small peaks best of any method. It's in the busy areas that the HMM overcalls. GA/SICER/etc call the busy areas better than the HMM, but competely miss the sparse areas.

Round 25 result:        Max Pop: 0.801033060959289      Max Individual: 0.801313574431738

too stringent as usual

modified 0.6 copying over to scripts trying again. made top 25% have to be > threshold and min length 50.

Round 25 result:        Max Pop: 0.833218253254545      Max Individual: 0.835140624062232

less bad than previous runs, still over stringent.

reduced to 1/8 of peak is above score thresh in 0.6 eval, copied over, trying again

5.12.14

Have template 7state model in GA/peakshapes/more_emissions_7states/DRIP_NT2_7states.hmm

Going to train on lower arm of chr8 and test on chr8_smallregion (which is on upper arm)
revised plan, lower arm doesn't have very many good busy regions, train on anything outside of the small region

Round 25 result:        Max Pop: 0.842222645950723      Max Individual: 0.842457121144289

still too stringent, but better than previous runs.

slightly better than sicer.
lowering mutation rate to 0.1 0.2, running again

Round 25 result:        Max Pop: 0.8400402777756        Max Individual: 0.840103850966085

Still looks very similar ... try for 15 runs.

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions/7states$ stochhmm -model DRIP_NT2_7states.hmm -seq chr8.wig.customfa -posterior -threshold 0.9 -gff > 7states_1.gf

Running the 7state stochhmm model under screen

added this line to G_A.pm " $fn = $fn * $fn; " to add more weight to the false negatives. Use this in next run (25)

I think 7states may be the best run yet ...

Round 15 result:        Max Pop: 0.838132970868731      Max Individual: 0.83997738664781

less str but still too str on clean regions

aparna@zeus:~/DATA/GA$ ./G_A_5states_random.pl chr8_smallregion.customfasta DRIP_NT2_-small-sharp_moreem.hmm 4stateout/ 25 16 0.9 8
  
  with fn^2 weight 

make medpeaks more stringent (shorter, taller) and noisy_interpeak bigger. Also look at noisy_broadpeak and split up peaks a little

also consider seperating noisy/clean regions (binning?) and running GA only on noisy regions

fn weight is very heavy -- see how it turns out.

5.13.14

Round 25 result:        Max Pop: 4.87525735056573e-05   Max Individual: 4.87718999837354e-05

There is a significant change with higher weight on fn, though weight may be too heavy

kind of strange peaks called though
$fn = $fn * 10 <-- modified

repeating run with this weight
less specific, more sensitive, more specific than single stochhmm runs but peaks don't always make sense.

Seperating noisy/clean regions :
5k bins (1k?)
no sliding window
use R script from s50

Round 25 result:        Max Pop: 0.391812157338393      Max Individual: 0.392087304903322

modifying sparse_medpeak.bed noisy_medpeak.bed noisy_broadpeak.bed noisy_interpeak.bed

put emissions in model, modifying transitions
may have to change medpeaks again, average is at 6.5k and broadpeak is ~5k. Interpeak noisy is ~10k, may have to reduce.

need to do a run of stochhmm 7states when zeus is more empty

5.14.14

aparna@zeus:~/DATA/GA/peakshapes/more_emissions/7states$ stochhmm -model DRIP_NT2_7states.hmm -seq chr8.wig.customfa -posterior -threshold 0.9 -gff > 7states_2.gff

Making test session

7states_2 = 2
moreem_4st_1 = 3
25run16pop10weight = 5
DRIP2 SICER = 4
lessstr_0.010.2mut = 1

chr8:15,345,469-39,792,388 small region

going to run #3 over mouse DRIP_DRIPc E14 and 3T3
aparna@zeus:/media/drobo/wearn/Mouse_drip_dripc/Macs/3T3_drip_MACS_wiggle/t
reat$ cp 3T3_drip_treat_afterfiting_all.wig.gz /data/aparna/stochhmm/mouse/
 
aparna@zeus:/media/drobo/wearn/Mouse_drip_dripc/Macs/E14_drip_MACS_wiggle/t
reat$ cp E14_drip_treat_afterfiting_all.wig.gz /data/aparna/stochhmm/mouse/

aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ cp DRIP_NT2_-small-s
harp_moreem.hmm ../../../stochhmm/mouse/
aparna@zeus:/data/aparna/GA/peakshapes/more_emissions$ cp wig2fa.pl ../../../stochhmm/mouse/

aparna@zeus:~/DATA/stochhmm/mouse$ ./wig2fa.pl -i E14_drip_treat_afterfiting_all.wig 

aparna@zeus:~/DATA/stochhmm/mouse$ ./wig2fa.pl -i 3T3_drip_treat_afterfiting_all.wig

best peak calling is determined to be 3, or 4states more emm single run of stochhmm
  DRIP_NT2_-small-sharp_moreem.hmm

made little script callpeaks_series.sh which just has the two stochhmm commands one after the other.

Going to run.
under screen (monitor mem usage! if it gets too high, kill and run stochhmm over each chr seperately by splitting the wig or fasta file.)
aparna@zeus:~/DATA/stochhmm/mouse$ ./callpeaks_series.sh 
(all that wasted OO perl code reading!)

aparna@zeus:~/DATA/stochhmm$ mkdir 4_state_runs
aparna@zeus:~/DATA/stochhmm/4_state_runs$ cp ../../GA/peakshapes/more_emissions/wig2fa.pl .
aparna@zeus:~/DATA/stochhmm/4_state_runs$ cp ../../GA/peakshapes/more_emissions/DRIP_NT2_-small-sharp_moreem.hmm .
aparna@zeus:~/DATA/stochhmm/4_state_runs$ mv DRIP_NT2_-small-sharp_moreem.hmm DRIP_4_states.hmm
aparna@zeus:~/DATA/stochhmm/4_state_runs$ l
DRIP_4_states.hmm*  wig2fa.pl*

aparna@zeus:/data/aparna/GA$ mkdir GA_7state_seperate_regions
aparna@zeus:/data/aparna/GA$ cp G_A_5states* GA_7state_seperate_regions/
aparna@zeus:/data/aparna/GA$ cp peakshapes/more_emissions/7states/DRIP_NT2_7states.hmm GA_7state_seperate_regions/
                                     

5.16.14

made backup 
aparna@zeus:/data/aparna$ tar -cvzf backup_5.16.14.tar.gz backup/ 
copied over to local, put in /data/lab

binning script worked!
aparna@zeus:/data/aparna/GA/noisy_clean_identify$ mv 5k_binning_outfile.txt chr8_binning_5k.txt

going to run on just small region to test R script on local
aparna@zeus:/data/aparna/GA/noisy_clean_identify$ ./5k_binning_peaks.pl chr8.wig.out 

aparna@zeus:/data/aparna/GA/noisy_clean_identify$ mv 5k_binning_outfile.txt chr8_smallregion_binning.txt

either more or less smoothing is needed. Change 5k_bining script to 10k, repeat. The smooth.spline is not fitting very well.

aparna@zeus:/data/aparna/GA/noisy_clean_identify$ ./10k_binning.txt chr8.wig.out 

aparna@zeus:/data/aparna/GA/GA_7state_seperate_regions$ ./G_A_7states_random.pl chr8.wig.customfa DRIP_NT2_7states.hmm test/ 25 16 0.9 8

5.19.14

Round 25 result:        Max Pop: 0.992503236550544      Max Individual: 0.992667625126138

accidentally ran entire chr8 -- may cause problem with eval and so this isn't "real".

Not too bad though

Not calling enough on some regions
aparna@zeus:/data/aparna/GA/GA_7state_seperate_regions$ ./G_A_7states_random.pl ../chr8_smallregion.customfasta DRIP_NT2_7states.hmm test/ 25 16 0.9 8 
re-running 

PROBLEM: evaluate script "sig" and "unsig" blocks comes from whole chr8 in cache, when GA is run over only a small region #fn and #fp are inflated because it's not running over those regions!

Make new cache with chr8_smallregion ONLY and use that in eval
aparna@zeus:/data/aparna/GA$ ./make_cache_small.pl
setting 8 (8) cache at drip_wig_chr8_small.8.cache
sig_blocks 7047 unsig_blocks 591491

rerunning ga_stochhmm run from above
fn still has *10 weight

modified scripts/ evaluate (which is 0.6)

making a new 0.7 to take into account "busy" regions

also try only mutating "noisy" states

apparently there are no false negatives ... (may have to make fn stricter in eval)

after five runs doesn't look bad

make sure noisy_interpeak doesn't get mutated next time.

maybe switch around order in hmm file / model so sparse/interpeaks are first

switched order and modified G_A_7states.pm to only mutate NOISY_MED and NOISY_BROAD and also to print out in switched order.

aparna@zeus:/data/aparna/GA/GA_7state_seperate_regions$ ./G_A_7states_random.pl ../chr8_smallregion.wig.customfa DRIP_NT2_7states.hmm test/ 25 16 0.9 8

aparna@zeus:/data/aparna$ awk '{print $3 - $2}' DRIP_DRIPc/peakfiles/NT2_dripc_sicer.bed | awk '{sum+=$1} END {print sum/NR}' 
13135.7
  avg length of DRIPc peaks

5.20.14

Round 25 result:        Max Pop: 0.645770300449641      Max Individual: 0.649014478431896

So far it looks very good.

Definitely not undercalling, in some areas it catches stuff that single-run stochhmm doesn't call a peak. Yet it breaks up busy areas a bit.

Use exactly the same params except do 50 pop 25 runs.
aparna@zeus:/data/aparna/GA/GA_7state_seperate_regions$ ./G_A_7states_random.pl ../chr8_smallregion.wig.customfa DRIP_NT2_7states.hmm test/ 25 50 0.9 8

if 50pop is also good, should try running over DRIPc.

5.21.14

Round 25 result:        Max Pop: 0.655683616107785      Max Individual: 0.657233426929691

This run looks even better!

do 50 gen 50 pop
  running, will take ~15 hrs

Try DRIP stochhmm single run over DRIPc just to see

aparna@zeus:/data/aparna/region_metaplots/DRIPc_wig$ parse_wig.pl NT2_dripc_plus_treat_afterfiting_all.wig chr8
aparna@zeus:/data/aparna/region_metaplots/DRIPc_wig$ mv chr8.wig DRIPc_plus_all_chr8.wig
aparna@zeus:/data/aparna/region_metaplots/DRIPc_wig$ cp DRIPc_plus_all_chr8.wig ../../GA/GA_7state_seperate_regions/

aparna@zeus:/data/aparna/GA/GA_7state_seperate_regions$ ../peakshapes/more_
emissions/7states/wig2fa.pl -i DRIPc_plus_all_chr8.wig 

aparna@zeus:/data/aparna/GA/GA_7state_seperate_regions$ stochhmm -model DRIP_NT2_7states.hmm -seq DRIPc_plus_all_chr8.wig.customfa -posterior -threshold 0.9 -gff > DRIPc_7statesDRIPmodel_plus_all_chr8.gff

new test track for evaluation. b = GA_stochhmm 25? runs 25 population 7 state model
d  = single run 7 state stochhmm
a  = single run 4 state stochhmm
c = SICER

DRIPc doesn't actually look too bad, it's calling peaks properly it's just too specific.

Try 4state HMM on DRIPc.
aparna@zeus:/data/aparna/GA/GA_7state_seperate_regions$ mv DRIPc_plus_all_chr8.wig* ../  
aparna@zeus:/data/aparna/GA$ stochhmm -model DRIP_NT2_-small-sharp_moreem.hmm -seq DRIPc_plus_all_chr8.wig.customfa -posterior -threshold 0.9 -gff > DRIPc_4statesDRIPmodel_plus_all_chr8.gff

also try it with GA maybe that will work.

4state model for DRIPc actually looks very good ... maybe some overcalling but surprisingly good, even with the too-high threshold in wig2fa.
5/7/10 seem to be good thresholds for DRIPc.
Maybe scale down wig2fa, repeat emission stuff, run again?
Or just do a GA run with 5 min thresh, 10 sig thresh, 4 and 7 state (or modified 4 where only 1 state can be modified? or only the Peak states can be modified?)

Halve all the emission values/thresholds for DRIPc compared to DRIP.

5.22.14

Round 50 result:        Max Pop: 0.666463371997451      Max Individual: 0.667480894341627

Looks decent, not dramatically worse or better, but is more reproducible than 25 runs, so use this one.

Made and organized new directory to do DRIPc tests 
aparna@zeus:/data/aparna/GA/DRIPc/

Going to run 4state GA after reducing values in wig2fa to 1/2 and re-running emissions/wig file with same DRIP beds.

aparna@zeus:/data/aparna/GA/DRIPc$ ./wig2fa.pl -i DRIPc_plus_all_chr8.wig 

actually, going to use only smallregion.

aparna@zeus:/data/aparna/GA/DRIPc$ get_wig_lines.pl DRIPc_plus_all_chr8.wig 20000000 100000000

aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model$ ../wig2fa.pl -i chr8_smallregion.wig 
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model$ ../wig2fa.pl -i chr8.wig 
where chr8 file is a DRIP file.

aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/4stateGA$ fastaFromBed -fi ../chr8.wig.customfa -bed broad.bed -fo broad.fa
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/4stateGA$ fastaFromBed -fi ../chr8.wig.customfa -bed med.bed -fo med.fa
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/4stateGA$ fastaFromBed -fi ../chr8.wig.customfa -bed nopeakbetween.bed -fo nopeakbetween.fa
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/4stateGA$ fastaFromBed -fi ../chr8.wig.customfa -bed nopeakgenomic.bed -fo nopeakgenomic.fa        

aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/4stateGA$ ../../HMM_Counter.pl -i broad.fa -r 3 -w N,L,O,M,H,S -o broad.count
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/4stateGA$ ../../HMM_Counter.pl -i med.fa -r 3 -w N,L,O,M,H,S -o med.count
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/4stateGA$ ../../HMM_Counter.pl -i nopeakbetween.fa -r 3 -w N,L,O,M,H,S -o nopeakbetween.count
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/4stateGA$ ../../HMM_Counter.pl -i nopeakgenomic.fa -r 3 -w N,L,O,M,H,S -o nopeakgenomic.count

cat into model file

now need to change evaluate and add DRIPc to cache

edited files in DRIPc, copied current eval from scripts/ to GA.

aparna@zeus:/data/aparna/GA/DRIPc$ ./make_cache_small_DRIPc.pl 
setting 8 (8) cache at dripc_wig_chr8_small.8.cache
sig_blocks 9477 unsig_blocks 1647801

edited files, copying over to scripts/

aparna@zeus:/data/aparna/GA/DRIPc$ cp DRIPc_small_currenteval.pl /data/aparna/scripts/
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/4stateGA$ cp ../../../G_A_5sta
tes.pm .
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/4stateGA$ cp ../../../G_A_5states_random.pl .

edited G_A.. .pm to use new evaluate

aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/4stateGA$ mv G_A_5states.pm G_A_DRIPc_4state.pm
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/4stateGA$ mv G_A_5states_random.pl G_A_DRIPc_4state_random.pl

edited .pl for new .pm name

going to test

aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/4stateGA$ ./G_A_DRIPc_4state_random.pl ../../DRIPc_plus_all_chr8_smallregion.wig.customfa DRIP_NT2_-small-sharp_moreem.hmm out/ 1 1 0.9 1

test seems fine (though stochhmm run uses a lot of memory ~7GB for some reason) going to do 25 runs 16 pop

aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/4stateGA$ ./G_A_DRIPc_4state_random.pl ../../DRIPc_plus_all_chr8_smallregion.wig.customfa DRIP_NT2_-small-sharp_moreem.hmm out/ 25 16 0.9 8

Using a DRIPc version of "current" evaluate, but have not added fn weight to G_A.pm.

cancelled, going to run on 4 threads because high mem usage and zeus is being slow

aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/4stateGA$ ./G_A_DRIPc_4state_random.pl ../../DRIPc_plus_all_chr8_smallregion.wig.customfa DRIP_NT2_-small-sharp_moreem.hmm out/ 25 16 0.9 4

As for peak calling test 2 :

a = GA_stochhmm 25? runs 25 population 7 state model -> actually I think this is 50 pop -> it is
b = SICER
c = 50 runs 50 pop 7 state GA 
d  = single run 4 state stochhmm
e  = single run 7 state stochhmm

sent. 

aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA$ cp ../../../GA_7stat
e_seperate_regions/G_A_7states.pm .
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA$ cp ../../../GA_7state_seperate_regions/G_A_7states_random.pl .

edited for new evaluate

aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA$ fastaFromBed -fi ../chr8.wig.customfa -bed noisy_broadpeak.bed -fo noisy_broadpeak.fa  
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA$ fastaFromBed -fi ../chr8.wig.customfa -bed noisy_medpeak.bed -fo noisy_medpeak.fa
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA$ fastaFromBed -fi ../chr8.wig.customfa -bed noisy_interpeak.bed -fo noisy_interpeak.fa
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA$ fastaFromBed -fi ../chr8.wig.customfa -bed genomic_interpeak.bed -fo genomic_interpeak.fa
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA$ fastaFromBed -fi ../chr8.wig.customfa -bed sparse_medpeak.bed -fo sparse_medpeak.fa
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA$ fastaFromBed -fi ../chr8.wig.customfa -bed sparse_sharppeak.bed -fo sparse_sharppeak.fa
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA$ fastaFromBed -fi ../chr8.wig.customfa -bed sparse_interpeak.bed -fo sparse_interpeak.fa

aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA$ ../../HMM_Counter.pl -i noisy_broadpeak.fa -r 3 -w N,L,O,M,H,S -o noisy_broadpeak.count
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA$ ../../HMM_Counter.pl -i noisy_medpeak.fa -r 3 -w N,L,O,M,H,S -o noisy_medpeak.count
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA$ ../../HMM_Counter.pl -i noisy_interpeak.fa -r 3 -w N,L,O,M,H,S -o noisy_interpeak.count
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA$ ../../HMM_Counter.pl -i genomic_interpeak.fa -r 3 -w N,L,O,M,H,S -o genomic_interpeak.count
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA$ ../../HMM_Counter.pl -i sparse_medpeak.fa -r 3 -w N,L,O,M,H,S -o sparse_medpeak.count
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA$ ../../HMM_Counter.pl -i sparse_sharppeak.fa -r 3 -w N,L,O,M,H,S -o sparse_sharppeak.count
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA$ ../../HMM_Counter.pl -i sparse_interpeak.fa -r 3 -w N,L,O,M,H,S -o sparse_interpeak.count

cat into DRIP model.

testing
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA$ ./G_A_7states_random.pl ../../DRIPc_plus_all_chr8_smallregion.wig.customfa DRIP_NT2_7states.hmm out/ 1 1 0.9 1

uses 9GB (!) memory. Why is DRIPc using more memory than DRIP for stochhmm? -> DRIP wigs only have >3 in the output, DRIPc has everything.
  only run on 4 threads at max. Also 7state DRIPc takes >7min per stochhmm run.
  Initial f is ALREADY 0.95. 

In DRIP peak-calling, method a (and d) win! GA_stochhmm 25 runs 50 pop 7state model only mutate Noisy Peaks, more emissions (6), evaluation  current_eval_5.22.14.pl. Model : DRIP_NT2_7states.hmm.

d was 4state single run stochhmm, more emissions, Model : DRIP_NT2_-small-sharp_moreem.hmm

Need to re-run (a) because last run in that folder was 50 pop 50 runs, did not save hmm file from 25 run.

4state DRIPc is optimizing too fast ... indicates it is likely it is making too specific peaks. Round 3 have already hit .9.

aparna@zeus:/data/aparna/GA/GA_7state_seperate_regions$ ./G_A_7states_random.pl ../chr8_smallregion.wig.customfa DRIP_NT2_7states.hmm 25run50popfinal/ 25 50 0.9 8
-> final run of GA for DRIP
-> put in following script, going to run sctip instead.
have script peak_calling_runs.sh

running under screen.
aparna@zeus:/data/aparna/GA$ ./peak_calling_runs.sh
  this will take a VERY long time. Check in periodically to make sure no errors -- the commands are not tested.

reason why DRIPc is high mem : smallregion is wrong (correct on next line)
aparna@zeus:/data/aparna/stochhmm_GA_prep/small_wigs$ get_wig_lines.pl ../chr8.wig 15345469 39792388

leaving it, everything is already using this region, changing it would probably mess stuff up.
-> no, going to change it.

aparna@zeus:/data/aparna/GA/DRIPc$ get_wig_lines.pl DRIPc_plus_all_chr8.wig 15345469 39792388

aparna@zeus:/data/aparna/GA/DRIPc$ mv DRIPc_plus_all_chr8.wig.out DRIPc_plus_all_chr8_smallregion.wig

aparna@zeus:/data/aparna/GA/DRIPc$ ./wig2fa.pl -i DRIPc_plus_all_chr8_smallregion.wig

aparna@zeus:/data/aparna/GA/DRIPc$ ./make_cache_small_DRIPc.pl 
setting 8 (8) cache at dripc_wig_chr8_small.8.cache
sig_blocks 6123 unsig_blocks 592305

aparna@zeus:/data/aparna/GA/DRIPc$ cp DRIPc_small_currenteval.pl /data/aparna/scripts/DRIPc_small_currenteval.pl 

That should be all. Restarting peak script.
aparna@zeus:/data/aparna/GA$ ./peak_calling_runs.sh 

Once 7state GA DRIP is done, do a single stochhmm run of 0.hmm over whole genome DRIP, also do the same for the DRIP 4state model.
also ORGANIZE and ANNOTATE and COMMENT all scripts used!

aparna@zeus:/data/aparna/DRIP_wigs/DRIP_NT2$ for f in * ; do clean_wig.pl $f ; done ; cat *.wig.out > DRIP_NT2.wig ;

aparna@zeus:/data/aparna/DRIP_wigs/DRIP_HeLa$ for f in * ; do clean_wig.pl $f ; done ; cat *.wig.out > DRIP_HeLa.wig ;

DRIPc adjusting emissions probably didn't actually do much, as the DRIP wig is twice as high as DRIPc wig and so Medium will be all HHHSSHH or something anyway ...

GA 7state should fix it.

5.23.14

aparna@zeus:/data/aparna/GA/GA_7state_seperate_regions$ cp 25run50popfinal/0.hmm GA_StochHMM_DRIP_7state_model_25run50pop_FINAL.hmm
parna@zeus:/data/aparna/GA/GA_7state_seperate_regions$ cp GA_StochHMM_DRIP_7state_model_25run50pop_FINAL.hmm ../

continuing runs on 6 threads (peak_calling_runs.sh)

aparna@zeus:/data/aparna/GA$ mkdir final_peak_calls
aparna@zeus:/data/aparna/GA$ cp GA_StochHMM_DRIP_7state_model_25run50pop_FINAL.hmm final_peak_calls/

# making fasta file from DRIP wig
aparna@zeus:/data/aparna/GA/peakshapes/more_emissions/7states$ ./wig2fa.pl -i ../../../../DRIP_wigs/DRIP_NT2/DRIP_NT2.wig ../../../final_peak_calls/DRIP_NT2.wig.customfa

for some reason there are still only 4 stochhmm runs even though I increased it to 6 ... maybe because saved pop.


aparna@zeus:/data/aparna/DRIP_wigs/DRIP_NT2$ mv DRIP_NT2.wig.customfa ../../GA/final_peak_calls/

aparna@zeus:/data/aparna/GA/final_peak_calls$ stochhmm -seq DRIP_NT2.wig.customfa -model GA_StochHMM_DRIP_7state_model_25run50pop_FINAL.hmm -posterior -threshold 0.9 -gff > GA_StochHMM_peaks_final.gff
  under screen

after initialization of saved pop, have 6 stochhmms going for GA

for rewrite, only have to write mate() sub (with crossovers) and then debugging.

Also would be good to write a complete wrapper for GA_StochHMM process that simplifies everything and keeps a log of params and runs.

5.27.14

Not enough runs, 4st still looks better (more specific). Need higher population

save intermediates
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model$ cp 4stateGA/out/0.hmm 4stateGA/4st25run16pop_0.hmm
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model$ cp 7stateGA/out/0.hmm 7stateGA/7st25run16pop_0.hmm

also smallregion seems wrong ...

arbitrarily choosing region
chr8:15,345,469-39,792,388

aparna@zeus:/data/aparna/GA/DRIPc$ get_wig_lines.pl DRIPc_plus_all_chr8_smallregion.wig 15345469 39792388

aparna@zeus:/data/aparna/GA/DRIPc$ mv DRIPc_plus_all_chr8_smallregion.wig.out 2_DRIPcsmallregion.wig

aparna@zeus:/data/aparna/GA/DRIPc$ vim make_cache_small_DRIPc.pl 
aparna@zeus:/data/aparna/GA/DRIPc$ ./make_cache_small_DRIPc.pl 
setting 8 (8) cache at dripc_wig_chr8_small.8.cache
sig_blocks 6123 unsig_blocks 592305

nothing to modify in eval, numbers are the same

aparna@zeus:/data/aparna/GA/DRIPc$ ./wig2fa.pl -i 2_DRIPcsmallregion.wig 

modified peak script for 50 pop 25 runs for both 7state and 4state

going to run

final 7state model is in 

aparna@zeus:/data/aparna/GA/final_peak_calls$ 

aparna@zeus:/data/aparna/GA/final_peak_calls$ convert.sh GA_StochHMM_peaks_final.gff GA_Stochhmm_peaks_final_7state_genome.bed
aparna@zeus:/data/aparna/GA/final_peak_calls$ convert.sh GA_StochHMM_peaks_final.gff GA_Stochhmm_peaks_final_7state_genome.bed
aparna@zeus:/data/aparna/GA/final_peak_calls$ mv GA_Stochhmm_peaks_final_7state_genome.bed GA_Stochhmm_peaks_final_7state_genome_DRIP2.bed

aparna@zeus:/data/aparna/GA/final_peak_calls$ mv GA_StochHMM_peaks_final.gff GA_StochHMM_peaks_final_7state_genome_DRIP2.gff 

aparna@zeus:/data/aparna/GA/final_peak_calls$ l
DRIP_NT2.wig.customfa
GA_StochHMM_DRIP_7state_model_25run50pop_FINAL.hmm
GA_StochHMM_peaks_final_7state_genome_DRIP2.gff
GA_Stochhmm_peaks_final_7state_genome_DRIP2.bed

aparna@zeus:/data/aparna/GA$ cp DRIP_NT2_-small-sharp_moreem.hmm final_peak_calls/
#running 4state model over DRIP genome
aparna@zeus:/data/aparna/GA/final_peak_calls$ mv DRIP_NT2_-small-sharp_moreem.hmm DRIP_4state_StocHMM.hmm
aparna@zeus:/data/aparna/GA/final_peak_calls$ stochhmm -seq DRIP_NT2.wig.customfa -model DRIP_4state_StocHMM.hmm -posterior -threshold 0.9 -gff > DRIP_4state_StochHMM_peaks_sensitive_run.gff

DRIPc runs seem to be taking sensible memory (3.3) up threads to 8.

modified, rerunning peak script for DRIPc.

5.28.14

DRIP sensitive run (4st) done.

25 runs 50 pop for DRIPc done.
Not much change

convert the DRIPc wig with modified (lower) emissions and the DRIP wig with normal emissions, run stochhmm and see.

aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA/diff_emissions$ l
DRIP_NT2_7states.hmm                 noisy_broadpeak.bed
DRIPc_plus_all_chr8_smallregion.wig  noisy_interpeak.bed
chr8.wig                             noisy_medpeak.bed
genomic_interpeak.bed                sparse_interpeak.bed
higher_wig2fa.pl*                    sparse_medpeak.bed
lower_wig2fa.pl*                     sparse_sharppeak.bed

made script count_em.sh to automate
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA/diff_emissions$ ./count_em.sh 
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA/diff_emissions$ vim DRIPc_from_DRIP_model_diffem_7st.hmm 

aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA/diff_emissions$ stochhmm -seq DRIPc_plus_all_chr8_smallregion.wig.customfa -model DRIPc_from_DRIP_model_diffem_7st.hmm -posterior -threshold 0.9 -gff > DRIPc_from_DRIP_diffem_7st_stochhmm.gff

more sensitive, some overcalling, some missed peaks. Much better than other runs though. Try with 25run50pop GA.

aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA$ cp G_A_7states_random.pl G_A_7states.pm diff_emissions/
aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA/diff_emissions$ ./G_A_7states_random.pl DRIPc_plus_all_chr8_smallregion.wig.customfa DRIPc_from_DRIP_model_diffem_7st.hmm out/ 25 50 0.9 8

no modification of GA to happen, it was just complaining because the sequence file was in a different directory

5.29.14

50pop diffem run is better, still some overcalling in sparse regions. Try a version of 25run50pop with mutation in all peak states. 

cp'd G_A_7states.pm to G_A_mutateallpeak.pm, made following change:
#        if ($types =~ /NOISY/ && $types !~ /INTERPEAK/) {
        if ($types =~ /PEAK/ && $types !~ /INTERPEAK/) {

aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA/diff_emissions$ cp G_A_7states_random.pl G_A_mutateallpeak_random.pl
  changing pm dependancy to new pm

aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA/diff_emissions$ ./G_A_mutateallpeak_random.pl DRIPc_plus_all_chr8_smallregion.wig.customfa DRIPc_from_DRIP_model_diffem_7st.hmm out_mutateallpeak/ 25 50 0.9 8

aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA/diff_emissions$ mv out/ mutateNoisy_7st_diffem_DRIPmodel_DRIPc+all

maybe lower threshold to 5?
only mutate sparse? Don't want to lose current sensitivity level in overtraining specificity

5.30.14

mutate all for DRIPc doesn't look good. Running mutate sparse only, but probably will go with original noisy-only run.

Also finished (hopefully) debugging the rewrite, clean version is 0.2_functionalGA.pl. Still need to clean up actual code, fix global variables to more sensible, function arguments, user validation, checking crossover function more, testing on a long multigen run, many other things. Also should write wrapper for entire process. 

6.2.14

Sparse run is not that different than mutate only noisy run, going to use mutate only noisY

aparna@zeus:/data/aparna/GA/final_peak_calls/DRIPc$ cp /media/drobo/wearn/NT2_DripC/Macs/NT2_dripc_rep1_plus_MACS_wiggle/treat/NT2_dripc_rep1_plus_treat_afterfiting_all.wig.gz .
aparna@zeus:/data/aparna/GA/final_peak_calls/DRIPc$ cp /media/drobo/wearn/NT2_DripC/Macs/NT2_dripc_rep2_plus_MACS_wiggle/treat/NT2_dripc_rep2_plus_treat_afterfiting_all.wig.gz .
aparna@zeus:/data/aparna/GA/final_peak_calls/DRIPc$ cp /media/drobo/wearn/NT2_DripC/Macs/NT2_dripc_rep1_minus_MACS_wiggle/treat/NT2_dripc_rep1_minus_treat_afterfiting_all.wig.gz .
aparna@zeus:/data/aparna/GA/final_peak_calls/DRIPc$ cp /media/drobo/wearn/NT2_DripC/Macs/NT2_dripc_rep2_minus_MACS_wiggle/treat/NT2_dripc_rep2_minus_treat_afterfiting_all.wig.gz .

aparna@zeus:/data/aparna/GA/DRIPc/DRIP_model/7stateGA/diff_emissions$ cp lower_wig2fa.pl ../../../../final_peak_calls/DRIPc/

aparna@zeus:/data/aparna/GA/final_peak_calls/DRIPc$ gunzip *.gz           

aparna@zeus:/data/aparna/GA/final_peak_calls/DRIPc$ for f in *.wig; do ./lower_wig2fa.pl -i $f ; done

parna@zeus:/data/aparna/GA/final_peak_calls/DRIPc$ cp ../../DRIPc/DRIP_model/7stateGA/diff_emissions/mutateNoisy_7st_diffem_DRIPmodel_DRIPc+all/0.hmm DRIPc_Final_StochHMM_25runs50pop_GA_fromDRIP_plusbothtrained.hmm

made script DRIPc_peaks.sh to run stochhmm for DRIPc

6.3.14

DRIPc runs done

aparna@zeus:/data/aparna/GA/final_peak_calls$ cp DRIP/GA_Stochhmm_peaks_final_7state_genome_DRIP2.bed peaks/

aparna@zeus:/data/aparna/GA/final_peak_calls$ cp DRIPc/*.bed peaks/

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ mv GA_Stochhmm_peaks_final_7state_genome_DRIP2.bed NT2_DRIP2_finalpeaks.bed

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ l
NT2_DRIP2_finalpeaks.bed             NT2_DRIPc_rep2_minus_finalpeaks.bed
NT2_DRIPc_rep1_minus_finalpeaks.bed  NT2_DRIPc_rep2_plus_finalpeaks.bed
NT2_DRIPc_rep1_plus_finalpeaks.bed

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ addheader.sh NT2_DRIP2_finalpeaks.bed DRIP2_final DRIP2_GA_StochHMM_final_peaks

formatting is weird in final peakfiles, and dripc minus has a problematic chrM. Delete these things in final peak files and re-upload to genome browser

rep1 and rep2 look different ...

cleaned up files

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ bedtools intersect -a NT2_DRIPc_rep1_plus_finalpeaks.bed -b NT2_DRIPc_rep2_plus_finalpeaks.bed | less
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ bedtools intersect -a NT2_DRIPc_rep1_plus_finalpeaks.bed -b NT2_DRIPc_rep2_plus_finalpeaks.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
41115989

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ awk '{print $3 - $2}' NT2_DRIPc_rep1_plus_finalpeaks.bed | awk '{sum+=$1} END {print sum}'
68359166

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ awk '{print $3 - $2}' NT2_DRIPc_rep2_plus_finalpeaks.bed | awk '{sum+=$1} END {print sum}'
52672380

> 41115989/68359166*100
[1] 60.147
> 41115989/52672380*100
[1] 78.05987

This is bad ...

it was trained on DRIPc plus rep 1.

retrain on DRIPc combined plus?

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ bedtools intersect -a NT2_DRIPc_rep1_minus_finalpeaks.bed -b NT2_DRIPc_rep2_minus_finalpeaks.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
38113045
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ awk '{print $3 - $2}' NT2_DRIPc_rep1_minus_finalpeaks.bed | awk '{sum+=$1} END {print sum}'
62373010
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ awk '{print $3 - $2}' NT2_DRIPc_rep2_minus_finalpeaks.bed | awk '{sum+=$1} END {print sum}'
49206558

> 38113045/62373010*100
[1] 61.10503
> 38113045/49206558*100
[1] 77.45521

Nearly the same difference as plus, but model was not trained on minus ...

try stochhmm run with inital model no training?

aparna@zeus:~/DATA/region_metaplots/DRIPc_wig$ parse_wig.pl NT2_dripc_plus_treat_afterfiting_all.wig chr8

aparna@zeus:~/DATA/region_metaplots/DRIPc_wig$ get_wig_lines.pl chr8.wig 15345469 39792388

aparna@zeus:~/DATA/region_metaplots/DRIPc_wig$ mv chr8.wig.out DRIPc_both_plus_small.wig
aparna@zeus:~/DATA/region_metaplots/DRIPc_wig$ cp DRIPc_both_plus_small.wig ../../GA/DRIPc/DRIP_model/7stateGA/diff_emissions/

actually ... I just diff'd and it seems that it WAS trained on plus rep1/rep2 combined.

why are the two so different then???

made merged files rep1/rep2 for plus and minus

aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ awk '{print $3 - $2}' merged_NT2_DRIPc_plus_both.bed | awk '{sum+=$1} END {print sum}'
79915615

aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ awk '{print $3 - $2}' merged_NT2_DRIPc_minus_both.bed | awk '{sum+=$1} END {print sum}'
73466579

aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ awk '{print $3 - $2}' merged_NT2_DRIPc_all.bed | awk '{sum+=$1} END {print sum}'
148667576

> 148667576/(3.2E9)*100
[1] 4.645862

aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ mv merged_NT2_DRIPc_plus_both.bed NT2_DRIPc_plus_both.bed
aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ mv merged_NT2_DRIPc_minus_both.bed NT2_DRIPc_minus_both.bed
aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ mv merged_NT2_DRIPc_all.bed NT2_DRIPc_all.bed

FINAL peak files

aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ l
NT2_DRIP2_finalpeaks.bed  NT2_DRIPc_rep1_minus_finalpeaks.bed
NT2_DRIPc_all.bed         NT2_DRIPc_rep1_plus_finalpeaks.bed
NT2_DRIPc_minus_both.bed  NT2_DRIPc_rep2_minus_finalpeaks.bed
NT2_DRIPc_plus_both.bed   NT2_DRIPc_rep2_plus_finalpeaks.bed

DRIP2, combined DRIPc overlap

aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ bedtools intersect -a NT2_DRIPc_all.bed -b NT2_DRIP2_finalpeaks.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
83070594

aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ awk '{print $3 - $2}' NT2_DRIP2_finalpeaks.bed | awk '{sum+=$1} END {print sum}'
194806112

> 83070594/194806112*100 (over DRIP2)
[1] 42.6427
> 83070594/148667576*100 (over DRIPc all)
[1] 55.87674

Making stringent files (only those regions that overlap in BOTH reps)

aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ bedtools intersect -a NT2_DRIPc_rep1_plus_finalpeaks.bed -b NT2_DRIPc_rep2_plus_finalpeaks.bed > stringent_NT2_DRIPc_plus_both.bed
aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ bedtools intersect -a NT2_DRIPc_rep1_minus_finalpeaks.bed -b NT2_DRIPc_rep2_minus_finalpeaks.bed > stringent_NT2_DRIPc_minus_both.bed

Most stringent all
aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ bedtools intersect -a stringent_NT2_DRIPc_plus_both.bed -b stringent_NT2_DRIPc_minus_both.bed > most_stringent_NT2_DRIPc_all.bed

stringent merged all

aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ cat stringent_NT2_DRIPc_plus_both.bed stringent_NT2_DRIPc_minus_both.bed > tmp_str_DRIPc_all.bed
aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ sort -k1,1 -k2,2n tmp_str_DRIPc_all.bed > tmp_sorted_str_DRIPc_all.bed 
aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ bedtools merge -i tmp_sorted_str_DRIPc_all.bed > merged_stringent_NT2_DRIPc_all.bed

all peak files final
aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ l
NT2_DRIP2_finalpeaks.bed             NT2_DRIPc_rep2_minus_finalpeaks.bed
NT2_DRIPc_all.bed                    NT2_DRIPc_rep2_plus_finalpeaks.bed
NT2_DRIPc_minus_both.bed             merged_stringent_NT2_DRIPc_all.bed
NT2_DRIPc_plus_both.bed              most_stringent_NT2_DRIPc_all.bed
NT2_DRIPc_rep1_minus_finalpeaks.bed  stringent_NT2_DRIPc_minus_both.bed
NT2_DRIPc_rep1_plus_finalpeaks.bed   stringent_NT2_DRIPc_plus_both.bed

aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ awk '{print $3 - $2}' stringent_NT2_DRIPc_plus_both.bed | awk '{sum+=$1} END {print sum}'
41115989
aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ awk '{print $3 - $2}' stringent_NT2_DRIPc_minus_both.bed | awk '{sum+=$1} END {print sum}'
38113045
aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ awk '{print $3 - $2}' most_stringent_NT2_DRIPc_all.bed | awk '{sum+=$1} END {print sum}'
1954404
aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ awk '{print $3 - $2}' merged_stringent_NT2_DRIPc_all.bed | awk '{sum+=$1} END {print sum}'
77274662

Stringent statistics
aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ bedtools intersect -a merged_stringent_NT2_DRIPc_all.bed -b NT2_DRIP2_finalpeaks.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
52442335
aparna@zeus:~/DATA/GA/final_peak_calls/peaks$ bedtools intersect -a most_stringent_NT2_DRIPc_all.bed -b NT2_DRIP2_finalpeaks.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
1916115

> 52442335/77274662*100 (over merged stringent)
[1] 67.86485
> 52442335/194806112*100 (over DRIP2)
[1] 26.92027

Peak calling is done. Now need to first: RECORD exactly how peaks were called in wiki notebook, then begin repeating replication origins calculations with new peaks.

aparna@zeus:/data/aparna$ bedtools intersect -a GA/final_peak_calls/peaks/N
T2_DRIPc_all.bed -b new_G_Skew.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
7464266
aparna@zeus:/data/aparna$ bedtools intersect -a GA/final_peak_calls/peaks/NT2_DRIPc_all.bed -b new_C_Skew.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
7304843

aparna@zeus:/data/aparna$ for f in new_*; do echo $f; awk '{print $3 - $2}' $f | awk '{sum+=$1} END {print sum}'; done 
new_C_Skew.bed
50534301
new_G_Skew.bed
50474992

aparna@zeus:/data/aparna$ awk '{print $3 - $2}' GA/final_peak_calls/peaks/NT2_DRIPc_all.bed | awk '{sum+=$1} END {print sum}'
148667576

> 7464266/50474992*100 (over G)
[1] 14.78805
> 7464266/148667576*100 (over DRIPc all)
[1] 5.020776

> 7304843/50534301*100 (over C)
[1] 14.45522
> 7304843/148667576*100 (over DRIPc all)
[1] 4.913541


aparna@zeus:/data/aparna$ bedtools intersect -a GA/final_peak_calls/peaks/N
T2_DRIPc_all.bed -b replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
21214447

aparna@zeus:/data/aparna$ bedtools intersect -a GA/final_peak_calls/peaks/NT2_DRIPc_all.bed -b replication_origins/s50/origin_files/common_origins/common_late_origins_ENCODE.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
380894

aparna@zeus:/data/aparna$ awk '{print $3 - $2}' GA/final_peak_calls/peaks/NT2_DRIPc_all.bed | awk '{sum+=$1} END {print sum}'
148667576

> 21214447/148667576*100
[1] 14.26972
> 380894/148667576*100
[1] 0.2562052
> 14.26972/0.2562052
[1] 55.69645

aparna@zeus:/data/aparna$ bedtools intersect -a GA/final_peak_calls/peaks/NT2_DRIP2_finalpeaks.bed -b replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
43165618
aparna@zeus:/data/aparna$ bedtools intersect -a GA/final_peak_calls/peaks/NT2_DRIP2_finalpeaks.bed -b replication_origins/s50/origin_files/common_origins/common_late_origins_ENCODE.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
76609
aparna@zeus:/data/aparna$ awk '{print $3 - $2}' GA/final_peak_calls/peaks/NT2_DRIP2_finalpeaks.bed | awk '{sum+=$1} END {print sum}'
194806112

> 43165618/194806112*100
[1] 22.15825
> 76609/194806112*100
[1] 0.03932577
> 22.15825/0.03932577
[1] 563.4537

aparna@zeus:/data/aparna$ bedtools intersect -a GA/final_peak_calls/peaks/NT2_DRIPc_plus_both.bed -b replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
11816981
aparna@zeus:/data/aparna$ bedtools intersect -a GA/final_peak_calls/peaks/NT2_DRIPc_plus_both.bed -b replication_origins/s50/origin_files/common_origins/common_late_origins_ENCODE.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
100671
aparna@zeus:/data/aparna$ awk '{print $3 - $2}' GA/final_peak_calls/peaks/NT2_DRIPc_plus_both.bed | awk '{sum+=$1} END {print sum}'
79915615

> 11816981/79915615*100
[1] 14.78682
> 100671/79915615*100
[1] 0.1259716
> 14.78682/0.1259716
[1] 117.3822

aparna@zeus:/data/aparna$ bedtools intersect -a GA/final_peak_calls/peaks/NT2_DRIPc_minus_both.bed -b replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
10331063
aparna@zeus:/data/aparna$ bedtools intersect -a GA/final_peak_calls/peaks/NT2_DRIPc_minus_both.bed -b replication_origins/s50/origin_files/common_origins/common_late_origins_ENCODE.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
280649
aparna@zeus:/data/aparna$ awk '{print $3 - $2}' GA/final_peak_calls/peaks/NT2_DRIPc_minus_both.bed | awk '{sum+=$1} END {print sum}'
73466579

> 10331063/73466579*100
[1] 14.06226
> 280649/73466579*100
[1] 0.3820091
> 14.06226/0.3820091
[1] 36.81132

Mouse DRIP
aparna@zeus:/data/aparna/GA/final_peak_calls$ mkdir mouse
aparna@zeus:/data/aparna/GA/final_peak_calls/mouse$ cp ../DRIP/GA_StochHMM_DRIP_7state_model_25run50pop_FINAL.hmm .
parna@zeus:/data/aparna/GA/final_peak_calls/mouse$ cp ../../peakshapes/more_emissions/7states/wig2fa.pl .
aparna@zeus:/data/aparna/GA/final_peak_calls/mouse$ cp wig2fa.pl ../DRIP/
aparna@zeus:/data/aparna/GA/final_peak_calls/mouse$ cp /data/mitochi/Work/Project/DRIP_Conservation/Peak/Mouse_ESC.wig .
aparna@zeus:/data/aparna/GA/final_peak_calls/mouse$ cp /data/mitochi/Work/Project/DRIP_Conservation/Peak/Mouse_Fibroblast.wig .

aparna@zeus:/data/aparna/GA/final_peak_calls/mouse$ for f in *.wig; do ./wig2fa.pl -i $f ; stochhmm -seq $f.customfa -model GA_StochHMM_DRIP_7state_model_25run50pop_FINAL.hmm -posterior -threshold 0.9 -gff > OUT_$f.gff ; done

6.5.14

run.pl for DRIP2 GA_StochHMM peaks early origins

mouse ESC with lower em

aparna@zeus:/data/aparna/GA/final_peak_calls/mouse$ ./lower_wig2fa.pl -i Mouse_ESC.wig ; stochhmm -seq Mouse_ESC.wig.customfa -model GA_StochHMM_DRIP_7state_model_25run50pop_FINAL.hmm -posterior -threshold 0.9 -gff > OUT_Mouse_ESC.wig.customfa.gff



also running DRIP HeLa

aparna@zeus:~/DATA/GA/final_peak_calls/DRIP$ stochhmm -seq DRIP_HeLa.wig.customfa -model GA_StochHMM_DRIP_7state_model_25run50pop_FINAL.hmm -posterior -threshold 0.9 -gff OUT_DRIP_HeLa.gff 

6.19.14

DRIP2 peak adjustment with restriction fragments
scp over DRIP2_restriction_fragments.txt : from genome browser 
___

stopping above, calling peaks on DRIP1, then do strigent intersect with DRIP2, take that file as final. 

first need to figure out normalization.

DRIP1 should be run with lower_wig2fa max on chr8 is 102 which is similar to DRIPc max

aparna@zeus:/data/wearn/NT2_drip/Macs/NT2_drip1_MACS_wiggle/treat$ cp NT2_drip1_treat_afterfiting_all.wig.gz /data/aparna/GA/final_peak_calls/

aparna@zeus:/data/aparna/GA/final_peak_calls/DRIP$ cp ../NT2_drip1_treat_afterfiting_all.wig.gz DRIP1/
aparna@zeus:/data/aparna/GA/final_peak_calls/DRIP$ cp ../DRIPc/lower_wig2fa.pl DRIP1/

do
stochhmm -model DRIPc_Final_StochHMM_25runs50pop_GA_fromDRIP_plusbothtrained.hmm -seq $f -posterior -threshold 0.9 -gff > $f.peaks

aparna@zeus:/data/aparna/GA/final_peak_calls/DRIP/DRIP1$ ./lower_wig2fa.pl -i NT2_drip1_treat_afterfiting_all.wig 

need to re-do replication origin overlaps with new clean (<100bp removed peaks). 

location of peak files
aparna@zeus:/data/wearn/NT2_dripc/Peaks$

aparna@zeus:/data/aparna/GA/final_peak_calls/DRIP/DRIP1$ cp ../GA_StochHMM_DRIP_7state_model_25run50pop_FINAL.hmm .

aparna@zeus:/data/aparna/GA/final_peak_calls/DRIP/DRIP1$ stochhmm -model GA_StochHMM_DRIP_7state_model_25run50pop_FINAL.hmm -seq NT2_drip1_treat_afterfiting_all.wig.customfa -posterior -threshold 0.9 -gff > NT2_DRIP1_peaks.gff

for edgeR normalization :
create bins of certain size across genome
map DRIP2 and DRIP1 to bins
input DRIP1 as "reference" column
use TMM

aparna@zeus:/data/aparna/GA/final_peak_calls/R$ bedtools makewindows -g hg19.genome -w 1000 > 1000_windows_genome.bed

how to include the mitochy.pm
perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl 

perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w ../DRIP/DRIP1/NT2_drip1_treat_afterfiting_all.wig -v -r DRIP1_cache/ 1000_windows_genome.bed 

DRIP1 has very specific peaks, like DRIPc. Try to normalize?

6.20.13
Done mapping, but how will normalization matrix go back to original data?

> calcNormFactors(drip1short, method=c("TMM"), refColumn=newref)
[1] 0.9821987 1.0181240

multiply drip1 by 0.9.. will reduce it further.

Maybe try stringent intersect of DRIP1, DRIP2

aparna@zeus:/data/aparna/GA/final_peak_calls/DRIP/DRIP1$ convert.sh NT2_DRIP1_peaks.gff NT2_DRIP1_peaks.bed 

aparna@zeus:/data/aparna/GA/final_peak_calls/DRIP/DRIP1$ cp NT2_DRIP1_peaks.bed ../../peaks/
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ bedtools intersect -a NT2_DRIP1_peaks.bed -b NT2_DRIP2_finalpeaks.bed > DRIP_stringent_12_intersect.bed

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ bedtools intersect -a NT2_DRIP1_peaks.bed -b NT2_DRIP2_finalpeaks.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
92437623

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ awk '{print $3 - $2}' NT2_DRIP1_peaks.bed| awk '{sum+=$1} END {print sum}'  
112735413
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ awk '{print $3 - $2}' NT2_DRIP2_finalpeaks.bed| awk '{sum+=$1} END {print sum}'  
194806112

> 92437623/112735413*100
[1] 81.9952
> 92437623/194806112*100
[1] 47.45109


Try again with even lower wig2fa
  return("N") if $number == 0;
  return("L") if $number <= 3;
  return("O") if $number <= 5;
  return("M") if $number <= 10;
  return("H") if $number <= 25;
  return("S") if $number > 25;

aparna@zeus:/data/aparna/GA/final_peak_calls/DRIP/DRIP1$ ./even_lower_wig2fa.pl -i NT2_drip1_treat_afterfiting_all.wig -o NT2_drip1_evenlower.customfa

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ bedtools intersect -a DRIP_stringent_12_intersect.bed -b NT2_DRIPc_all.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
45646539

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ awk '{print $3 - $2}' NT2_DRIPc_all.bed | awk '{sum+=$1} END {print sum}'
148667576
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ awk '{print $3 - $2}' DRIP_stringent_12_intersect.bed | awk '{sum+=$1} END {print sum}'
92437623

> 45646539/148667576*100
[1] 30.70376

> 45646539/92437623*100
[1] 49.38091


aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ bedtools intersect -a DRIP_stringent_12_intersect.bed -b merged_stringent_NT2_DRIPc_all.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
30435984
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ awk '{print $3 - $2}' merged_stringent_NT2_DRIPc_all.bed | awk '{sum+=$1} END {print sum}'
77274662

> 30435984/77274662*100
[1] 39.38676
>  30435984/92437623*100
[1] 32.92597

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ bedtools intersect -a NT2_DRIP1_peaks.bed -b NT2_DRIP2_finalpeaks.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
92437623

stochhmm -model GA_StochHMM_DRIP_7state_model_25run50pop_FINAL.hmm -seq NT2_drip1_evenlower.customfa -posterior -threshold 0.9 -gff > DRIP1_peaks_evenlower.gff

rounding to nearest 1 to make histogram:
aparna@zeus:/data/aparna/GA/final_peak_calls/R$ ./distribution_rounded_outp
ut.pl ../DRIP/DRIP1/NT2_drip1_treat_afterfiting_all.wig 1
aparna@zeus:/data/aparna/GA/final_peak_calls/R$ mv outfile.txt 1_DRIP1_round.txt
aparna@zeus:/data/aparna/GA/final_peak_calls/R$ ./distribution_rounded_outp
ut.pl ../../../DRIP_wigs/DRIP_NT2/DRIP_NT2.wig 1
aparna@zeus:/data/aparna/GA/final_peak_calls/R$ mv outfile.txt 1_DRIP2_rounded.txt

wrote wig2bed.pl : 
aparna@zeus:/data/aparna/GA/final_peak_calls/R$ ./wig2bed.pl ../DRIP/DRIP1/NT2_drip1_treat_afterfiting_all.wig
VERY heavy, need to re-do with lowmem

edgeR
> library(edgeR)
> drip1new<-drip1[1:4]
> drip1new[is.na(drip1new)]<-0
> drip1short<-data.frame(drip1new$V2, drip1new$V4)
> newref<-drip2$V4
> newref[is.na(newref)] <- 0
> calcNormFactors(drip1short, method=c("TMM"), refColumn=newref)


Correlation DRIP1 and DRIP2 : 1000bp bins
> cor(all)
          drip1_val drip2_val
drip1_val 1.0000000 0.7770226
drip2_val 0.7770226 1.0000000

6.23.14

DRIP1 evenlower run done, outfile is DRIP1_peaks_evenlower.gff
aparna@zeus:/data/aparna/GA/final_peak_calls/DRIP/DRIP1$ convert.sh DRIP1_peaks_evenlower.gff DRIP1_peaks_evenlower.bed 

aparna@zeus:/data/aparna/GA/final_peak_calls/R$ parse_wig.pl ../DRIP/DRIP1/NT2_drip1_treat_afterfiting_all.wig chr8
aparna@zeus:/data/aparna/GA/final_peak_calls/R$ ./wig2bed.pl chr8.wig 

chr8 of DRIP1
> summary(vals)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.000   1.000   1.000   1.652   2.000 102.000 
> length(vals)
[1] 3996807
> table_vals<-table(vals)
> head(table_vals)
vals
      1       2       3       4       5       6 
2934460  598030  193013   91202   52588   33323 
> 3996807*.1
[1] 399680.7
> 3996807*.15
[1] 599521
> ten<-vals[vals > 2]
> summary(ten)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  3.000   3.000   4.000   5.324   6.000 102.000 


aparna@zeus:/data/aparna/GA/final_peak_calls/R$ mv chr8.wig DRIP1_chr8.wig
aparna@zeus:/data/aparna/GA/final_peak_calls/R$ ./wig2bed.pl ../../../DRIP_wigs/DRIP_NT2/chr8.wig
aparna@zeus:/data/aparna/GA/final_peak_calls/R$ mv wig2bed_outfile.txt DRIP_NT2.wig2bed.out

DRIP_NT2
> summary(nt2_vals)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  2.016   2.984   3.992   6.303   5.961 253.000
> rounded<-round(nt2_vals)
> length(rounded)*.1
[1] 267018.5
> table_nt2_vals<-table(rounded)
> head(table_nt2_vals)
rounded
      2       3       4       5       6       7 
    813 1017748  538127  294105  177814  121100 
> rounded<-rounded[rounded>5]
> summary(rounded)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   6.00    7.00    9.00   12.56   14.00  253.00
> 9/4
[1] 2.25
# this is the value to shift up DRIP1 by? It seems right, max on chr8 for DRIP1 is ~100, max on chr8 for DRIP2 is ~250.
#or multiply all wig2fa vals by 1/2.25?

wrote script shift_wig.pl
aparna@zeus:/data/aparna/GA/final_peak_calls/R$ ./shift_wig.pl ../DRIP/DRIP
1/NT2_drip1_treat_afterfiting_all.wig 2.25

aparna@zeus:/data/aparna/GA/final_peak_calls/R$ mv shift.out DRIP1_shifted_2.25.wig

aparna@zeus:/data/aparna/GA/final_peak_calls/R$ mv DRIP1_shifted_2.25.wig ../DRIP/DRIP1/

aparna@zeus:/data/aparna/GA/final_peak_calls/DRIP/DRIP1$ ./wig2fa.pl -i DRIP1_shifted_2.25.wig 

aparna@zeus:/data/aparna/GA/final_peak_calls/R$ cp shift_wig.pl ../../../scripts/

aparna@zeus:/data/aparna/GA/final_peak_calls/DRIP/DRIP1$ stochhmm -seq DRIP1_shifted_2.25.wig.customfa -model GA_StochHMM_DRIP_7state_model_25run50pop_FINAL.hmm -posterior -threshold 0.9 -gff > DRIP1_shifted_2.25.gff

6.24.14

aparna@zeus:/data/aparna/GA/final_peak_calls/DRIP/DRIP1$ bedtools intersect -a DRIP1_shifted_2.25.bed -b ../../peaks/NT2_DRIP2_finalpeaks.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
105255617

aparna@zeus:/data/aparna/GA/final_peak_calls/DRIP/DRIP1$ awk '{print $3 - $2}' DRIP1_shifted_2.25.bed| awk '{sum+=$1} END {print sum}'
135773408
aparna@zeus:/data/aparna/GA/final_peak_calls/DRIP/DRIP1$ awk '{print $3 - $2}' ../../peaks/NT2_DRIP2_finalpeaks.bed| awk '{sum+=$1} END {print sum}'
194806112

> 105255617/135773408*100
[1] 77.523
> 105255617/194806112*100
[1] 54.03096

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ cp ../DRIP/DRIP1/DRIP1_shifted_2.25.bed .

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ bedtools intersect -a NT2_DRIP2_finalpeaks.bed -b DRIP1_shifted_2.25.bed > DRIP_stringent_intersect_shifted.bed

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ bedtools intersect -a D
RIP_stringent_intersect_shifted.bed -b /data/wearn/NT2_dripc/Peaks/NT2_dripc_merged.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
63347509

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ awk '{print $3 - $2}' /data/wearn/NT2_dripc/Peaks/NT2_dripc_merged.bed | awk '{sum+=$1} END {print sum}'
223612753
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ awk '{print $3 - $2}' DRIP_stringent_intersect_shifted.bed| awk '{sum+=$1} END {print sum}'
105255635

> 63347509/223612753*100
[1] 28.32911
> 63347509/105255635*100
[1] 60.18443

running run.pl for 
  my $cmd = "bedtools shuffle -chrom -excl ../../gaps_hg19.bed -i ../common_early_origins_ENCODE.bed -g ../hg19.genome > temp_$i ; bedtools intersect -wo -a temp_$i -b /data/wearn/NT2_dripc/Peaks/NT2_dripc_merged.bed | awk '{print \$7}' | awk '{sum+=\$1} END {print sum}' >> 1mil_simulation_GA_StochHMM_peaks_Merged_DRIPc_early.txt ; rm temp_$i";

slightly rewrote run.pl to take in cli params
aparna@zeus:/data/aparna/replication_origins/s50/stats/another_run/GA_dripc_early$ ./run.pl early /data/wearn/NT2_dripc/Peaks/NT2_dripc_merged.bed 1mil_simulation_GA_StochHMM_peaks_Merged_DRIPc_early.txt

#next run (not started)
aparna@zeus:/data/aparna/replication_origins/s50/stats/another_run/GA_dripc_late$ ./run.pl late /data/wearn/NT2_dripc/Peaks/NT2_dripc_merged.bed 1mil_simulation_GA_StochHMM_peaks_Merged_DRIPc_early.txt

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ bedLength.pl DRIP1_shifted_2.25.bed 100 > DRIP1_shifted_2.25_clean.bed 
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ bedLength.pl NT2_DRIP2_finalpeaks.bed 100 > NT2_DRIP2_finalpeaks_clean.bed 

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ bedtools intersect -a DRIP1_shifted_2.25_clean.bed -b NT2_DRIP2_finalpeaks_clean.bed > DRIP_stringent_intersect_shifted_clean.bed 


wrote new script to control all the runs of simulations : run_simulations.sh

6.25.14

GA new dripc early : first 1mil of file
> summary(mil)
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
15760000 19130000 19700000 19710000 20280000 23530000 

> summary(mil/223612753*100)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  7.047   8.553   8.810   8.813   9.070  10.520 

aparna@zeus:/data/aparna/replication_origins/s50/stats$ bedtools intersect -a /data/wearn/NT2_dripc/Peaks/NT2_dripc_merged.bed -b ../origin_files/common_origins/common_early_origins_ENCODE.bed | awk '{print $3 - $2}' | awk '{sum+= $1} END {print sum}'
30607240

> 30607240/223612753*100
[1] 13.68761

Starting histone analysis with H3K4Me3
aparna@zeus:/data/aparna/Histone_correlations/H3K4Me3$ perl -I /usr/local/b
in/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w data/wgEncodeSydhHistoneNt2d1H3k4me3bUcdSig.bedgraph.wig -v -r data/cache/ /data/wearn/NT2_dripc/Peaks/NT2_dripc_merged.bed 

1. Output of /data/wearn/NT2_dripc/Peaks/NT2_dripc_merged.bed: .//wgEncodeSydhHistoneNt2d1H3k4me3bUcdSig_NT2_dripc_merged.txt

DRIPc merged late
> summary(mil)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
4459000 6202000 6557000 6560000 6912000 9142000 

> summary(mil/223612753*100)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.994   2.773   2.932   2.934   3.091   4.088 

DRIPc early/late
> summary(milearly/mil)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.975   2.828   3.005   3.024   3.200   4.966 

aparna@zeus:/data/aparna/replication_origins/s50$ bedtools intersect -a /data/wearn/NT2_dripc/Peaks/NT2_dripc_merged.bed -b origin_files/common_origins/common_late_origins_ENCODE.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
782600

aparna@zeus:/data/aparna/replication_origins/s50$ awk '{print $3 - $2}' /data/wearn/NT2_dripc/Peaks/NT2_dripc_merged.bed| awk '{sum+=$1} END {print sum}'
223612753

late_overlap/dripc
> 782600/223612753*100
[1] 0.34998

early_dripc/late_dripc
> 30607240/782600
[1] 39.10969


1. Output of /data/wearn/NT2_dripc/Peaks/NT2_dripc_merged.bed: .//NT2_dripc_treat_afterfiting_all_NT2_dripc_merged.txt

# H3K4Me3
>  cor(data.frame(dripc$V4, histone$V4), use="complete.obs", method="pearson") 
            dripc.V4 histone.V4
dripc.V4   1.0000000  0.1501249
histone.V4 0.1501249  1.0000000

6.26.14

parna@zeus:/data/aparna$ bedtools intersect -a GA/final_peak_calls/peaks/NT2_DRIPc_all.bed -b replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
21214447
aparna@zeus:/data/aparna$ bedtools intersect -a GA/final_peak_calls/peaks/NT2_DRIPc_all.bed -b replication_origins/s50/origin_files/common_origins/common_late_origins_ENCODE.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
380894

> 21214447/380894
[1] 55.69646

DRIPc called from individual files then merged (NT2_DRIPc_all from GA/final_peak_calls/peaks on avg has higher mean/median

# from GA/final_peak_calls/peaks/NT2_DRIPc_all.txt
> summary(mydripc) 
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
  2.000   8.224  10.470  11.890  13.750 332.300    7175
# from ywl's folder 
> summary(mergedripc)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
  2.000   6.468   7.895   9.368  10.380 321.400   10334
# SICER
> summary(sicerdripc)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
  4.059   6.987   8.804  10.610  11.850 336.200       9 

Why are there NAs???

> summary(mydripc_plus$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
  1.000   1.347   5.516   6.242   9.195 175.500    3401
> summary(mergedripc_plus$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
  1.000   1.290   4.431   4.898   6.641 159.400    4899 
> summary(sicerdripc_plus$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
  1.000   1.362   4.692   5.401   7.465 176.400       2 

> summary(mydripc_minus$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
  1.000   1.274   4.592   5.884   8.884 162.000    3790 
> summary(mergedripc_minus$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
  1.000   1.218   3.382   4.603   6.392 162.000    5436 
> summary(sicerdripc_minus$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
  1.000   1.341   4.420   5.212   7.279 175.100       7

parna@zeus:/data/aparna/GA/final_peak_calls/peaks$ bedtools intersect -a merged_stringent_NT2_DRIPc_all.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
11501407
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ bedtools intersect -a merged_stringent_NT2_DRIPc_all.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_late_origins_ENCODE.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
129212

> 11501407/129212
[1] 89.01191
# even better than SICER! use this
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ bedLength.pl merged_stringent_NT2_DRIPc_all.bed 100 > merged_stringent_NT2_DRIPc_all_clean.bed 
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ bedLength.pl NT2_DRIPc_all.bed 100 > NT2_DRIPc_all_clean.bed 
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ mv NT2_DRIPc_all_clean.bed merged_stringent_NT2_DRIPc_all_clean.bed clean/

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ mv DRIP1_shifted_2.25_clean.bed NT2_DRIP1_peaks.bed
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ mv DRIP_stringent_intersect_shifted_clean.bed NT2_DRIP_intersect_peaks.bed
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ mv NT2_DRIP2_finalpeaks_clean.bed NT2_DRIP2_peaks.bed
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ mv merged_stringent_NT2_DRIPc_all_clean.bed NT2_DRIPc_merged_rep12_intersect_peaks.bed
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ mv NT2_DRIPc_all_clean.bed NT2_DRIPc_merged_rep12_peaks.bed

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ l
NT2_DRIP1_peaks.bed           NT2_DRIPc_merged_rep12_intersect_peaks.bed
NT2_DRIP2_peaks.bed           NT2_DRIPc_merged_rep12_peaks.bed
NT2_DRIP_intersect_peaks.bed

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ awk '{print $1 "\t" $2 "\t" $3 "\t" $4 "\t" ".\t.\t-"}' stringent_NT2_DRIPc_minus_both.bed > stringent_NT2_DRIPc_minus_both_strandinfo.bed 
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ awk '{print $1 "\t" $2 "\t" $3 "\t" $4 "\t" ".\t.\t+"}' stringent_NT2_DRIPc_plus_both.bed > stringent_NT2_DRIPc_plus_both_strandinfo.bed

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ cat stringent_NT2_DRIPc_minus_both_strandinfo.bed stringent_NT2_DRIPc_plus_both_strandinfo.bed > cat_stringent_NT2_DRIPc_both_all_strandinfo.bed


aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ sort -k 1,1 -k 2,2n cat_stringent_NT2_DRIPc_both_all_strandinfo.bed > sorted_cat_stringent_NT2_DRIPc_both_all_strandinfo.bed 

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ bedLength.pl sorted_cat_stringent_NT2_DRIPc_both_all_strandinfo.bed 100 > NT2_DRIPc_strandinfo_rep12_intersect_peaks.bed
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ mv NT2_DRIPc_strandinfo_rep12_intersect_peaks.bed clean/


aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ awk '{print $1 "\t" $2 "\t" $3 "\t" $4 "\t" ".\t.\t-"}' NT2_DRIPc_minus_both.bed > NT2_DRIPc_minus_both_strandinfo.bed 

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ awk '{print $1 "\t" $2 "\t" $3 "\t" $4 "\t" ".\t.\t+"}' NT2_DRIPc_plus_both.bed > NT2_DRIPc_plus_both_strandinfo.bed 

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ cat NT2_DRIPc_plus_both_strandinfo.bed NT2_DRIPc_minus_both_strandinfo.bed > cat_NT2_DRIPc_both_all_strandinfo.bed

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ sort -k 1,1 -k 2,2n cat_NT2_DRIPc_both_all_strandinfo.bed > sorted_cat_NT2_DRIPc_both_all_strandinfo.bed 
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ bedLength.pl sorted_cat_NT2_DRIPc_both_all_strandinfo.bed 100 > NT2_DRIPc_strandinfo_rep12_merge_peaks.bed
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ mv NT2_DRIPc_strandinfo_rep12_merge_peaks.bed clean/

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ l 
NT2_DRIP1_peaks.bed
NT2_DRIP2_peaks.bed
NT2_DRIP_intersect_peaks.bed
NT2_DRIPc_merged_rep12_intersect_peaks.bed
NT2_DRIPc_merged_rep12_peaks.bed
NT2_DRIPc_strandinfo_rep12_intersect_peaks.bed
NT2_DRIPc_strandinfo_rep12_merge_peaks.bed


# attempt to correlate wig file height to overlap of origins
aparna@zeus:/data/aparna$ bedtools intersect -wao -a GA/final_peak_calls/peaks/clean/NT2_DRIPc_merged_rep12_intersect_peaks.bed -b replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed | awk '{print $7}' > NT2_DRIPc_merged_rep12_intersect_peaks_common_early_peak_overlap.txt

aparna@zeus:/data/aparna$ bedtools intersect -wao -a GA/final_peak_calls/peaks/clean/NT2_DRIPc_merged_rep12_intersect_peaks.bed -b replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed | awk '{print $7 / ($3 - $2)}' > NT2_DRIPc_merged_rep12_intersect_peaks_common_early_peak_overlap_percent.txt

aparna@zeus:/data/aparna$ bedtools intersect -wao -a GA/final_peak_calls/peaks/clean/NT2_DRIPc_merged_rep12_intersect_peaks.bed -b replication_origins/s50/origin_files/common_origins/common_late_origins_ENCODE.bed | awk '{print $7 / ($3 - $2)}' > NT2_DRIPc_merged_rep12_intersect_peaks_common_late_peak_overlap_percent.txt

aparna@zeus:/data/aparna$ bedtools intersect -wao -a GA/final_peak_calls/peaks/clean/NT2_DRIPc_merged_rep12_intersect_peaks.bed -b replication_origins/s50/origin_files/common_origins/common_late_origins_ENCODE.bed | awk '{print $7}' > NT2_DRIPc_merged_rep12_intersect_peaks_common_late_peak_overlap.txt

### didn't work, no correlation

# for simulation runs
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ bedLength.pl stringent_NT2_DRIPc_plus_both.bed 100 > clean/split_strands_intersect/NT2_DRIP_intersect_peaks_plus.bed
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks$ bedLength.pl stringent_NT2_DRIPc_minus_both.bed 100 > clean/split_strands_intersect/NT2_DRIP_intersect_peaks_minus.bed

rewrote script run_simulations_intersectpeaks.sh to re-run all DRIPc simulations with rep1/rep2 intersect (peak_intersect).


## Seeing if DRIPc peaks with at least 1 overlap have higher avg height than those that do not overlap at least once
aparna@zeus:/data/aparna$ bedtools intersect -a GA/final_peak_calls/peaks/clean/NT2_DRIPc_merged_rep12_intersect_peaks.bed -b replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed > NT2_DRIPc_intersect_intersected_common_early.bed

aparna@zeus:/data/aparna$ bedtools intersect -v -a GA/final_peak_calls/peaks/clean/NT2_DRIPc_merged_rep12_intersect_peaks.bed -b replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed > NT2_DRIPc_intersect_-v_nointersected_common_early.bed

aparna@zeus:/data/aparna$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/m
ap_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_plus_MACS_wiggle/treat/NT2_dripc_plus_treat_afterfiting_all.wig -v -r cache_plus/ NT2_DRIPc_intersect_intersected_common_early.bed

1. Output of NT2_DRIPc_intersect_intersected_common_early.bed: .//NT2_dripc_plus_treat_afterfiting_all_NT2_DRIPc_intersect_intersected_common_early.txt

aparna@zeus:/data/aparna$  perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_minus_MACS_wiggle/treat/NT2_dripc_minus_treat_afterfiting_all.wig -v -r cache_minus/ NT2_DRIPc_intersect_intersected_common_early.bed

1. Output of NT2_DRIPc_intersect_intersected_common_early.bed: .//NT2_dripc_minus_treat_afterfiting_all_NT2_DRIPc_intersect_intersected_common_early.txt


aparna@zeus:/data/aparna$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_minus_MACS_wiggle/treat/NT2_dripc_minus_treat_afterfiting_all.wig -v -r cache_minus/ NT2_DRIPc_intersect_-v_nointersected_common_early.bed

1. Output of NT2_DRIPc_intersect_-v_nointersected_common_early.bed: .//NT2_dripc_minus_treat_afterfiting_all_NT2_DRIPc_intersect_-v_nointersected_common_early.txt

aparna@zeus:/data/aparna$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_plus_MACS_wiggle/treat/NT2_dripc_plus_treat_afterfiting_all.wig -v -r cache_plus/ NT2_DRIPc_intersect_-v_nointersected_common_early.bed

1. Output of NT2_DRIPc_intersect_-v_nointersected_common_early.bed: .//NT2_dripc_plus_treat_afterfiting_all_NT2_DRIPc_intersect_-v_nointersected_common_early.txt


Slightly lower no-intersect mean/median, not by much
##

##
Next, take those peaks with at least one intersect and try to correlate height and early origins intersection

aparna@zeus:/data/aparna$ bedtools intersect -wao -a NT2_DRIPc_intersect_intersected_common_early.bed -b replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed | awk '{print $7 / ($3 - $2)}' > NT2_DRIPc_intersect_intersected_early_percent.txt

Somehow everything is 100%
##

6.27.14

##repeating above with common late

aparna@zeus:/data/aparna$ bedtools intersect -a GA/final_peak_calls/peaks/clean/NT2_DRIPc_merged_rep12_intersect_peaks.bed -b replication_origins/s50/origin_files/common_origins/common_late_origins_ENCODE.bed > NT2_DRIPc_intersect_intersected_common_late.bed
aparna@zeus:/data/aparna$ bedtools intersect -v -a GA/final_peak_calls/peaks/clean/NT2_DRIPc_merged_rep12_intersect_peaks.bed -b replication_origins/s50/origin_files/common_origins/common_late_origins_ENCODE.bed > NT2_DRIPc_intersect_-v_nointersected_common_late.bed

aparna@zeus:/data/aparna$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_plus_MACS_wiggle/treat/NT2_dripc_plus_treat_afterfiting_all.wig -v -r cache_plus/ NT2_DRIPc_intersect_intersected_common_late.bed

1. Output of NT2_DRIPc_intersect_intersected_common_late.bed: .//NT2_dripc_plus_treat_afterfiting_all_NT2_DRIPc_intersect_intersected_common_late.txt

aparna@zeus:/data/aparna$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_minus_MACS_wiggle/treat/NT2_dripc_minus_treat_afterfiting_all.wig -v -r cache_minus/ NT2_DRIPc_intersect_intersected_common_late.bed

1. Output of NT2_DRIPc_intersect_intersected_common_late.bed: .//NT2_dripc_minus_treat_afterfiting_all_NT2_DRIPc_intersect_intersected_common_late.txt

aparna@zeus:/data/aparna$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_plus_MACS_wiggle/treat/NT2_dripc_plus_treat_afterfiting_all.wig -v -r cache_plus/ NT2_DRIPc_intersect_-v_nointersected_common_late.bed

1. Output of NT2_DRIPc_intersect_-v_nointersected_common_late.bed: .//NT2_dripc_plus_treat_afterfiting_all_NT2_DRIPc_intersect_-v_nointersected_common_late.txt

aparna@zeus:/data/aparna$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_minus_MACS_wiggle/treat/NT2_dripc_minus_treat_afterfiting_all.wig -v -r cache_minus/ NT2_DRIPc_intersect_-v_nointersected_common_late.bed

1. Output of NT2_DRIPc_intersect_-v_nointersected_common_late.bed: .//NT2_dripc_minus_treat_afterfiting_all_NT2_DRIPc_intersect_-v_nointersected_common_late.txt

there is a difference with late. See boxplots on tiddlywiki.
##

aparna@zeus:/data/aparna/replication_origins/s50/stats/another_run$ ./run_simulations_intersectpeaks.sh 
  this will also run DRIP correctly

Need to make a combined wig for DRIP, repeat all mapping of origins with DRIP

aparna@zeus:~/DATA/DRIP1_DRIP2$ wig2bed NT2_drip1_treat_afterfiting_all.wig > DRIP1.bed

aparna@zeus:~/DATA/DRIP1_DRIP2$ wig2bed NT2_drip2_treat_afterfiting_all.wig > DRIP2.bed

aparna@zeus:~/DATA/DRIP1_DRIP2$ cat DRIP1.bed DRIP2.bed > DRIP.bed

wrote script sort_large_bed.pl
aparna@zeus:/data/aparna/DRIP_wigs/DRIP1_DRIP2$ ./sort_large_bed.pl DRIP_chrs.txt DRIP.bed 

aparna@zeus:/data/aparna/DRIP_wigs/DRIP1_DRIP2$ bedtools merge -scores sum -i DRIP.bed_.sorted > merge_DRIP.bed

aparna@zeus:/data/aparna/DRIP_wigs/DRIP1_DRIP2$ cp sort_large_bed.pl /data/aparna/scripts

6.30.14

Making venn diagram

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ bedtools intersect -a NT2_DRIP1_peaks.bed -b NT2_DRIP2_peaks.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
105202966
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ awk '{print $3 - $2}' NT2_DRIP1_peaks.bed | awk '{sum+=$1} END {print sum}'
135685248
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ awk '{print $3 - $2}' NT2_DRIP2_peaks.bed | awk '{sum+=$1} END {print sum}'
194760170

> 135685248-105202966
[1] 30482282
> 194760170-105202966
[1] 89557204
> 30482282/1000000
[1] 30.48228
> 89557204/1000000
[1] 89.5572
> 30482282/1000000
[1] 30.48228

[aparna@archlinux venn]$ for i in {0..29} ; do echo "DRIP1_$i" >> DRIP1.txt ; done
[aparna@archlinux venn]$ for i in {0..88} ; do echo "DRIP2_$i" >> DRIP2.txt ; done
[aparna@archlinux venn]$ for i in {0..29} ; do echo "DRIP1DRIP2_$i" >> DRIP1.txt ; done
[aparna@archlinux venn]$ for i in {0..29} ; do echo "DRIP1DRIP2_$i" >> DRIP2.txt ; done


#strand specific intersect
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ bedtools intersect -s -a NT2_DRIPc_rep1_both.bed -b NT2_DRIPc_rep2_both.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
79152742

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ awk '{print $3 - $2}' NT2_DRIPc_rep1_both.bed | awk '{sum+=$1} END {print sum}'
130641652
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ awk '{print $3 - $2}' NT2_DRIPc_rep2_both.bed | awk '{sum+=$1} END {print sum}'
101797727

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ bedtools intersect -a NT2_DRIPc_merged_rep12_intersect_peaks.bed -b NT2_DRIP_intersect_peaks.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
33413451
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ awk '{print $3 - $2}' NT2_DRIPc_merged_rep12_intersect_peaks.bed| awk '{sum+=$1} END {print sum}'
77164470
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ awk '{print $3 - $2}' NT2_DRIP_intersect_peaks.bed| awk '{sum+=$1} END {print sum}'
105202966


aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ bedtools intersect -a NT2_DRIPc_merged_rep12_peaks.bed -b NT2_DRIP_merge_peaks.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
86929587
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ awk '{print $3 - $2}' NT2_DRIPc_merged_rep12_peaks.bed| awk '{sum+=$1} END {print sum}'
148579333
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ awk '{print $3 - $2}' NT2_DRIP_merge_peaks.bed| awk '{sum+=$1} END {print sum}'
225242452

## Simulations done!

## DRIP ##

> drip_early<-read.delim("GA_drip_early/1mil_simulation_GA_StochHMM_peaks_DRIP_Intersect_early.txt", header=F)
> summary(drip_early$V1)
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
 7697000 10480000 11040000 11060000 11610000 14850000
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ awk '{print $3 - $2}' NT2_DRIP_intersect_peaks.bed  | awk '{sum+=$1} END {print sum}'
105202966
> summary(drip_early$V1/105202966*100)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  7.316   9.964  10.490  10.510  11.040  14.120

> summary(drip_late$V1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
1094000 2096000 2357000 2380000 2642000 4275000 
> summary(drip_late$V1/105202966*100)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.040   1.993   2.240   2.262   2.512   4.063 

> summary(drip_early$V1/drip_late$V1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  2.080   4.132   4.682   4.784   5.323  11.430



aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ bedtools intersec
t -a NT2_DRIP_intersect_peaks.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
26325118
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ bedtools intersect -a NT2_DRIP_intersect_peaks.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_late_origins_ENCODE.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
25894

> 26325118/25894
[1] 1016.649

> 26325118/105202966*100 
[1] 25.02317
> 25894/105202966*100
[1] 0.02461337


## DRIPc ##
> dripc_early<-read.delim("GA_dripc_early/1mil_simulation_GA_StochHMM_peaks_Intersect_DRIPc_early.txt", header=F)
> dripc_late<-read.delim("GA_dripc_late/1mil_simulation_GA_StochHMM_peaks_Intersect_DRIPc_late.txt", header=F)
> summary(dripc_early$V1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
5393000 6664000 6905000 6910000 7152000 8668000 
> summary(dripc_late$V1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
1401000 2026000 2168000 2171000 2311000 3051000

> summary(dripc_early$V1/77164470*100)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  6.988   8.636   8.949   8.955   9.268  11.230 
> summary(dripc_late$V1/77164470*100)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.815   2.625   2.809   2.814   2.995   3.954 
> summary(dripc_early$V1/dripc_late$V1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.968   2.960   3.187   3.213   3.437   5.759 


aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ bedtools intersec
t -a NT2_DRIPc_merged_rep12_intersect_peaks.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
11483112

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ bedtools intersect -a NT2_DRIPc_merged_rep12_intersect_peaks.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_late_origins_ENCODE.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
128759


aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ awk '{print $3 - $2}' NT2_DRIPc_merged_rep12_intersect_peaks.bed | awk '{sum+=$1} END {print sum}'
77164470

> 11483112/128759
[1] 89.18299

## DRIPc Plus ##
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ awk '{print $3 - 
$2}' split_strands_intersect/NT2_DRIP_intersect_peaks_plus.bed | awk '{sum+=$1} END {print sum}'
41055475

> dripc_plus_early<-read.delim("GA_dripc_plus_early/1mil_simulation_GA_StochHMM_peaks_DRIPc_plus_Intersect_early.txt", header=F)
> dripc_plus_late<-read.delim("GA_dripc_plus_late/1mil_simulation_GA_StochHMM_peaks_DRIPc_plus_Intersect_late.txt", header=F)
> summary(dripc_plus_early$V1/41055475*100)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  6.573   8.542   8.961   8.970   9.383  11.530 
> summary(dripc_plus_late$V1/41055475*100)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.491   2.555   2.795   2.805   3.040   4.575 
> summary(dripc_plus_early$V1/dripc_plus_late$V1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.597   2.910   3.206   3.252   3.544   6.870 

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ bedtools intersect -a split_strands_intersect/NT2_DRIP_intersect_peaks_plus.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed | awk '{print $3 - $2}'| awk '{sum+=$1} END {print sum}'
6282559
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ bedtools intersect -a split_strands_intersect/NT2_DRIP_intersect_peaks_plus.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_late_origins_ENCODE.bed | awk '{print $3 - $2}'| awk '{sum+=$1} END {print sum}'
23671

> 6282559/23671   
[1] 265.4116

## DRIPc minus ##

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ bedtools intersect -a split_strands_intersect/NT2_DRIP_intersect_peaks_minus.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed | awk '{print $3 - $2}'| awk '{sum+=$1} END {print sum}'
5605101


aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ bedtools intersect -a split_strands_intersect/NT2_DRIP_intersect_peaks_minus.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_late_origins_ENCODE.bed | awk '{print $3 - $2}'| awk '{sum+=$1} END {print sum}'
105088

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean$ awk '{print $3 - $2}' split_strands_intersect/NT2_DRIP_intersect_peaks_minus.bed | awk '{sum+=$1} END {print sum}'
38058094

> dripc_minus_early<-read.delim("GA_dripc_minus_early/1mil_simulation_GA_StochHMM_peaks_DRIPc_minus_Intersect_early.txt", header=F)
> dripc_minus_late<-read.delim("GA_dripc_minus_late/1mil_simulation_GA_StochHMM_peaks_DRIPc_minus_Intersect_late.txt", header=F)
> summary(dripc_minus_early$V1/38058094*100)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  6.482   8.505   8.924   8.934   9.347  11.620 
> summary(dripc_minus_late$V1/38058094*100)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.497   2.531   2.772   2.785   3.025   4.423 
> summary(dripc_minus_early$V1/dripc_minus_late$V1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.746   2.913   3.218   3.264   3.564   6.823 

> 5605101/38058094*100
[1] 14.72775
> 105088/38058094*100
[1] 0.2761252

> 5605101/105088
[1] 53.33721


####
make scatterplot of the DRIPc DRIP venn diagram :
DRIP that does not intersect DRIPc
DRIPc that does not intersect DRIP
DRIPc/DRIP that stringently intersects

map each to wigs and plot
##

Venn diagram code:
#pdf
> pdf("venn/test.pdf")
> venn.plot <- draw.pairwise.venn(130.6, 101.8, 79.2, c("DRIPc rep1", "DRIPc rep2"), fill=c("red", "blue"));
> grid.arrange(gTree(children=venn.plot), main="DRIPc rep1 rep2", sub="bp overlap in Mb")
> dev.off()

#tiff
> tiff(filename="venn/tiff/DRIPc_rep1_rep2_venn.tiff", compression="lzw")
> venn.plot <- draw.pairwise.venn(130.6, 101.8, 79.2, c("DRIPc rep1", "DRIPc rep2"), fill=c("red", "blue"));
> grid.arrange(gTree(children=venn.plot), main="DRIPc rep1 rep2", sub="bp overlap in Mb")
> dev.off()

7.1.14

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean/intersects$ bedtoo
ls intersect -v -a ../NT2_DRIP_merge_peaks.bed -b ../NT2_DRIPc_merged_rep12_peaks.bed > DRIP_notin_DRIPc_merge.bed
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean/intersects$ bedtools intersect -v -b ../NT2_DRIP_merge_peaks.bed -a ../NT2_DRIPc_merged_rep12_peaks.bed > DRIPc_notin_DRIP_merge.bed
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean/intersects$ bedtools intersect -b ../NT2_DRIP_merge_peaks.bed -a ../NT2_DRIPc_merged_rep12_peaks.bed > DRIPc_DRIP_intersectpeaks_merge.bed


aparna@zeus:/data/aparna/mapping/mapping_DRIP_DRIPc_peaks$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/aparna/NT2_drip1_treat_afterfiting_all.wig -v -r /data/aparna/cache_drip1/ /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIP_notin_DRIPc_merge.bed

aparna@zeus:~/DATA/mapping/mapping_DRIP_DRIPc_peaks$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/aparna/NT2_drip2_treat_afterfiting_all.wig -v -r /data/aparna/cache_drip2/ /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIP_notin_DRIPc_merge.bed

replication origins intersect with peaks files in /data/aparna/GA/final_peaks/peaks/clean/origin*

6.2.14

aparna@zeus:/data/aparna/mapping/mapping_DRIP_DRIPc_peaks$ perl -I /usr/loc
al/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/aparna/NT2_drip2_treat_afterfiting_all.wig -v -r /data/aparna/cache_drip2/ /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_DRIP_intersectpeaks_merge.bed
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_DRIP_intersectpeaks_merge.bed: .//NT2_drip1_treat_afterfiting_all_DRIPc_DRIP_intersectpeaks_merge.txt


aparna@zeus:/data/aparna$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/aparna/NT2_drip1_treat_afterfiting_all.wig -v -r /data/aparna/cache_drip1/ /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_DRIP_intersectpeaks_merge.bed
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_notin_DRIP_merge.bed: .//NT2_drip1_treat_afterfiting_all_DRIPc_notin_DRIP_merge.txt

aparna@zeus:/data/aparna$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/aparna/NT2_drip1_treat_afterfiting_all.wig -v -r /data/aparna/cache_drip1/ /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_notin_DRIP_merge.bed

aparna@zeus:/data/aparna/mapping/mapping_DRIP_DRIPc_peaks$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/aparna/NT2_drip2_treat_afterfiting_all.wig -v -r /data/aparna/cache_drip2/ /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_notin_DRIP_merge.bed 
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_notin_DRIP_merge.bed: .//NT2_drip2_treat_afterfiting_all_DRIPc_notin_DRIP_merge.txt
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_DRIP_intersectpeaks_merge.bed: .//NT2_drip1_treat_afterfiting_all_DRIPc_DRIP_intersectpeaks_merge.txt

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean/split_strands_inte
rsect$ bedtools intersect -a NT2_DRIPc_intersect_peaks_plus.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed > ../origins_overlap/DRIPc_plus_intersect_int_early.bed

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean/split_strands_inte
rsect$ bedtools intersect -a NT2_DRIPc_intersect_peaks_minus.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed > ../origins_overlap/DRIPc_minus_intersect_int_early.bed

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean/split_strands_inte
rsect$ bedtools intersect -a NT2_DRIPc_intersect_peaks_minus.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_late_origins_ENCODE.bed > ../origins_overlap/DRIPc_minus_intersect_int_late.bed

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean/split_strands_inte
rsect$ bedtools intersect -a NT2_DRIPc_intersect_peaks_plus.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_late_origins_ENCODE.bed > ../origins_overlap/DRIPc_plus_intersect_int_late.bed
 

aparna@zeus:/data/aparna/mapping/mapping_plus_minus_DRIPc_origins$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_plus_MACS_wiggle/treat/NT2_dripc_plus_treat_afterfiting_all.wig -v -r /data/aparna/cache_plus/ /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIPc_plus_intersect_int_early.bed

1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIPc_plus_intersect_int_early.bed: .//NT2_dripc_plus_treat_afterfiting_all_DRIPc_plus_intersect_int_early.txt

aparna@zeus:/data/aparna/mapping/mapping_plus_minus_DRIPc_origins$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_minus_MACS_wiggle/treat/NT2_dripc_minus_treat_afterfiting_all.wig -v -r /data/aparna/cache_minus/ /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIPc_plus_intersect_int_early.bed
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIPc_minus_intersect_int_early.bed: .//NT2_dripc_minus_treat_afterfiting_all_DRIPc_minus_intersect_int_early.txt


aparna@zeus:~/DATA/mapping/mapping_DRIP_DRIPc_peaks$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_plus_MACS_wiggle/treat/NT2_dripc_plus_treat_afterfiting_all.wig -v -r /data/aparna/cache_plus/ /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_notin_DRIP_merge.bed 
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_notin_DRIP_merge.bed: .//NT2_dripc_plus_treat_afterfiting_all_DRIPc_notin_DRIP_merge.txt


aparna@zeus:/data/aparna/mapping/mapping_DRIP_DRIPc_peaks$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_minus_MACS_wiggle/treat/NT2_dripc_minus_treat_afterfiting_all.wig -v -r /data/aparna/cache_minus/ /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_notin_DRIP_merge.bed
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_notin_DRIP_merge.bed: .//NT2_dripc_minus_treat_afterfiting_all_DRIPc_notin_DRIP_merge.txt


aparna@zeus:/data/aparna/mapping/mapping_plus_minus_DRIPc_origins$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_plus_MACS_wiggle/treat/NT2_dripc_plus_treat_afterfiting_all.wig -v -r /data/aparna/cache_plus/ /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIPc_minus_intersect_int_early.bed
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIPc_minus_intersect_int_early.bed: .//NT2_dripc_plus_treat_afterfiting_all_DRIPc_minus_intersect_int_early.txt


aparna@zeus:~/DATA/mapping/mapping_DRIP_DRIPc_peaks$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_plus_MACS_wiggle/treat/NT2_dripc_plus_treat_afterfiting_all.wig -v -r /data/aparna/cache_plus/ /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIP_notin_DRIPc_merge.bed
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIP_notin_DRIPc_merge.bed: .//NT2_dripc_plus_treat_afterfiting_all_DRIP_notin_DRIPc_merge.txt


aparna@zeus:/data/aparna/mapping/mapping_DRIP_DRIPc_peaks$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_minus_MACS_wiggle/treat/NT2_dripc_minus_treat_afterfiting_all.wig -v -r /data/aparna/cache_minus/ /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIP_notin_DRIPc_merge.bed
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIP_notin_DRIPc_merge.bed: .//NT2_dripc_minus_treat_afterfiting_all_DRIP_notin_DRIPc_merge.txt


aparna@zeus:/data/aparna/mapping/mapping_plus_minus_DRIPc_origins$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_minus_MACS_wiggle/treat/NT2_dripc_minus_treat_afterfiting_all.wig -v -r /data/aparna/cache_minus/ /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIPc_minus_intersect_int_early.bed

aparna@zeus:~/DATA/mapping/mapping_DRIP_DRIPc_peaks$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_plus_MACS_wiggle/treat/NT2_dripc_plus_treat_afterfiting_all.wig -v -r /data/aparna/cache_plus/ /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_DRIP_intersectpeaks_merge.bed 
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_DRIP_intersectpeaks_merge.bed: .//NT2_dripc_plus_treat_afterfiting_all_DRIPc_DRIP_intersectpeaks_merge.txt


aparna@zeus:/data/aparna/mapping/mapping_DRIP_DRIPc_peaks$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_minus_MACS_wiggle/treat/NT2_dripc_minus_treat_afterfiting_all.wig -v -r /data/aparna/cache_minus/ /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_DRIP_intersectpeaks_merge.bed 
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_DRIP_intersectpeaks_merge.bed: .//NT2_dripc_minus_treat_afterfiting_all_DRIPc_DRIP_intersectpeaks_merge.txt


aparna@zeus:/data/aparna/mapping/mapping_plus_minus_DRIPc_origins$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_minus_MACS_wiggle/treat/NT2_dripc_minus_treat_afterfiting_all.wig -v -r /data/aparna/cache_minus/ /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIPc_minus_intersect_int_late.bed1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIPc_minus_intersect_int_late.bed: .//NT2_dripc_minus_treat_afterfiting_all_DRIPc_minus_intersect_int_late.txt

aparna@zeus:/data/aparna/mapping/mapping_plus_minus_DRIPc_origins$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_plus_MACS_wiggle/treat/NT2_dripc_plus_treat_afterfiting_all.wig -v -r /data/aparna/cache_plus/ /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIPc_minus_intersect_int_late.bed 

1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIPc_minus_intersect_int_late.bed: .//NT2_dripc_plus_treat_afterfiting_all_DRIPc_minus_intersect_int_late.txt


aparna@zeus:/data/aparna/mapping/mapping_plus_minus_DRIPc_origins$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_plus_MACS_wiggle/treat/NT2_dripc_plus_treat_afterfiting_all.wig -v -r /data/aparna/cache_plus/ /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIPc_plus_intersect_int_late.bed 
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIPc_plus_intersect_int_late.bed: .//NT2_dripc_plus_treat_afterfiting_all_DRIPc_plus_intersect_int_late.txt

##mistake run
aparna@zeus:/data/aparna/mapping/mapping_plus_minus_DRIPc_origins$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_minus_MACS_wiggle/treat/NT2_dripc_minus_treat_afterfiting_all.wig -v -r /data/aparna/cache_minus/ /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIPc_plus_intersect_int_early.bed 
aparna@zeus:/data/aparna/mapping/mapping_plus_minus_DRIPc_origins$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_minus_MACS_wiggle/treat/NT2_dripc_minus_treat_afterfiting_all.wig -v -r /data/aparna/cache_minus/ /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIPc_plus_intersect_int_late.bed  
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIPc_plus_intersect_int_late.bed: .//NT2_dripc_minus_treat_afterfiting_all_DRIPc_plus_intersect_int_late.txt



Make MA plot with DRIP DRIPc

use MERGE wig files for this
  take peaks, map to merge wig files, produce MA plot.


aparna@zeus:/data/aparna/mapping/mapping_plus_minus_DRIPc_origins$ 
Message from wearn@zeus on pts/8 at 15:23 ...
MAnorm.sh is in /lab/MAnorm_Linux_R_Package
i am making drip wig file now


aparna@zeus:/data/aparna/mapping/mapping_origins_DRIP$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/aparna/NT2_drip1_treat_afterfiting_all.wig -v -r /data/aparna/cache_drip1/ /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIP_intersect_int_early.bed
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIP_intersect_int_early.bed: .//NT2_drip1_treat_afterfiting_all_DRIP_intersect_int_early.txt


aparna@zeus:~/DATA/GA/final_peak_calls/peaks/clean/origins_overlap$  perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/aparna/NT2_drip1_treat_afterfiting_all.wig -v -r /data/aparna/cache_drip1/ /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIP_intersect_int_late.bed 

1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIP_intersect_int_late.bed: .//NT2_drip1_treat_afterfiting_all_DRIP_intersect_int_late.txt

aparna@zeus:~/DATA/GA/final_peak_calls/peaks/clean/origins_overlap$  perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/aparna/NT2_drip1_treat_afterfiting_all.wig -v -r /data/aparna/cache_drip1/ /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIP_intersect_int_late.bed 
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIP_intersect_int_late.bed: .//NT2_drip2_treat_afterfiting_all_DRIP_intersect_int_late.txt

aparna@zeus:/data/aparna/mapping/mapping_origins_DRIP$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/aparna/NT2_drip2_treat_afterfiting_all.wig -v -r /data/aparna/cache_drip2/ /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIP_intersect_int_early.bed

1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIP_intersect_int_early.bed: .//NT2_drip2_treat_afterfiting_all_DRIP_intersect_int_early.txt

6.3.14

MA plot
aparna@zeus:/data/aparna$ cp /data/wearn/NT2_drip/Macs/NT2_drip_both_MACS_wiggle/treat/NT2_drip_both_treat_afterfiting_all.wig.gz .
aparna@zeus:/data/aparna$ gunzip NT2_drip_both_treat_afterfiting_all.wig.gz

aparna@zeus:/data/aparna$ wig2bed NT2_drip_both_treat_afterfiting_all.wig > NT2_drip_combined.bed

aparna@zeus:/data/aparna$ wig2bed /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_MACS_wiggle/treat/NT2_dripc_treat_afterfiting_all.wig > NT2_dripc_combined.bed

aparna@zeus:/data/aparna/MAnorm$ cut -f 1,2,3,5 ../NT2_drip_combined.bed > unsorted_drip_read.bed
aparna@zeus:/data/aparna/MAnorm$ cut -f 1,2,3,5 ../NT2_dripc_combined.bed > unsorted_dripc_read.bed

aparna@zeus:/data/aparna/MAnorm$ awk '{print $1}' unsorted_drip_read.bed > col1_unsorted_drip_read.bed
aparna@zeus:/data/aparna/MAnorm$ awk '{print $1}' unsorted_dripc_read.bed > col1_unsorted_dripc_read.bed

aparna@zeus:/data/aparna/MAnorm$ sort_large_bed.pl col1_unsorted_drip_read.bed unsorted_drip_read.bed 

aparna@zeus:/data/aparna/mapping/mapping_origins_DRIP$ l
NT2_drip1_treat_afterfiting_all_DRIP_intersect_int_early.txt
NT2_drip1_treat_afterfiting_all_DRIP_intersect_int_late.txt
NT2_drip2_treat_afterfiting_all_DRIP_intersect_int_early.txt
NT2_drip2_treat_afterfiting_all_DRIP_intersect_int_late.txt

aparna@zeus:/data/aparna/MAnorm$ sort_large_bed.pl col1_unsorted_dripc_read.bed unsorted_dripc_read.bed 
aparna@zeus:/data/aparna/MAnorm$ cp /lab/MAnorm_Linux_R_Package/MAnorm.sh .aparna@zeus:/data/aparna/MAnorm$ chmod +x MAnorm.sh

aparna@zeus:/data/aparna/MAnorm$ ./MAnorm.sh /data/aparna/GA/final_peak_calls/peaks/clean/NT2_DRIPc_merged_rep12_peaks.bed /data/aparna/GA/final_peak_calls/peaks/clean/NT2_DRIP_merge_peaks.bed unsorted_dripc_read.bed_sorted unsorted_drip_read.bed_sorted 55 55

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DR
IP$ bedtools intersect -a /data/aparna/GA/final_peak_calls/peaks/clean/NT2_DRIP_intersect_peaks.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed > DRIP_intersect_int_early.bed
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DR
IP$ bedtools intersect -a /data/aparna/GA/final_peak_calls/peaks/clean/NT2_DRIP_intersect_peaks.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_late_origins_ENCODE.bed > DRIP_intersect_int_late.bed

aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DR
IP$ bedtools intersect -v -a /data/aparna/GA/final_peak_calls/peaks/clean/NT2_DRIP_intersect_peaks.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed > DRIP_intersect_noint_early.bed
aparna@zeus:/data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DR
IP$ bedtools intersect -v -a /data/aparna/GA/final_peak_calls/peaks/clean/NT2_DRIP_intersect_peaks.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_late_origins_ENCODE.bed > DRIP_intersect_noint_late.bed

aparna@zeus:/data/aparna/mapping/mapping_origins_DRIP$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/aparna/NT2_drip2_treat_afterfiting_all.wig -v -r /data/aparna/cache_drip2/ /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIP/DRIP_intersect_noint_early.bed 
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIP/DRIP_intersect_noint_early.bed: .//NT2_drip2_treat_afterfiting_all_DRIP_intersect_noint_early.txt

aparna@zeus:/data/aparna/mapping/mapping_origins_DRIP$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/aparna/NT2_drip2_treat_afterfiting_all.wig -v -r /data/aparna/cache_drip2/ /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIP/DRIP_intersect_noint_late.bed
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIP/DRIP_intersect_noint_late.bed: .//NT2_drip2_treat_afterfiting_all_DRIP_intersect_noint_late.txt

aparna@zeus:/data/aparna/mapping/mapping_origins_DRIP$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/aparna/NT2_drip1_treat_afterfiting_all.wig -v -r /data/aparna/cache_drip1/ /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIP/DRIP_intersect_noint_late.bed 
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIP/DRIP_intersect_noint_late.bed: .//NT2_drip1_treat_afterfiting_all_DRIP_intersect_noint_late.txt

aparna@zeus:/data/aparna/mapping/mapping_origins_DRIP$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/aparna/NT2_drip1_treat_afterfiting_all.wig -v -r /data/aparna/cache_drip1/ /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIP/DRIP_intersect_noint_early.bed 
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/origins_overlap/DRIP/DRIP_intersect_noint_early.bed: .//NT2_drip1_treat_afterfiting_all_DRIP_intersect_noint_early.txt

need to run 1mil sim on genes and GC skew


aparna@zeus:/data/aparna/MAnorm$ sam2bed /media/drobo/wearn/NT2_DripC/Mappi
ng/NT2_dripc.sam NT2_dripc_read.bed.tmp

aparna@zeus:/data/aparna/MAnorm$ cut -f 1,2,3,6 NT2_drip_read.bed.tmp > 4col_drip_read.bed.tmp
aparna@zeus:/data/aparna/MAnorm$ cut -f 1,2,3,6 NT2_dripc_read.bed.tmp > 4col_dripc_read.bed.tmp
aparna@zeus:/data/aparna/MAnorm$ awk '{print $1}' 4col_drip_read.bed.tmp > 1col_drip_read.tmp
aparna@zeus:/data/aparna/MAnorm$ awk '{print $1}' 4col_dripc_read.bed.tmp > 1col_dripc_read.tmp

aparna@zeus:/data/aparna/MAnorm$ sort_large_bed.pl 1col_drip_read.tmp 4col_drip_read.bed.tmp 
aparna@zeus:/data/aparna/MAnorm$ sort_large_bed.pl 1col_dripc_read.tmp 4col_dripc_read.bed.tmp 

aparna@zeus:/data/aparna/MAnorm$ ./MAnorm.sh NT2_DRIPc_merged_rep12_peaks.bed NT2_DRIP_merge_peaks.bed 4col_dripc_read.bed.tmp_sorted 4col_drip_read.bed.tmp_sorted 150 150

aparna@zeus:/data/aparna/MAnorm$ sed 1d MAnorm_result.xls | awk '{if (($9 >= 5) && ($7 >= 1)) {print}}' > dripc_unique_peaks.bed
aparna@zeus:/data/aparna/MAnorm$ sed 1d MAnorm_result.xls | awk '{if (($9 >= 5) && ($7 <= -1)) {print}}' > drip_unique_peaks.bed
aparna@zeus:/data/aparna/MAnorm$ sed 1d MAnorm_result.xls | awk '{if (($9 < 5) || (($7 > -1) && ($7 < 1))) {print}}' > not_unique_peaks.bed


aparna@zeus:/data/aparna/MAnorm$ grep "unique" MAnorm_result.xls > uniqueonly_MAnorm_result.xls
aparna@zeus:/data/aparna/MAnorm$ less uniqueonly_MAnorm_result.xls 

aparna@zeus:/data/aparna/MAnorm$ wc -l uniqueonly*
  47858 uniqueonly_MAnorm_result.xls
  19577 uniqueonly_drip_unique_peaks.bed
  10143 uniqueonly_dripc_unique_peaks.bed
  18137 uniqueonly_not_unique_peaks.bed
  95715 total
aparna@zeus:/data/aparna/MAnorm$ sed 1d uniqueonly_MAnorm_result.xls | awk '{if (($9 >= 5) && ($7 >= 1)) {print}}' > uniqueonly_dripc_unique_peaks.bed 
aparna@zeus:/data/aparna/MAnorm$ sed 1d uniqueonly_MAnorm_result.xls | awk '{if (($9 >= 5) && ($7 <= -1)) {print}}' > uniqueonly_drip_unique_peaks.bed 
aparna@zeus:/data/aparna/MAnorm$ sed 1d uniqueonly_MAnorm_result.xls | awk '{if (($9 < 5) || (($7 > -1) && ($7 < 1))) {print}}' > uniqueonly_not_unique_peaks.bed

#

aparna@zeus:/data/aparna/MAnorm$ sed 1d uniqueonly_MAnorm_result.xls | awk '{if (($9 >= 5) && ($7 >= 2)) {print}}' > uniqueonly_dripc_unique_peaks.bed 
aparna@zeus:/data/aparna/MAnorm$ sed 1d uniqueonly_MAnorm_result.xls | awk '{if (($9 >= 5) && ($7 <= -2)) {print}}' > uniqueonly_drip_unique_peaks.bed 
aparna@zeus:/data/aparna/MAnorm$ sed 1d uniqueonly_MAnorm_result.xls | awk '{if (($9 < 5) || (($7 > -2) && ($7 < 2))) {print}}' > uniqueonly_not_unique_peaks.bed
aparna@zeus:/data/aparna/MAnorm$ wc -l uniqueonly*
  47858 uniqueonly_MAnorm_result.xls
  14410 uniqueonly_drip_unique_peaks.bed
   5286 uniqueonly_dripc_unique_peaks.bed
  28161 uniqueonly_not_unique_peaks.bed
  95715 total
#

aparna@zeus:/data/aparna/MAnorm$ sed 1d uniqueonly_MAnorm_result.xls | awk '{if (($9 >= 5) && ($7 >= 3)) {print}}' > uniqueonly_dripc_unique_peaks.bed 
aparna@zeus:/data/aparna/MAnorm$ sed 1d uniqueonly_MAnorm_result.xls | awk '{if (($9 >= 5) && ($7 <= -3)) {print}}' > uniqueonly_drip_unique_peaks.bed 
aparna@zeus:/data/aparna/MAnorm$ sed 1d uniqueonly_MAnorm_result.xls | awk '{if (($9 < 5) || (($7 > -3) && ($7 < 3))) {print}}' > uniqueonly_not_unique_peaks.bed
aparna@zeus:/data/aparna/MAnorm$ wc -l uniqueonly*
  47858 uniqueonly_MAnorm_result.xls
   6970 uniqueonly_drip_unique_peaks.bed
   1140 uniqueonly_dripc_unique_peaks.bed
  39747 uniqueonly_not_unique_peaks.bed
  95715 total
#

aparna@zeus:/data/aparna/MAnorm$ sed 1d uniqueonly_MAnorm_result.xls | awk '{if (($9 >= 5) && ($7 >= 4)) {print}}' > uniqueonly_dripc_unique_peaks.bed 
aparna@zeus:/data/aparna/MAnorm$ sed 1d uniqueonly_MAnorm_result.xls | awk '{if (($9 >= 5) && ($7 <= -4)) {print}}' > uniqueonly_drip_unique_peaks.bed 
aparna@zeus:/data/aparna/MAnorm$ sed 1d uniqueonly_MAnorm_result.xls | awk '{if (($9 < 5) || (($7 > -4) && ($7 < 4))) {print}}' > uniqueonly_not_unique_peaks.bed
aparna@zeus:/data/aparna/MAnorm$ wc -l uniqueonly*
  47858 uniqueonly_MAnorm_result.xls
   2330 uniqueonly_drip_unique_peaks.bed
    224 uniqueonly_dripc_unique_peaks.bed
  45303 uniqueonly_not_unique_peaks.bed
  95715 total
#

aparna@zeus:/data/aparna/MAnorm$ grep "common" MAnorm_result.xls > commononly_MAnorm_result.xls

take the unique peaks from uniqueonly_drip and uniqueonly_dripc, find them in the files used to make scatterplot, color differently, replot scatter plot, see if MAnorm unique peaks actually makes sense.

7.7.14

remaking scatter plot with merged files like MAplot.
 parna@zeus:/data/aparna/mapping/mapping_DRIP_DRIPc_peaks/mapping_merge$ pe
rl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_MACS_wiggle/treat/NT2_dripc_treat_afterfiting_all.wig -v -r /data/aparna/cache_dripc_both/ /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_DRIP_intersectpeaks_merge.bed
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_DRIP_intersectpeaks_merge.bed: .//NT2_dripc_treat_afterfiting_all_DRIPc_DRIP_intersectpeaks_merge.txt


aparna@zeus:/data/aparna$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/aparna/NT2_drip_both_treat_afterfiting_all.wig -v -r /data/aparna/cache_drip_both/ /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_DRIP_intersectpeaks_merge.bed
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_DRIP_intersectpeaks_merge.bed: .//NT2_drip_both_treat_afterfiting_all_DRIPc_DRIP_intersectpeaks_merge.txt



the DRIP combined wig is only 1.4 GB 
and the DRIPc wig is only 580Mb ...

wrote script recolor_points.pl 
aparna@zeus:/data/aparna/mapping/mapping_DRIP_DRIPc_peaks/mapping_merge$ chmod +x recolor_points.pl 

aparna@zeus:/data/aparna/mapping/mapping_DRIP_DRIPc_peaks/mapping_merge$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/aparna/NT2_drip_both_treat_afterfiting_all.wig -v -r /data/aparna/cache_drip_both/ /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_notin_DRIP_merge.bed 

aparna@zeus:/data/aparna/mapping/mapping_DRIP_DRIPc_peaks/mapping_merge$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_MACS_wiggle/treat/NT2_dripc_treat_afterfiting_all.wig -v -r /data/aparna/cache_dripc_both/ /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIP_notin_DRIPc_merge.bed  
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIP_notin_DRIPc_merge.bed: .//NT2_dripc_treat_afterfiting_all_DRIP_notin_DRIPc_merge.txt

aparna@zeus:/data/aparna/mapping/mapping_DRIP_DRIPc_peaks/mapping_merge$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/aparna/NT2_drip_both_treat_afterfiting_all.wig -v -r /data/aparna/cache_drip_both/ /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_notin_DRIP_merge.bed 
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_notin_DRIP_merge.bed: .//NT2_drip_both_treat_afterfiting_all_DRIPc_notin_DRIP_merge.txt


aparna@zeus:/data/aparna/mapping/mapping_DRIP_DRIPc_peaks/mapping_merge$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_MACS_wiggle/treat/NT2_dripc_treat_afterfiting_all.wig -v -r /data/aparna/cache_dripc_both/ /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_notin_DRIP_merge.bed 
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIPc_notin_DRIP_merge.bed: .//NT2_dripc_treat_afterfiting_all_DRIPc_notin_DRIP_merge.txt

aparna@zeus:/data/aparna/mapping/mapping_DRIP_DRIPc_peaks/mapping_merge$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/aparna/NT2_drip_both_treat_afterfiting_all.wig -v -r /data/aparna/cache_drip_both/ /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIP_notin_DRIPc_merge.bed 
1. Output of /data/aparna/GA/final_peak_calls/peaks/clean/intersects/DRIP_notin_DRIPc_merge.bed: .//NT2_drip_both_treat_afterfiting_all_DRIP_notin_DRIPc_merge.txt

merged wigs is a bad way of doing this.

7.8.14

Finished with proper way of making plot, on labnotes.html.

wrote script slidingwindow.pl in sliding_window_drip/ need to debug.

Function calls make a HUGE difference in time!
  went from >10mins to <5 seconds!!!
  reduce function calls as much as possible, reduce if/else as much as possible.
  use File::Basename to extract file name from paths! Can also replace mitochy

sliding window script works needs to be improved see FIXMEs


#########


9.2.14

Trans targets:
  Run peak count simulation, shuffling NEAT1 or MALAT1 and overlap with DRIP, overlap with DRIPc. 1mil trials.
  MAnorm:
    Check all MAnorm params and inputs. Re-produce graph to make sure inputs are correct. Note all params.
    NEAT1 MALAT1 overlay on DRIP/DRIPc MAnorm plot
      discontinuous p-value ranges in grey, starting at 10-5
      colored NEAT1 targets, MALAT1 targets, both
        seperate color of NEAT1 itself, MALAT1 itself
    Produce table of fold increase ranges (significant only: p < 10-5)
      2, 4, etc ... 16
      DRIP significantly different from DRIPc, DRIPc significantly different than DRIP columns

Replication Origins:
  Read prioleau paper, download data. 
    Compare their replication origins with DRIP/DRIPc
    Compare to BrdU data overlaps. 
  Produce prelim figure from BrdU Replication Origins and DRIP/DRIPc overlap information (boxplots)
  Write all methods, document all scripts/processes/input files

GA-StochHMM
  Document!
  Test rewrite completely
  Write a cli "Interface"
  Deal with median shift/integrate into scripts

  
===

Modified run.pl to take more arguments and accept two intersects. Untested. /data/aparna/trans_targets/run_twointersects.pl

aparna@zeus:/data/wearn/NT2_dripc/West_lncRNA$ cp MALAT1_chart_peaks.bed NEAT1_chart_peaks.bed /data/aparna/trans_targets/

aparna@zeus:/data/aparna/trans_targets$ ./run_twointersects.pl gaps_hg19.be
d hg19.genome NEAT1_chart_peaks.bed /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_peaks.bed /data/wearn/NT2_dripc/Peaks/NT2_DRIP_intersect_peaks.bed NEAT1_DRIPc_1mil_sim.txt NEAT1_DRIP_1mil_sim.txt

  Tested new script, now running for real under screen. NEAT1.

Double checked params for MAnorm, file used was NT2_DRIPc_merged_rep12_peaks.bed 

Annotation column:

initially do these p-values
10-5 as lowest threshold
10-6
10-7
10-8
10-9 and greater

$9 is -log10 p-val, >5 means less than 0.00001

so cutoffs are
>5 <6
>6 <7
>7 <8
>8 <9
>9

if point overlaps with NEAT1
if point overlaps with MALAT1
if point overlaps with common NEAT1/MALAT1 

8 different colors.

write a script to handle all of this rather than awk.
  written, untested. /data/aparna/trans_targets/maplot_pval.pl
  need to preprocess data first, before running.
  need to figure out R script to plot also

aparna@zeus:/data/aparna/trans_targets$ cp /data/aparna/MAnorm/MAnorm_result.xls .

awk if-else example:
  ls -l | awk '{if ($3 == "rahmu") print $0;}'

aparna@zeus:/data/aparna/trans_targets$ awk '{if ($4 == "unique_peak1" || $
4 == "common_peak1") print $0;}' MAnorm_result.xls >> sample1_MAnorm.xls
aparna@zeus:/data/aparna/trans_targets$ awk '{if ($4 == "unique_peak2" || $4 == "common_peak2") print $0;}' MAnorm_result.xls >> sample2_MAnorm.xls

aparna@zeus:/data/aparna/trans_targets$ sort -k 1,1 -k 2,2n sample1_MAnorm.xls > sorted_sample1_MAnorm.xls
aparna@zeus:/data/aparna/trans_targets$ sort -k 1,1 -k 2,2n sample2_MAnorm.xls > sorted_sample2_MAnorm.xls

PROBLEM:

MAnorm uses NT2_DRIPc_merged_rep12_peaks.bed that is in /data/aparna/MAnorm. This file has MORE peaks than the one in /data/wearn/NT2_dripc/Peaks! re-do MAnorm for the peakfile in /data/wearn/NT2_dripc/Peaks. Try to find out what was filtered out ...

9.3.14

Rechecked MAnorm files, was running simulation with wrong files. Rerunning now:

          
aparna@zeus:/data/aparna/trans_targets$ ./run_twointersects.pl gaps_hg19.bed hg19.genome MALAT1_chart_peaks.bed /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_peaks.bed /data/wearn/NT2_dripc/Peaks/NT2_DRIP_merge_peaks.bed sim_outfiles/MALAT1_DRIPc_1mil_sim.txt sim_outfiles/MALAT1_DRIP_1mil_sim.txt

aparna@zeus:/data/aparna/trans_targets$ bedtools intersect -c -a /data/wearn/NT2_dripc/
Peaks/NT2_DRIPc_merged_rep12_peaks.bed -b NEAT1_chart_peaks.bed > DRIPc_NEAT1_c_intersect.tmp
aparna@zeus:/data/aparna/trans_targets$ bedtools intersect -c -a /data/wearn/NT2_dripc/Peaks/NT2_DRIP_merge_peaks.bed -b NEAT1_chart_peaks.bed > DRIP_NEAT1_c_intersect.tmp
aparna@zeus:/data/aparna/trans_targets$ bedtools intersect -c -a /data/wearn/NT2_dripc/Peaks/NT2_DRIP_merge_peaks.bed -b MALAT1_chart_peaks.bed > DRIP_MALAT1_c_intersect.tmp
aparna@zeus:/data/aparna/trans_targets$ bedtools intersect -c -a /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_peaks.bed -b MALAT1_chart_peaks.bed > DRIPc_MALAT1_c_intersect.tmp

MAnorm plots done

9.4.14

MALAT1 sim done. Running NEAT1 sim:

aparna@zeus:/data/aparna/trans_targets$ ./run_twointersects.pl gaps_hg19.bed hg19.genome NEAT1_chart_peaks.bed /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_peaks.bed /data/wearn/NT2_dripc/Peaks/NT2_DRIP_merge_peaks.bed sim_outfiles/NEAT1_DRIPc_1mil_sim.txt sim_outfiles/NEAT1_DRIP_1mil_sim.txt

MALAT1 significant to 10-6:

> malat_drip<-read.delim("MALAT1_DRIP_1mil_sim.txt", header=F)
> malat_dripc<-read.delim("MALAT1_DRIPc_1mil_sim.txt", header=F)
> summary(malat_drip)
       V1       
 Min.   :153.0  
 1st Qu.:191.0  
 Median :199.0  
 Mean   :198.9  
 3rd Qu.:206.0  
 Max.   :247.0  
> summary(malat_dripc)
       V1       
 Min.   :110.0  
 1st Qu.:148.0  
 Median :155.0  
 Mean   :154.9  
 3rd Qu.:162.0  
 Max.   :200.0  

Data:
DRIP MALAT1: 574 (86%)
DRIPc MALAT1: 530 (79%)

Made folder stefano_stochhmm_peaks for peak calling
need to median shift first
use only chr8 to compare

aparna@zeus:/data/aparna/stefano_stochhmm_peaks$ parse_wig.pl top1_1_treat_afterfiting_all.wig chr8
aparna@zeus:/data/aparna/stefano_stochhmm_peaks$ mv chr8.wig top1_1_chr8.wig
aparna@zeus:/data/aparna/stefano_stochhmm_peaks$ wig2bed.pl top1_1_chr8.wig 
aparna@zeus:/data/aparna/stefano_stochhmm_peaks$ mv wig2bed_outfile.txt top1_1_chr8.bed
aparna@zeus:/data/aparna/GA/final_peak_calls/R$ cp DRIP_NT2.wig2bed.out /data/aparna/stefano_stochhmm_peaks/

R commands:
> drip2<-read.delim("DRIP_NT2.wig2bed.out", header=F)
> top11<-read.delim("top1_1_chr8.bed", header=F)
> drip2<-drip2$V4
> top11<-top11$V4
> sdrip2<-sort(drip2, decreasing=TRUE)
> stop11<-sort(top11, decreasing=TRUE)
> smalldrip2<-sdrip2[1:floor(length(sdrip2)*.1)]
> smalltop11<-stop11[1:floor(length(stop11)*.1)]
> summary(smalldrip2)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  11.78   13.87   17.64   22.46   24.95  253.00 
> summary(smalltop11)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  4.000   5.000   6.000   7.162   8.000 112.000 
> 17.64/6
[1] 2.94

aparna@zeus:/data/aparna/stefano_stochhmm_peaks$ parse_wig.pl top1_2_treat_afterfiting_all.wig chr8
aparna@zeus:/data/aparna/stefano_stochhmm_peaks$ mv chr8.wig top1_2_chr8.wig
aparna@zeus:/data/aparna/stefano_stochhmm_peaks$ wig2bed.pl top1_2_chr8.wig 
aparna@zeus:/data/aparna/stefano_stochhmm_peaks$ mv wig2bed_outfile.txt top1_2_chr8.bed

> summary(smalltop12)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  3.000   4.000   5.000   5.961   7.000 102.000 
> 17.64/5
[1] 3.528

Take avg of two shifts and shift EVERYTHING by this?
> (3.528+2.94)/2
[1] 3.234ls

There are peaks in the two treatments, there aren't supposed to be for controls. Calculate median shift for controls by taking the avg for the two treatments. Use avg shift for everything.

aparna@zeus:/data/aparna/stefano_stochhmm_peaks$ shift_wig.pl top1_1_treat_afterfiting_all.wig 3.234

made seperate dirs for other files to shift. Running top1_1 and top1_2
aparna@zeus:/data/aparna/stefano_stochhmm_peaks/top12_shift$ shift_wig.pl ../top1_2_treat_afterfiting_all.wig 3.234


afterwards run scramble and control
aparna@zeus:/data/aparna/stefano_stochhmm_peaks/control_shift$ shift_wig.pl ../control_treat_afterfiting_all.wig 3.234
aparna@zeus:/data/aparna/stefano_stochhmm_peaks/scramble_shift$ shift_wig.pl ../scramble_treat_afterfiting_all.wig 3.234


then wig2fa.pl (normal version)
aparna@zeus:/data/aparna/stefano_stochhmm_peaks/top11_shift$ /data/aparna/scripts/GA/common_scripts/wig2fa.pl -i top1_1_shift_3.234.wig 
aparna@zeus:/data/aparna/stefano_stochhmm_peaks/top12_shift$ /data/aparna/scripts/GA/common_scripts/wig2fa.pl -i top1_2_shift_3.234.wig 
aparna@zeus:/data/aparna/stefano_stochhmm_peaks/scramble_shift$ /data/aparna/scripts/GA
/common_scripts/wig2fa.pl -i scramble_shift_3.234.wig 
aparna@zeus:/data/aparna/stefano_stochhmm_peaks/control_shift$ /data/aparna/scripts/GA/common_scripts/wig2fa.pl -i control_shift_3.234.wig aparna@zeus:/data/aparna/stefano_stochhmm_peaks/control_shift$ /data/aparna/scripts/GA/common_scripts/wig2


Example stochhmm command:
stochhmm -seq chr19_NT2_dripc_plus_all.wig.customfa -model DRIPc_peaks_plus_chr19.hmm -posterior -threshold 0.9 -gff > output_gff.txt

Use DRIP evolved model, no need to change emissions.
aparna@zeus:/data/aparna/stefano_stochhmm_peaks/top12_shift$ cp /data/aparna/scripts/GA/models/GA_StochHMM_DRIP_7state_model_25run50pop_FINAL.hmm /data/aparna/stefano_stochhmm_peaks/

make a folder with all fasta files, the DRIP model. Then run this under screen:
for fasta in *.customfa; do echo $fasta; stochhmm -seq $fasta -model GA_StochHMM_DRIP_7state_model_25run50pop_FINAL.hmm -posterior -threshold 0.9 -gff > $fasta.peaks.gff ; done

aparna@zeus:/data/aparna/stefano_stochhmm_peaks$ cp top11_shift/*.customfa top12_shift/*.customfa scramble_shift/*.customfa control_shift/*.customfa peak_calling/

running above stochhmm command

9.5.14

NEAT1 simulation done: 

> neatdrip<-read.delim("NEAT1_DRIP_1mil_sim.txt", header=F)
> neatdripc<-read.delim("NEAT1_DRIPc_1mil_sim.txt", header=F)
> summary(neatdrip)
       V1     
 Min.   :355  
 1st Qu.:410  
 Median :421  
 Mean   :421  
 3rd Qu.:431  
 Max.   :489  
> summary(neatdripc)
       V1     
 Min.   :290  
 1st Qu.:338  
 Median :348  
 Mean   :348  
 3rd Qu.:358  
 Max.   :415  

Data:
NEAT1 DRIP: 1042 (83%)
NEAT1 DRIPc: 934 (75%)

NEAT1 is significant to 10-6.

For peak calling, the shift seems too much.
With 5% of the top:

> top11<-read.delim("top1_1_chr8.bed", header=F)
> top12<-read.delim("top1_2_chr8.bed", header=F)
> top11<-top11$V4
> top12<-top12$V4
> head(top11)
[1] 1 1 1 1 1 1
> top11<-sort(top11, decreasing=TRUE)
> top12<-sort(top12, decreasing=TRUE)
> head(top11)
[1] 112 112 112 111 111 111
> smalltop11<-top11[1:length(top11)*.05]
> smalltop12<-top11[1:length(top12)*.05]
> summary(smalltop11)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  6.000   7.000   8.000   9.638  11.000 112.000 
> summary(smalltop12)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  5.000   6.000   8.000   9.322  10.000 112.000 
>drip2<-read.delim("DRIP_NT2.wig2bed.out", header=F)
> drip2<-drip2$V4
> drip2<-sort(drip2, decreasing=TRUE)
> smalldrip2<-drip2[1:length(drip2)*.05]
> summary(smalldrip2)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  17.65   20.61   24.95   30.92   34.80  253.00 
> 24.95/8
[1] 3.11875

Taking 1% doesn't improve:
> 49.78/15.00
[1] 3.318667


METHOD:

> head(drip2)     
[1] 253.000 251.016 249.031 247.047 247.047 247.047
> roundeddrip2<-round(drip2)
> head(roundeddrip2)
[1] 253 251 249 247 247 247
> summary(roundeddrip2)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  2.000   3.000   4.000   6.354   6.000 253.000 
> roundeddrip2<-roundeddrip2[roundeddrip2>6]
> summary(roundeddrip2)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   7.00    8.00   10.00   14.37   16.00  253.00 
> roundeddrip1<-round(drip1)
> summary(roundeddrip1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.000   1.000   1.000   1.652   2.000 102.000 
> roundeddrip1<-roundeddrip1[roundeddrip1>2]
> summary(roundeddrip1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  3.000   3.000   4.000   5.324   6.000 102.000 
> 10/4
[1] 2.5

> top11<-read.delim("top1_1_chr8.bed", header=F)
> top12<-read.delim("top1_2_chr8.bed", header=F)
> top11<-top11$V4
> top12<-top12$V4
> round11<-round(top11)
> round12<-round(top12)
> summary(round11)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.000   1.000   1.000   2.039   2.000 112.000 
> summary(round12)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.000   1.000   1.000   1.737   2.000 102.000 
> round11<-round11[round11>2]
> round12<-round12[round12>2]
> summary(round11)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   3.00    3.00    4.00    5.12    6.00  112.00 
> summary(round12)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   3.00    3.00    4.00    5.12    6.00  102.00 
> 10/4
[1] 2.5

Re-do all shifts with a shift of 2.5
->Running stochhmm now

Downloaded the .sra's from the prioleau paper

aparna@zeus:~/DATA/prioleau_replication_data$ fastq-dump --split-files ./SRR830646.sra 

Repeating for all sra's

Mapping:
aparna@zeus:/data/aparna/prioleau_replication_data$ bowtie2 -x /data/Bowtie2_Indexes/hg19/hg19.fa -U SRR830646_1.fastq -S 46.sam

made bash script bowtie_runs.sh to run all samples, under screen.

aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -a GSE46189_Ori-Peak.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed > prioleau_early_common_int.bed
aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -a GSE46189_Ori-Peak.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_late_origins_ENCODE.bed > prioleau_late_common_int.bed

aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -a prioleau_early_common_int.
bed -b /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed | awk '{print $3-$2}' | awk '{sum+=$1} END {print sum}'
841666

aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -a prioleau_late_common_int.bed -b /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed | awk '{print $3-$2}' | awk '{sum+=$1} END {print sum}'
484
aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ awk '{print $3-$2}' prioleau_early_common_int.bed | awk '{sum+=$1} END {print sum}'
15936869
aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ awk '{print $3-$2}' prioleau_late_common_int.bed | awk '{sum+=$1} END {print sum}'
1207572
aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ awk '{print $3-$2}' /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed | awk '{sum+=$1} END {print sum}'
77164470
aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -a prioleau_early_common_int.
bed -b /data/aparna/GA/final_peak_calls/peaks/clean/NT2_DRIP_intersect_peaks.bed | awk '{print $3-$2}' | awk '{sum+=$1} END {print sum}'
2340286
aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -a prioleau_late_common_int.bed -b /data/aparna/GA/final_peak_calls/peaks/clean/NT2_DRIP_intersect_peaks.bed | awk '{print $3-$2}' | awk '{sum+=$1} END {print sum}'
481
aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ awk '{print $3-$2}' /data/aparna/GA/final_peak_c
alls/peaks/clean/NT2_DRIP_intersect_peaks.bed | awk '{sum+=$1} END {print sum}'
105202966

> #DRIPc_early / DRIPc
> 841666/77164470*100
[1] 1.090743
> #DRIPc_early / Early
> 841666/15936869 *100
[1] 5.281251
> #DRIPc_early/DRIPc_late
> 841666/484
[1] 1738.979
> #DRIPc_late / DRIPc
> 484/77164470*100
[1] 0.0006272317
> #DRIPc_late / Late 
> 484/1207572*100 
[1] 0.04008043
> #DRIP_early/#DRIP_late
> 2340286/481
[1] 4865.459

#need a simulation to make sure prioleau peaks actually make sense / are specific inside the "common early" peak.

aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ ./run_twointersects_on_coordinates.pl /data/aparna/trans_targets/gaps_hg19.bed /data/aparna/trans_targets/hg19.genome prioleau_early_common_int.bed /data/aparna/replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed /data/aparna/GA/final_peak_calls/peaks/clean/NT2_DRIP_intersect_peaks.bed 1k_sim_prioleau_early_dripc.txt 1k_sim_prioleau_early_drip.txt

  removed the -excl gaps from the command because bedtools shuffle complained

Sim runs very quickly

> drip<-read.delim("1k_sim_prioleau_early_drip.txt", header=F)
> dripc<-read.delim("1k_sim_prioleau_early_dripc.txt", header=F)
> summary(drip)
       V1      
 Min.   :   0  
 1st Qu.:1101  
 Median :1122  
 Mean   :1080  
 3rd Qu.:1141  
 Max.   :1215  
> summary(dripc)
       V1       
 Min.   :  0.0  
 1st Qu.:565.0  
 Median :580.0  
 Mean   :557.7  
 3rd Qu.:596.0  
 Max.   :641.0  

should go to 10k

> driplate<-read.delim("1k_sim_prioleau_late_drip.txt", header=F)
> dripclate<-read.delim("1k_sim_prioleau_late_dripc.txt", header=F)
> summary(driplate)
       V1       
 Min.   :0.000  
 1st Qu.:0.000  
 Median :0.000  
 Mean   :0.297  
 3rd Qu.:1.000  
 Max.   :3.000  
> summary(dripclate)
       V1       
 Min.   :0.000  
 1st Qu.:0.000  
 Median :1.000  
 Mean   :1.228  
 3rd Qu.:2.000  
 Max.   :6.000  

Not significant for late? Or significant in the opposite direction expected?

10k early

> dripcearly<-read.delim("10k_sim_prioleau_early_dripc.txt", header=F)
> dripearly<-read.delim("10k_sim_prioleau_early_drip.txt", header=F)
> summary(dripcearly)
       V1     
 Min.   :484  
 1st Qu.:566  
 Median :581  
 Mean   :581  
 3rd Qu.:596  
 Max.   :654  
> summary(dripearly)
       V1      
 Min.   :1012  
 1st Qu.:1104  
 Median :1123  
 Mean   :1123  
 3rd Qu.:1142  
 Max.   :1224  

10k late

Type 'q()' to quit R.

> dripclate<-read.delim("10k_sim_prioleau_late_dripc.txt", header=F)
> driplate<-read.delim("10k_sim_prioleau_late_drip.txt", header=F)
> summary(dripclate)
       V1       
 Min.   :0.000  
 1st Qu.:0.000  
 Median :1.000  
 Mean   :1.216  
 3rd Qu.:2.000  
 Max.   :7.000  
> summary(driplate)
       V1        
 Min.   :0.0000  
 1st Qu.:0.0000  
 Median :0.0000  
 Mean   :0.3178  
 3rd Qu.:1.0000  
 Max.   :4.0000  


aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -a GSE46189_Ori-Peak.bed -b /
data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
4060791
aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ awk '{print $3 - $2}' GSE46189_Ori-Peak.bed| awk '{sum+=$1} END {print sum}'
107171500

> 4060791/107171500*100
[1] 3.789059

BUT take into account that GSE* is K562 ONLY. Need to have temporal-independant list of common origins to overlap.

9.8.14

aparna@zeus:/data/aparna/stefano_stochhmm_peaks/peaks_2.5$ wc -l *.gff
   59499 control_2.5.wig.customfa.peaks.gff
   67337 scramble_2.5.wig.customfa.peaks.gff
   77153 top11_2.5.wig.customfa.peaks.gff
   56570 top12_2.5.wig.customfa.peaks.gff
  260559 total
 parna@zeus:/data/aparna/stefano_stochhmm_peaks$ wc -l peaks_3.234/*.gff
   86264 peaks_3.234/control_shift_3.234.wig.customfa.peaks.gff
   94555 peaks_3.234/scramble_shift_3.234.wig.customfa.peaks.gff
  109149 peaks_3.234/top1_1_shift_3.234.wig.customfa.peaks.gff
   82079 peaks_3.234/top1_2_shift_3.234.wig.customfa.peaks.gff
  372047 total

The peaks don't look bad, the wigs just appear quite similar.

Final info:

#peak counts
aparna@zeus:/data/aparna/stefano_stochhmm_peaks/peaks_2.5$ wc -l *.peaks
  59500 control_2.5.peaks
  67338 scramble_2.5.peaks
  77154 top11_2.5.peaks
  56571 top12_2.5.peaks
 260563 total

#avg lengths
aparna@zeus:/data/aparna/stefano_stochhmm_peaks/peaks_2.5$ for f in *.peaks ; do echo $f; awk '{print $3 - $2}' $f | awk '{sum+=$1} END {print sum/NR}' ; done
control_2.5.peaks
1997.13
scramble_2.5.peaks
2231.65
top11_2.5.peaks
2142.75
top12_2.5.peaks
2212.38

#total bp
aparna@zeus:/data/aparna/stefano_stochhmm_peaks/peaks_2.5$ for f in *.peaks ; do echo $f; awk '{print $3 - $2}' $f | awk '{sum+=$1} END {print sum}' ; done
control_2.5.peaks
118829423
scramble_2.5.peaks
150274549
top11_2.5.peaks
165321741
top12_2.5.peaks
125156319

Note: there are 0 length peaks and <100 length peaks.

going to merge all cell line bedgraph files then recombine into .wig (using sum of scores) -> came out weird

going to merge bam files with samtools

Stefano DRIPc data in aparna@zeus:/media/drobo/Oldbackups/wearn/Stefano_dripc/Macs$                   
9.9.14

Stephano DRIPc data shift:
(>3rd quartile after rounding)
> summary(top11_plus)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   5.00    6.00    9.00   11.43   14.00  118.00 
> summary(top12_minus)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   5.00    6.00    8.00   10.77   13.00  113.00 
> summary(top12_plus)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    5.0     6.0     8.0    10.1    12.0   107.0 
> summary(top11_minus)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   6.00    7.00   10.00   13.85   17.00  130.00 

8.75 = combined median

going to compare against DRIPc plus all chr8 because that was what GA was trained on
> summary(dripc)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   7.00    8.00   10.00   14.37   16.00  253.00 

does each file need to be independently compared against dripc median? each one should be shifted differently? But if the control was ideal and v low, that would incorrectly shift it and cause peaks.

Also, DRIPc plus all max is 253 but lower_wig2fa was used on DRIPc so maybe only rep1 was trained on ...

Mapping prioleau data to common early INTERSECT prioleau peaks INTERSECT dripc peaks

aparna@zeus:/data/aparna/prioleau_replication_data/mapping$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w ../wigs/all_prioleau_MERGED_SAMS.bedgraph.wig -v -r cache/ ../peaks/prioleau_early_common_dripc_intersect.bed 
1. Output of ../peaks/prioleau_early_common_dripc_intersect.bed: .//all_prioleau_MERGED_SAMS_prioleau_early_common_dripc_intersect.txt

Mapping prioleau data to common late INTERSECT prioleau peaks INTERSECT dripc peaks

aparna@zeus:/data/aparna/prioleau_replication_data/mapping$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w ../wigs/all_prioleau_MERGED_SAMS.bedgraph.wig -v -r cache/ ../peaks/prioleau_late_common_dripc_intersect.bed 

This gives "origin efficiency" info to specific origins

1. Output of ../peaks/prioleau_late_common_dripc_intersect.bed: .//all_prioleau_MERGED_SAMS_prioleau_late_common_dripc_intersect.txt

  Note: only chr17 processed for this one ...
  There is only one region of intersection for this one: 
  chr17   51183176        51183660

What about dripc INTERSECT early/late NOINTERSECT prioleau?

parna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -a /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed | bedtools intersect -v -a stdin -b GSE46189_Ori-Peak.bed > dripc_intersect_early_nointersect_prioleau.bed

aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -a /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_late_origins_ENCODE.bed | bedtools intersect -v -a stdin -b GSE46189_Ori-Peak.bed > dripc_intersect_late_nointersect_prioleau.bed

aparna@zeus:/data/aparna/prioleau_replication_data/mapping$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w ../wigs/all_prioleau_MERGED_SAMS.bedgraph.wig -v -r cache/ ../peaks/dripc_intersect_early_nointersect_prioleau.bed 
1. Output of ../peaks/dripc_intersect_early_nointersect_prioleau.bed: .//all_prioleau_MERGED_SAMS_dripc_intersect_early_nointersect_prioleau.txt

aparna@zeus:/data/aparna/prioleau_replication_data/mapping$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w ../wigs/all_prioleau_MERGED_SAMS.bedgraph.wig -v -r cache/ ../peaks/dripc_intersect_late_nointersect_prioleau.bed 
1. Output of ../peaks/dripc_intersect_late_nointersect_prioleau.bed: .//all_prioleau_MERGED_SAMS_dripc_intersect_late_nointersect_prioleau.txt



Note: this will be incorrectly biased since prioleau peaks are CALLED on this data! Naturally any thing that doesn't overlap with a prioleau peak will have lower wig values ...

should run:
Prioleau INTERSECT early/late NOINTERSECT dripc to compare

Also need to make figures from this data, or else it is too difficult to interpret.

aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -v -a prioleau_early_common_int.bed -b /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed > prioleau_intersect_early_nointersect_dripc.bed

aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -v -a prioleau_late_common_int.bed -b /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed > prioleau_intersect_late_nointersect_dripc.bed

aparna@zeus:/data/aparna/prioleau_replication_data/mapping$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w ../wigs/all_prioleau_MERGED_SAMS.bedgraph.wig -v -r cache/ ../peaks/prioleau_intersect_early_nointersect_dripc.bed 

1. Output of ../peaks/prioleau_intersect_early_nointersect_dripc.bed: .//all_prioleau_MERGED_SAMS_prioleau_intersect_early_nointersect_dripc.txt

aparna@zeus:/data/aparna/prioleau_replication_data/mapping$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w ../wigs/all_prioleau_MERGED_SAMS.bedgraph.wig -v -r cache/ ../peaks/prioleau_intersect_late_nointersect_dripc.bed 

What about the DRIPc wig value for 
dripc INTERSECT early/late NOINTERSECT prioleau 
vs
dripc INTERSECT early/late INTERSECT prioleau

Note: this wig file is suspect ... could map individually to early/late rep1/rep2 but that would take too long ...
aparna@zeus:/data/aparna/prioleau_replication_data/mapping$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_MACS_wiggle/treat/NT2_dripc_treat_afterfiting_all.wig -v -r cache/ ../peaks/dripc_intersect_early_nointersect_prioleau.bed 
1. Output of ../peaks/dripc_intersect_early_nointersect_prioleau.bed: .//NT2_dripc_treat_afterfiting_all_dripc_intersect_early_nointersect_prioleau.txt

aparna@zeus:/data/aparna/prioleau_replication_data/mapping$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_MACS_wiggle/treat/NT2_dripc_treat_afterfiting_all.wig -v -r cache/ ../peaks/dripc_intersect_late_nointersect_prioleau.bed 
1. Output of ../peaks/dripc_intersect_late_nointersect_prioleau.bed: .//NT2_dripc_treat_afterfiting_all_dripc_intersect_late_nointersect_prioleau.txt

Correlate
dripc INTERSECT early/late INTERSECT prioleau -> dripc wig
dripc INTERSECT early/late INTERSECT prioleau -> prioleau wig

comparing dripc heights to prioleau heights
aparna@zeus:/data/aparna/prioleau_replication_data/mapping$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_MACS_wiggle/treat/NT2_dripc_treat_afterfiting_all.wig -v -r cache/ ../peaks/prioleau_early_common_dripc_intersect.bed 
1. Output of ../peaks/prioleau_early_common_dripc_intersect.bed: .//NT2_dripc_treat_afterfiting_all_prioleau_early_common_dripc_intersect.txt

aparna@zeus:/data/aparna/prioleau_replication_data/mapping$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w ../wigs/all_prioleau_MERGED_SAMS.bedgraph.wig -v -r cache/ ../peaks/prioleau_early_common_dripc_intersect.bed  
1. Output of ../peaks/prioleau_early_common_dripc_intersect.bed: .//all_prioleau_MERGED_SAMS_prioleau_early_common_dripc_intersect.txt

aparna@zeus:/data/aparna/prioleau_replication_data/mapping$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_MACS_wiggle/treat/NT2_dripc_treat_afterfiting_all.wig -v -r cache/ ../peaks/prioleau_late_common_dripc_intersect.bed
1. Output of ../peaks/prioleau_late_common_dripc_intersect.bed: .//NT2_dripc_treat_afterfiting_all_prioleau_late_common_dripc_intersect.txt
1. Output of ../peaks/prioleau_late_common_dripc_intersect.bed: .//all_prioleau_MERGED_SAMS_prioleau_late_common_dripc_intersect.txt

-> late should be ignored because there is only ONE peak -- not enough for a boxplot!

organized by making dir (in aparna@zeus:/data/aparna/prioleau_replication_data/mapping$)

correlations/
  dripc_prioleau_intersect_vs_dripc_prioleau_nointersect/
  dripcwig_vs_prioleauwig_dripcpeaks/
  prioleau_dripc_intersect_vs_prioleau_dripc_nointersect/


aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -wa -a /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed -b prioleau_early_common_int.bed > dripc_-wa_intersect_early_intersect_prioleau.bed
aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -wa -a /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed -b prioleau_late_common_int.bed > dripc_-wa_intersect_late_intersect_prioleau.bed
aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -wa -a prioleau_early_common_int.bed -b /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed > prioleau_early_-wa_dripc_intersect.bed
aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -wa -a prioleau_late_common_int.bed -b /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed > prioleau_late_-wa_dripc_intersect.bed

aparna@zeus:/data/aparna/prioleau_replication_data/mapping$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w ../wigs/all_prioleau_MERGED_SAMS.bedgraph.wig -v -r cache/ ../peaks/prioleau_early_-wa_dripc_intersect.bed  

1. Output of ../peaks/prioleau_early_-wa_dripc_intersect.bed: .//all_prioleau_MERGED_SAMS_prioleau_early_-wa_dripc_intersect.txt

aparna@zeus:/data/aparna/prioleau_replication_data/mapping$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w ../wigs/all_prioleau_MERGED_SAMS.bedgraph.wig -v -r cache/ ../peaks/prioleau_late_-wa_dripc_intersect.bed 
1. Output of ../peaks/prioleau_late_-wa_dripc_intersect.bed: .//all_prioleau_MERGED_SAMS_prioleau_late_-wa_dripc_intersect.txt

aparna@zeus:/data/aparna/prioleau_replication_data/mapping$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_MACS_wiggle/treat/NT2_dripc_treat_afterfiting_all.wig -v -r cache/ ../peaks/dripc_-wa_intersect_early_intersect_prioleau.bed 
1. Output of ../peaks/dripc_-wa_intersect_early_intersect_prioleau.bed: .//NT2_dripc_treat_afterfiting_all_dripc_-wa_intersect_early_intersect_prioleau.txt

aparna@zeus:/data/aparna/prioleau_replication_data/mapping$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_MACS_wiggle/treat/NT2_dripc_treat_afterfiting_all.wig -v -r cache/ ../peaks/dripc_-wa_intersect_late_intersect_prioleau.bed 
1. Output of ../peaks/dripc_-wa_intersect_late_intersect_prioleau.bed: .//NT2_dripc_treat_afterfiting_all_dripc_-wa_intersect_late_intersect_prioleau.txt

prioleau reads for early intersect / nointersect with DRIPc is significant, but when divided by origin length (for origin efficiency) it's not significant.

Nothing else is significant either.

DRIP wig height for intersect/nointersect with prioleau is barely significant (p = 5E-4)

9.10.14

Going to make more time-specific BrdU origin files.

aparna@zeus:/data/aparna/replication_origins/s50$ mkdir time_specific
aparna@zeus:/data/aparna/replication_origins/s50$ cp -r *ENCODE time_specific/

aparna@zeus:/data/aparna/replication_origins/s50/time_specific$ cp /data/aparna/scripts/s50/nograph_s50plot.R .

modified nograph_s50plot.R to timespecific_nograph_s50plot.R in time_specific folder, it runs and appears to work fine. 

Now need to modify s50_control_calc.sh -> done. timespecific_s50_control_calc.sh

using /data/aparna/scripts/origin_*/make_clean or something to clean up files before intersecting:

parna@zeus:/data/aparna/replication_origins/s50/time_specific$ for f in HeLa_ENCODE/*_all.txt ; do makeint.pl $f ; sort -k 1,1 -k 2,2n $f | bedtools intersect -v -a stdin -b /data/aparna/trans_targets/gaps_hg19.bed | bedtools merge -d 50000 -i stdin > $f.clean ; done

aparna@zeus:/data/aparna/replication_origins/s50/time_specific$ for f in g1_all.txt s1_all.txt s2_all.txt s3_all.txt s4_all.txt g2_all.txt ; do echo $f ; bedtools intersect -a HeLa_ENCODE/$f -b K562_ENCODE/$f | bedtools intersect -a stdin -b GM_ENCODE/$f | bedtools intersect -a stdin -b BG02ES_ENCODE/$f | sort -k1,1 -k2,2n > common_$f ; done

Note: these are all regions where there is an ORIGIN. This is v-shaped points only. So Late Replicating Regions are not represented -- each region contains an ORIGIN of replication, no matter what time point it is in. This is why NOTHING starts in g2, very few in s4, and a lot in g1/s1. 

aparna@zeus:/data/aparna/replication_origins/s50/time_specific$ for f in common*; do echo $f ; bedtools intersect -a $f -b /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print "DRIPc bp overlap: "sum}' ; awk '{print $3 - $2}' $f | awk '{sum+=$1} END {print "bp in origin file: "sum}'  ; done
common_g1_all.txt
DRIPc bp overlap: 3666249
bp in origin file: 62887216
common_g2_all.txt
Error: The requested bed file (common_g2_all.txt) could not be opened. Exiting!
DRIPc bp overlap: 
bp in origin file: 
common_s1_all.txt
DRIPc bp overlap: 5874761
bp in origin file: 144962001
common_s2_all.txt
DRIPc bp overlap: 71272
bp in origin file: 3820853
common_s3_all.txt
DRIPc bp overlap: 8194
bp in origin file: 1850839
common_s4_all.txt
DRIPc bp overlap: 
bp in origin file: 981822

aparna@zeus:/data/aparna/replication_origins/s50/time_specific$ awk '{print $3 - $2}' /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed | awk '{sum+=$1} END {print sum}'
77164470

> #G1 dripc_overlap/dripc*100
> 3666249/77164470*100
[1] 4.751214
> #G1 dripc_overlap/originfile*100
> 3666249/62887216*100
[1] 5.82988
> #S1 dripc_overlap/dripc*100
> 5874761/77164470*100
[1] 7.613298
> #S1 dripc_overlap/originfile*100
> 5874761/144962001*100
[1] 4.052621
> #S2 dripc_overlap/dripc*100
> 71272/77164470*100
[1] 0.09236375
> #S2 dripc_overlap/originfile*100
> 71272/3820853*100
[1] 1.865343
> #S3 dripc_overlap/dripc*100
> 8194/77164470*100
[1] 0.01061888
> #S3 dripc_overlap/originfile*100
> 8194/1850839*100
[1] 0.4427181
> #S4 and G2 had 0 bp dripc overlap

Need to run 1mil simulations G1-S3

aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -a GSE46189_Ori-Peak.bed  -b /data/aparna/replication_origins/s50/time_specific/common_g1_all.txt > time_specific/common_g1_prioleau_peaks.bed
aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -a GSE46189_Ori-Peak.bed  -b /data/aparna/replication_origins/s50/time_specific/common_s1_all.txt > time_specific/common_s1_prioleau_peaks.bed
aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -a GSE46189_Ori-Peak.bed  -b /data/aparna/replication_origins/s50/time_specific/common_s2_all.txt > time_specific/common_s2_prioleau_peaks.bed
aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -a GSE46189_Ori-Peak.bed  -b /data/aparna/replication_origins/s50/time_specific/common_s3_all.txt > time_specific/common_s3_prioleau_peaks.bed

-> should this have been -wo ?
aparna@zeus:/data/aparna/prioleau_replication_data/peaks/time_specific$ for f in * ; do echo $f ; awk '{print $3-$2}' $f | awk '{sum+=$1} END {print "bp in file: "sum}' ; bedtools intersect -a $f -b /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print "DRIPc bp overlap: "sum}'; done
common_g1_prioleau_peaks.bed
bp in file: 6255976
DRIPc bp overlap: 353098
common_s1_prioleau_peaks.bed
bp in file: 6310512
DRIPc bp overlap: 280046
common_s2_prioleau_peaks.bed
bp in file: 74157
DRIPc bp overlap: 
common_s3_prioleau_peaks.bed
bp in file: 2463
DRIPc bp overlap: 

> #G1 prioleau intersect. dripc_overlap / prioleau_bp * 100
> 353098/6255976*100
[1] 5.644171
> #S1 prioleau intersect. dripc_overlap / prioleau_bp * 100
> 280046/6310512*100
[1] 4.43777

running g1 simulation. 

remapped with -m option, outfiles are in aparna@zeus:/data/aparna/prioleau_replication_data/mapping/m_option/
-> same results
-> origin efficiency not significant, DRIPc signal not significant, origin signal strength very significant (10-22). 

> summary(pintlen)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    192    1999    2871    4495    5672   25790 
> summary(pnointlen)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
     50    1999    2099    2990    3187   21070 
> wilcox.test(pintlen, pnointlen, alternative="two.sided")$p.value
[1] 1.178305e-32

Prioleau Origins that intersect with DRIPc are significantly longer than those that do not WITHIN a BrdU early replicating region

> length(pint$V4)
[1] 751
> length(pnoint$V4)
[1] 4537

#signal strength
> wilcox.test(pint$V4, pnoint$V4, alternative="two.sided")$p.value
[1] 4.265708e-20
> summary(pint$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.122   0.912   1.584   3.839   3.927  88.420 
> summary(pnoint$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   0.727   1.125   2.174   2.053  53.040 

#DRIPc length IS significant
> wilcox.test(dripcintlen, dripcnointlen, alternative="two.sided")$p.value
[1] 7.082308e-16
> length(dripcintlen)
[1] 751
> length(dripcnointlen)
[1] 5982

#DRIPc signal not (very) significant
> wilcox.test(dripcint$V4, dripcnoint$V4, alternative="two.sided")$p.value
[1] 0.001659403

9.11.14

G1 simulation done:
> sim<-read.delim("1mil_common_g1_brdu_dripc.txt", header=F)
> summary(sim$V1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
1300000 1977000 2106000 2111000 2241000 2953000 
> #G1 sim dripc_overlap / dripc * 100
> summary(sim$V1/77164470*100)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.684   2.562   2.730   2.735   2.904   3.826 
> #G1 sim dripc_overlap / originfile * 100
> summary(sim$V1/62887216*100)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  2.067   3.144   3.350   3.356   3.564   4.695 

#Significant to p < 1E-6

#Actual data
> #G1 dripc_overlap/dripc*100
> 3666249/77164470*100
[1] 4.751214
> #G1 dripc_overlap/originfile*100
> 3666249/62887216*100
[1] 5.82988


Starting S1 sim :
aparna@zeus:/data/aparna/replication_origins/s50/stats/another_run/time_specific/s1$ ./run_twointersects.pl /data/aparna/trans_targets/gaps_hg19.bed /data/aparna/trans_targets/hg19.genome /data/aparna/replication_origins/s50/time_specific/common_s1_all.txt /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed 1mil_common_s1_brdu_dripc.txt

writing script to shuffle within early regions

bedtools shuffle for prioleau was wrong! was using wc -l instead of bp count!

Redid script (run_on_coordinates) and am rerunning.

aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ ./run_on_coordinates.pl /data
/aparna/trans_targets/gaps_hg19.bed /data/aparna/trans_targets/hg19.genome prioleau_early_common_int.bed /data/aparna/replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed sims/1milsim_prioleauearly_dripc.txt

  Need to run after current simulation for S1 finishes. Writing new shuffling script, but its results show DRIPc and prioleau early overlap are nonsignificant ... 

Shuffling script is not wrong! Just ran bedtools shuffle for ~2k and ...

> summary(sim$V1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 671500  789300  818800  818900  846900  962900

Not significant overlap ... at least according to DRIPc, the prioleau peaks are at random in the common early region.

There is a lot of DRIPc in that region not associated with replication? DRIPc is present at origin but does not persist? Their peak calling is not that good?

Use their peaks to filter DRIPc into "origin associated" and not, and then test this "origin associated" peakset against known origin markers - ORC1, H4K20Me1, etc. compare to "non-origin-associated" DRIPc, either within the same replicating region or in "maxes" from other/random parts of cell cycle. Make a file of all "max" regions???? These are pretty definitely NOT "origin associated" regions -- they are at the wrong end of the V, no matter where they are in the cell cycle. -> would have to be in the same "origin-associated" region because obviously ORC1 etc will be depleted no matter what in the origin-not-associated regions
.

#downloaded ORC1 dataset:
aparna@zeus:/data/aparna/replication_origins/s50/correlations/orc1$ 

the "enrichRegions" file is the peakfile.

aparna@zeus:/data/aparna/replication_origins/s50/correlations/orc1$ bedtools intersect -a datasets/GSM922790_ChIPseq_Orc1_GradientHela_enrichRegions.bed -b /data/aparna/prioleau_replication_data/peaks/dripc_-wa_intersect_early_intersect_prioleau.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
38525
aparna@zeus:/data/aparna/replication_origins/s50/correlations/orc1$ awk '{print $3 - $2}' datasets/GSM922790_ChIPseq_Orc1_GradientHela_enrichRegions.bed | awk '{sum+=$1} END {print sum}'
11439687
aparna@zeus:/data/aparna/replication_origins/s50/correlations/orc1$ awk '{print $3 - $2}' /data/aparna/prioleau_replication_data/peaks/dripc_-wa_intersect_early_intersect_prioleau.bed | awk '{sum+=$1} END {print sum}'
1654668
aparna@zeus:/data/aparna/replication_origins/s50/correlations/orc1$ bedtools intersect -a datasets/GSM922790_ChIPseq_Orc1_GradientHela_enrichRegions.bed -b /data/aparna/prioleau_replication_data/peaks/dripc_intersect_early_nointersect_prioleau.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
55401
aparna@zeus:/data/aparna/replication_origins/s50/correlations/orc1$ awk '{print $3 - $2}' /data/aparna/prioleau_replication_data/peaks/dripc_intersect_early_nointersect_prioleau.bed | awk '{sum+=$1} END {print sum}'
9884747

(Orc1_dripc_early_prioleau_overlap / dripc_early_prioleau_overlap ) / (Orc1_dripc_early_noprioleau_overlap / dripc_early_noprioleau_overlap) 

# Fold increase:
>  2.328262/0.005604696
[1] 415.4127

Should map to orc1 and do wilcox test, as well as ANOTHER simulation. Looks hopeful ...
Also overlap with DRIPc in general?

Should also repeat all correlations with DRIP

Should also do ORC1 correlation with prioleau_dripc and prioleau_nodripc to control for whether it's just the presence of prioleau peaks that make orc1 appear there. if both of these are the same ... less hopeful.

aparna@zeus:/data/aparna/replication_origins/s50/correlations/orc1$ bedtools intersect -a datasets/GSM9227
90_ChIPseq_Orc1_GradientHela_enrichRegions.bed -b /data/aparna/prioleau_replication_data/peaks/prioleau_early_-wa_dripc_intersect.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
121266
aparna@zeus:/data/aparna/replication_origins/s50/correlations/orc1$ bedtools intersect -a datasets/GSM922790_ChIPseq_Orc1_GradientHela_enrichRegions.bed -b /data/aparna/prioleau_replication_data/peaks/prioleau_intersect_early_nointersect_dripc.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
532938
aparna@zeus:/data/aparna/replication_origins/s50/correlations/orc1$ awk '{print $3 - $2}' /data/aparna/prioleau_replication_data/peaks/prioleau_early_-wa_dripc_intersect.bed | awk '{sum+=$1} END {print sum}'
3376104
aparna@zeus:/data/aparna/replication_origins/s50/correlations/orc1$ awk '{print $3 - $2}' /data/aparna/pri
oleau_replication_data/peaks/prioleau_intersect_early_nointersect_dripc.bed | awk '{sum+=$1} END {print sum}'
13567240

> (121266/3376104) / (532938/13567240) 
[1] 0.9144039

...So basically no fold increase because DRIPc. Still map. Is this what would be expected if prioleau was distributed at random? The signal may still be significant ... map both dripc+prioleau dripc-prioleau prioleau+dripc prioleau-dripc

9.12.14

aparna@zeus:/data/aparna/replication_origins/s50/correlations/orc1/datasets$ bedgraph_to_wig.pl GSM922790_ChIPseq_Orc1_GradientHela.bedGraph 

Mapping:

DRIPc + Prioleau

aparna@zeus:/data/aparna/replication_origins/s50/correlations/orc1$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -m -w datasets/GSM922790_ChIPseq_Orc1_GradientHela.bedGraph.wig -v -r orc1_cache/ /data/aparna/prioleau_replication_data/peaks/dripc_-wa_intersect_early_intersect_prioleau.bed 

1. Output of /data/aparna/prioleau_replication_data/peaks/dripc_-wa_intersect_early_intersect_prioleau.bed: .//GSM922790_ChIPseq_Orc1_GradientHela_dripc_-wa_intersect_early_intersect_prioleau.txt

DRIPc - Prioleau
aparna@zeus:/data/aparna/replication_origins/s50/correlations/orc1$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -m -w datasets/GSM922790_ChIPseq_Orc1_GradientHela.bedGraph.wig -v -r orc1_cache/ /data/aparna/prioleau_replication_data/peaks/dripc_intersect_early_nointersect_prioleau.bed   

1. Output of /data/aparna/prioleau_replication_data/peaks/dripc_intersect_early_nointersect_prioleau.bed: .//GSM922790_ChIPseq_Orc1_GradientHela_dripc_intersect_early_nointersect_prioleau.txt

Prioleau + DRIPc
aparna@zeus:/data/aparna/replication_origins/s50/correlations/orc1$ perl -I /usr/local/bin/Perl /usr/local
/bin/Perl/map_wig_to_bed.pl -m -w datasets/GSM922790_ChIPseq_Orc1_GradientHela.bedGraph.wig -v -r orc1_cache/ /data/aparna/prioleau_replication_data/peaks/prioleau_early_-wa_dripc_intersect.bed 

1. Output of /data/aparna/prioleau_replication_data/peaks/prioleau_early_-wa_dripc_intersect.bed: .//GSM922790_ChIPseq_Orc1_GradientHela_prioleau_early_-wa_dripc_intersect.txt

Prioleau - DRIPc

aparna@zeus:/data/aparna/replication_origins/s50/correlations/orc1$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -m -w datasets/GSM922790_ChIPseq_Orc1_GradientHela.bedGraph.wig -v -r orc1_cache/ /data/aparna/prioleau_replication_data/peaks/prioleau_intersect_early_nointersect_dripc.bed

1. Output of /data/aparna/prioleau_replication_data/peaks/prioleau_intersect_early_nointersect_dripc.bed: .//GSM922790_ChIPseq_Orc1_GradientHela_prioleau_intersect_early_nointersect_dripc.txt

> d_p<-read.delim("GSM922790_ChIPseq_Orc1_GradientHela_dripc_-wa_intersect_early_intersect_prioleau.txt", header=F)
> d_np<-read.delim("GSM922790_ChIPseq_Orc1_GradientHela_dripc_intersect_early_nointersect_prioleau.txt", header=F)
> p_d<-read.delim("GSM922790_ChIPseq_Orc1_GradientHela_prioleau_early_-wa_dripc_intersect.txt", header=F)
> p_nd<-read.delim("GSM922790_ChIPseq_Orc1_GradientHela_prioleau_intersect_early_nointersect_dripc.txt", header=F)

> wilcox.test(d_p$V4, d_np$V4, alterative="two.sided")$p.value
[1] 1.633302e-46
> wilcox.test(p_d$V4, p_nd$V4, alterative="two.sided")$p.value
[1] 0.0004920239

DRIPc has very significant difference with ORC1 binding, Prioleau has less, but still significant.

> summary(d_p$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.1865  0.3730  0.5136  0.6280 29.5500 
> summary(d_np$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0000  0.1950  0.2796  0.4060 10.4800 
> summary(p_d$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.3075  0.4620  0.5292  0.6560  5.2060 
> summary(p_nd$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.2190  0.4340  0.5128  0.6530 13.5200 

#H4K20Me1
> wilcox.test(d_p$V4, d_np$V4, alternative="two.sided")$p.value
[1] 1.035707e-05
> wilcox.test(p_d$V4, p_nd$V4, alternative="two.sided")$p.value
[1] 2.408749e-105

> summary(p_d$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
  0.185   3.010   4.048   4.472   5.386  15.440
> summary(p_nd$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
  0.059   1.708   2.440   2.888   3.511  19.450
> summary(d_p$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
  0.000   3.187   4.399   5.030   6.095  26.050
> summary(d_np$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
  0.000   2.856   4.067   4.601   5.735  41.250

#S1 sim
summary(sim$V1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
2643000 3572000 3762000 3768000 3958000 5176000 

dripc_s1overlap / dripc * 100
> summary(sim$V1/77164470*100)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  3.426   4.629   4.875   4.883   5.130   6.707 
> #Actual: 7.613298
dripc_s1overlap / originfile * 100
> summary(sim$V1/144962001*100)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.823   2.464   2.595   2.599   2.731   3.570 
> #Actual: 4.052621

Significant to p < 10-6

9.15.14

#S2 simulation
## over DRIPc
> summary(sim$V1 / 77164470*100)
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
0.0001698 0.0707100 0.1009000 0.1065000 0.1364000 0.3882000 
##Over originfile
> summary(sim$V1 / 3820853*100)
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
0.003429 1.428000 2.039000 2.151000 2.754000 7.841000 

NOT significant (actual data below) : 
#S2 dripc_overlap/dripc*100
71272/77164470*100
[1] 0.09236375
#S2 dripc_overlap/originfile*100
71272/3820853*100
[1] 1.865343

> count_larger<-sim$V1[sim$V1 / 77164470*100 > 0.09236375]
> length(count_larger)
[1] 571491
> count_smaller<-sim$V1[sim$V1 / 77164470*100 < 0.09236375]
> length(count_smaller)
[1] 428069
#Really not significant. Running S3 anyway.

aparna@zeus:/data/aparna/replication_origins/s50/stats/another_run/time_specific/s3$ ./run_twointersects.pl /data/aparna/trans_targets/gaps_hg19.bed /data/aparna/trans_targets/hg19.genome /data/aparna/replication_origins/s50/time_specific/common_s3_all.txt /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed 1mil_s3_dripc.txt

aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -wa -a pri
oleau_early_common_int.bed -b /data/aparna/GA/final_peak_calls/peaks/clean/NT2_DRIP_intersect_peaks.bed > prioleau_early_-wa-drip_intersect.bed

aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -v -a prioleau_early_common_int.bed -b /data/aparna/GA/final_peak_calls/peaks/clean/NT2_DRIP_intersect_peaks.bed > prioleau_intersect_early_nointersect_drip.bed

aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ bedtools intersect -wa -a /data/aparna/GA/final_peak_calls/peaks/clean/NT2_DRIP_intersect_peaks.bed -b prioleau_early_common_int.bed > drip_-wa_intersect_early_intersect_prioleau.bed

# moving the eight files here
aparna@zeus:/data/aparna/prioleau_replication_data/peaks$ mkdir early_replicating_regions_intersects

aparna@zeus:/data/aparna/prioleau_replication_data/peaks/early_replicating_regions_inte
rsects$ l
drip_-wa_intersect_early_intersect_prioleau.bed
drip_intersect_early_nointersect_prioleau.bed
dripc_-wa_intersect_early_intersect_prioleau.bed
dripc_intersect_early_nointersect_prioleau.bed
prioleau_early_-wa_drip_intersect.bed
prioleau_early_-wa_dripc_intersect.bed
prioleau_intersect_early_nointersect_drip.bed
prioleau_intersect_early_nointersect_dripc.bed

#These are the eight files to map / correlate.
The DRIPc ones are already done for prioleau signal, dripc signal, lengths of peaks, ORC1, H4K20Me1

Made new folders to organize in /data/aparna/replication_origins/s50/correlations

Moving already-mapped files there
aparna@zeus:/data/aparna/prioleau_replication_data/mapping/m_option$ mv * /data/aparna/replication_origins/s50/correlations/prioleau_origin_signal/

Statistics on DRIP and Prioleau peaks:
> d_p<-read.delim("drip_-wa_intersect_early_intersect_prioleau.bed", header=F)
> d_np<-read.delim("drip_intersect_early_nointersect_prioleau.bed", header=F)
> p_d<-read.delim("prioleau_early_-wa_drip_intersect.bed", header=F)
> p_nd<-read.delim("prioleau_intersect_early_nointersect_drip.bed", header=F)
> 
# Number of peaks:
> length(d_p$V2)
[1] 1848
> length(d_np$V2)
[1] 11834
> length(p_d$V1)
[1] 1848
> length(p_nd$V1)
[1] 3869

# peak lengths:
> summary(d_p$V3-d_p$V2)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
     18     900    1990    3009    3791   28620 
> summary(d_np$V3-d_np$V2)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
      1     579    1224    1809    2374   21110 
> summary(p_d$V3-p_d$V2)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
     50    1999    2814    4320    5496   25790 
> summary(p_nd$V3-p_nd$V2)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
     97    1999    2078    2923    3070   21070 

#Significance:
> wilcox.test((d_p$V3-d_p$V2), (d_np$V3-d_np$V2), alternative="two.sided")$p.value
[1] 2.569102e-67
> wilcox.test((p_d$V3-p_d$V2), (p_nd$V3-p_nd$V2), alternative="two.sided")$p.value
[1] 1.134497e-56


# total bp
> sum(d_p$V3-d_p$V2)
[1] 5560056
> sum(d_np$V3-d_np$V2)
[1] 21409649
> sum(p_d$V3-p_d$V2)
[1] 7983082
> sum(p_nd$V3-p_nd$V2)
[1] 11307981

#for total bp, num peaks signficance need to run simulations.

ORC1 DRIP:
aparna@zeus:/data/aparna/replication_origins/s50/correlations/orc1$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -m -w datasets/GSM922790_ChIPseq_Orc1_GradientHela.bedGraph.wig -v -r orc1_cache/ /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/prioleau_early_-wa_drip_intersect.bed 
1. Output of /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/prioleau_early_-wa_drip_intersect.bed: .//GSM922790_ChIPseq_Orc1_GradientHela_prioleau_early_-wa_drip_intersect.txt

aparna@zeus:/data/aparna/replication_origins/s50/correlations/orc1$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -m -w datasets/GSM922790_ChIPseq_Orc1_GradientHela.bedGraph.wig -v -r orc1_cache/ /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/prioleau_intersect_early_nointersect_drip.bed 
1. Output of /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/prioleau_intersect_early_nointersect_drip.bed: .//GSM922790_ChIPseq_Orc1_GradientHela_prioleau_intersect_early_nointersect_drip.txt

aparna@zeus:/data/aparna/replication_origins/s50/correlations/orc1$ perl -I /usr/local/
bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -m -w datasets/GSM922790_ChIPseq_Orc1_GradientHela.bedGraph.wig -v -r orc1_cache/ /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/drip_-wa_intersect_early_intersect_prioleau.bed 
1. Output of /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/drip_-wa_intersect_early_intersect_prioleau.bed: .//GSM922790_ChIPseq_Orc1_GradientHela_drip_-wa_intersect_early_intersect_prioleau.txt

aparna@zeus:/data/aparna/replication_origins/s50/correlations/orc1$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -m -w datasets/GSM922790_ChIPseq_Orc1_GradientHela.bedGraph.wig -v -r orc1_cache/ /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/drip_intersect_early_nointersect_prioleau.bed  
1. Output of /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/drip_intersect_early_nointersect_prioleau.bed: .//GSM922790_ChIPseq_Orc1_GradientHela_drip_intersect_early_nointersect_prioleau.txt

> wilcox.test(d_p$V4, d_np$V4, alternative="two.sided")$p.value
[1] 7.263766e-120
> wilcox.test(p_d$V4, p_nd$V4, alternative="two.sided")$p.value
[1] 2.389206e-09

> summary(d_p$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.1927  0.3905  0.5027  0.6515 14.5100 
> summary(d_np$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.0000  0.2000  0.2823  0.4130  8.3030 
> summary(p_d$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.3017  0.4660  0.5558  0.6690  6.9940 
> summary(p_nd$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.2190  0.4290  0.5032  0.6510 13.5200 

DRIP H4K20Me1
aparna@zeus:/data/aparna/replication_origins/s50/correlations/h4K20me1$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -m -w dataset/H4K20me1.wig -v -r h4k20me1_cache/ /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/prioleau_early_-wa_drip_intersect.bed 
1. Output of /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/prioleau_early_-wa_drip_intersect.bed: .//H4K20me1_prioleau_early_-wa_drip_intersect.txt

aparna@zeus:/data/aparna/replication_origins/s50/correlations/h4K20me1$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -m -w dataset/H4K20me1.wig -v -r h4k20me1_cache/ /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/prioleau_intersect_early_nointersect_drip.bed 
1. Output of /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/prioleau_intersect_early_nointersect_drip.bed: .//H4K20me1_prioleau_intersect_early_nointersect_drip.txt

aparna@zeus:/data/aparna/replication_origins/s50/correlations/h4K20me1$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -m -w dataset/H4K20me1.wig -v -r h4k20me1_cache/ /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/drip_-wa_intersect_early_intersect_prioleau.bed 
1. Output of /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/drip_-wa_intersect_early_intersect_prioleau.bed: .//H4K20me1_drip_-wa_intersect_early_intersect_prioleau.txt

aparna@zeus:/data/aparna/replication_origins/s50/correlations/h4K20me1$ perl -I /usr/local/bin/Perl /usr/local/bin/Perl/map_wig_to_bed.pl -m -w dataset/H4K20me1.wig -v -r h4k20me1_cache/ /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/drip_intersect_early_nointersect_prioleau.bed   
1. Output of /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/drip_intersect_early_nointersect_prioleau.bed: .//H4K20me1_drip_intersect_early_nointersect_prioleau.txt

 
> d_np<-read.delim("H4K20me1_drip_intersect_early_nointersect_prioleau.txt", header=F)
> p_d<-read.delim("H4K20me1_prioleau_early_-wa_drip_intersect.txt", header=F)
> p_nd<-read.delim("H4K20me1_prioleau_intersect_early_nointersect_drip.txt", header=F)

> wilcox.test(d_p$V4, d_np$V4, alternative="two.sided")$p.value
[1] 0.0001291271
> wilcox.test(p_d$V4, p_nd$V4, alternative="two.sided")$p.value
[1] 2.341214e-215

> summary(d_p$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   2.852   4.025   4.485   5.430  29.990 
> summary(d_np$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   2.613   3.820   4.295   5.348  33.480 
> summary(p_d$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.691   2.748   3.768   4.246   5.064  18.890 
> summary(p_nd$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.059   1.617   2.289   2.679   3.269  19.450 

DRIPc Prioleau signal stats
> wilcox.test(p_d$V4, p_nd$V4, alternative="two.sided")$p.value
[1] 4.265708e-20
> summary(p_d$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.122   0.912   1.584   3.839   3.927  88.420 
> summary(p_nd$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   0.727   1.125   2.174   2.053  53.040 

DRIP Prioleau signal
aparna@zeus:/data/aparna/replication_origins/s50/correlations/prioleau_origin_signal$ perl -I /usr/local/bin/Perl/ /usr/local/bin/Perl/map_wig_to_bed.pl -m -w /data/aparna/prioleau_replication_data/wigs/all_prioleau_MERGED_SAMS.bedgraph.wig -v -r prioleau_cache/ /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/prioleau_early_-wa_drip_intersect.bed  
1. Output of /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/prioleau_early_-wa_drip_intersect.bed: .//all_prioleau_MERGED_SAMS_prioleau_early_-wa_drip_intersect.txt

aparna@zeus:/data/aparna/replication_origins/s50/correlations/prioleau_origin_signal$ perl -I /usr/local/bin/Perl/ /usr/local/bin/Perl/map_wig_to_bed.pl -m -w /data/aparna/prioleau_replication_data/wigs/all_prioleau_MERGED_SAMS.bedgraph.wig -v -r prioleau_cache/ /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/prioleau_intersect_early_nointersect_drip.bed 
1. Output of /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/prioleau_intersect_early_nointersect_drip.bed: .//all_prioleau_MERGED_SAMS_prioleau_intersect_early_nointersect_drip.txt

> p_d<-read.delim("all_prioleau_MERGED_SAMS_prioleau_early_-wa_drip_intersect.txt", header=F)
> p_nd<-read.delim("all_prioleau_MERGED_SAMS_prioleau_intersect_early_nointersect_drip.txt", header=F)
> wilcox.test(p_d$V4, p_nd$V4, alternative="two.sided")$p.value
[1] 7.173259e-182
> summary(p_d$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.190   1.205   2.099   4.232   4.713  88.420 
> summary(p_nd$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   0.673   1.019   1.767   1.697  53.040 

DRIPc signal DRIPc + Prioleau stats
> d_p<-read.delim("NT2_dripc_treat_afterfiting_all_dripc_-wa_intersect_early_intersect_prioleau.txt", header=F)
> d_np<-read.delim("NT2_dripc_treat_afterfiting_all_dripc_intersect_early_nointersect_prioleau.txt", header=F)
> wilcox.test(d_p$V4, d_np$V4, alternative="two.sided")$p.value
[1] 0.001659403
> summary(d_p$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.989   2.876   3.649   4.248   5.033  27.690 
> summary(d_np$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   2.760   3.480   3.949   4.612  20.480

# Length and bp count stats
> wilcox.test((d_p$V3 - d_p$V2), (d_np$V3 - d_np$V2), alternative="two.sided")$p.value
[1] 7.082308e-16
> summary(d_p$V3-d_p$V2)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    108     884    1568    2203    2862   17300 
> summary(d_np$V3-d_np$V2)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   84.0   642.2  1208.0  1652.0  2136.0 22710.0 
> sum(d_p$V3-d_p$V2)
[1] 1654668
> sum(d_np$V3-d_np$V2)
[1] 9884747

DRIPc signal DRIP + Prioleau
aparna@zeus:/data/aparna/replication_origins/s50/correlations/dripc_signal$ perl -I /usr/local/bin/Perl/ /
usr/local/bin/Perl/map_wig_to_bed.pl -m -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_MACS_wiggle/treat/NT2_dripc_treat_afterfiting_all.wig -v -r dripc_cache/ /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/prioleau_early_-wa_drip_intersect.bed 
1. Output of /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/prioleau_early_-wa_drip_intersect.bed: .//NT2_dripc_treat_afterfiting_all_prioleau_early_-wa_drip_intersect.txt

aparna@zeus:/data/aparna/replication_origins/s50/correlations/dripc_signal$ perl -I /usr/local/bin/Perl/ /usr/local/bin/Perl/map_wig_to_bed.pl -m -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_MACS_wiggle/treat/NT2_dripc_treat_afterfiting_all.wig -v -r dripc_cache/ /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/prioleau_intersect_early_nointersect_drip.bed 
1. Output of /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/prioleau_intersect_early_nointersect_drip.bed: .//NT2_dripc_treat_afterfiting_all_prioleau_intersect_early_nointersect_drip.txt

aparna@zeus:/data/aparna/replication_origins/s50/correlations/dripc_signal$ perl -I /usr/local/bin/Perl/ /
usr/local/bin/Perl/map_wig_to_bed.pl -m -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_MACS_wiggle/treat/NT2_dripc_treat_afterfiting_all.wig -v -r dripc_cache/ /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/drip_-wa_intersect_early_intersect_prioleau.bed 
1. Output of /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/drip_-wa_intersect_early_intersect_prioleau.bed: .//NT2_dripc_treat_afterfiting_all_drip_-wa_intersect_early_intersect_prioleau.txt

aparna@zeus:/data/aparna/replication_origins/s50/correlations/dripc_signal$ perl -I /usr/local/bin/Perl/ /usr/local/bin/Perl/map_wig_to_bed.pl -m -w /data/wearn/NT2_dripc/Combined_reps/NT2_dripc_MACS_wiggle/treat/NT2_dripc_treat_afterfiting_all.wig -v -r dripc_cache/ /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/drip_intersect_early_nointersect_prioleau.bed 
1. Output of /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/drip_intersect_early_nointersect_prioleau.bed: .//NT2_dripc_treat_afterfiting_all_drip_intersect_early_nointersect_prioleau.txt

> d_p<-read.delim("NT2_dripc_treat_afterfiting_all_drip_-wa_intersect_early_intersect_prioleau.txt", header=F)
> d_np<-read.delim("NT2_dripc_treat_afterfiting_all_drip_intersect_early_nointersect_prioleau.txt", header=F)
> p_d<-read.delim("NT2_dripc_treat_afterfiting_all_prioleau_early_-wa_drip_intersect.txt", header=F)
> p_nd<-read.delim("NT2_dripc_treat_afterfiting_all_prioleau_intersect_early_nointersect_drip.txt", header=F)
> wilcox.test(d_p$V4, d_np$V4, alternative="two.sided")$p.value
[1] 0.3071358
> wilcox.test(p_d$V4, p_nd$V4, alternative="two.sided")$p.value
[1] 0

> summary(d_p$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   0.650   1.276   1.813   2.340  20.760 
> summary(d_np$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   0.637   1.226   1.827   2.312  32.460 
> summary(p_d$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   0.571   1.090   1.601   2.011  22.830 
> summary(p_nd$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0000  0.1000  0.1790  0.3039  0.3350  4.6860 

DRIP signal
aparna@zeus:/data/aparna/replication_origins/s50/correlations/drip_signal$ perl -I /usr/local/bin/Perl/ /usr/local/bin/Perl/map_wig_to_bed.pl -m -w NT2_drip_both_treat_afterfiting_all.wig -v -r drip_cache/ /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/drip_-wa_intersect_early_intersect_prioleau.bed 
1. Output of /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/drip_-wa_intersect_early_intersect_prioleau.bed: .//NT2_drip_both_treat_afterfiting_all_drip_-wa_intersect_early_intersect_prioleau.txt

aparna@zeus:/data/aparna/replication_origins/s50/correlations/drip_signal$ perl -I /usr/local/bin/Perl/ /usr/local/bin/Perl/map_wig_to_bed.pl -m -w NT2_drip_both_treat_afterfiting_all.wig -v -r drip_cache/ /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/drip_intersect_early_nointersect_prioleau.bed 
1. Output of /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/drip_intersect_early_nointersect_prioleau.bed: .//NT2_drip_both_treat_afterfiting_all_drip_intersect_early_nointersect_prioleau.txt

aparna@zeus:/data/aparna/replication_origins/s50/correlations/drip_signal$ perl -I /usr/local/bin/Perl/ /usr/local/bin/Perl/map_wig_to_bed.pl -m -w NT2_drip_both_treat_afterfiting_all.wig -v -r drip_cache/ /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/prioleau_early_-wa_dripc_intersect.bed 
1. Output of /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/prioleau_early_-wa_dripc_intersect.bed: .//NT2_drip_both_treat_afterfiting_all_prioleau_early_-wa_dripc_intersect.txt

aparna@zeus:/data/aparna/replication_origins/s50/correlations/drip_signal$ perl -I /usr/local/bin/Perl/ /usr/local/bin/Perl/map_wig_to_bed.pl -m -w NT2_drip_both_treat_afterfiting_all.wig -v -r drip_cache/ /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/prioleau_intersect_early_nointersect_dripc.bed 
1. Output of /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/prioleau_intersect_early_nointersect_dripc.bed: .//NT2_drip_both_treat_afterfiting_all_prioleau_intersect_early_nointersect_dripc.txt

aparna@zeus:/data/aparna/replication_origins/s50/correlations/drip_signal$ perl -I /usr/local/bin/Perl/ /usr/local/bin/Perl/map_wig_to_bed.pl -m -w NT2_drip_both_treat_afterfiting_all.wig -v -r drip_cache/ /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/dripc_-wa_intersect_early_intersect_prioleau.bed 
1. Output of /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/dripc_-wa_intersect_early_intersect_prioleau.bed: .//NT2_drip_both_treat_afterfiting_all_dripc_-wa_intersect_early_intersect_prioleau.txt

aparna@zeus:/data/aparna/replication_origins/s50/correlations/drip_signal$ perl -I /usr/local/bin/Perl/ /usr/local/bin/Perl/map_wig_to_bed.pl -m -w NT2_drip_both_treat_afterfiting_all.wig -v -r drip_cache/ /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/dripc_intersect_early_nointersect_prioleau.bed 
1. Output of /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/dripc_intersect_early_nointersect_prioleau.bed: .//NT2_drip_both_treat_afterfiting_all_dripc_intersect_early_nointersect_prioleau.txt



stats
drip
> d_p<-read.delim("../NT2_drip_both_treat_afterfiting_all_drip_-wa_intersect_early_intersect_prioleau.txt", header=F)
> d_np<-read.delim("../NT2_drip_both_treat_afterfiting_all_drip_intersect_early_nointersect_prioleau.txt", header=F)
> wilcox.test(d_p$V4, d_np$V4, alternative="two.sided")$p.value
[1] 1.645769e-15
> summary(d_p$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  2.630   5.632   7.409   9.635  11.370  50.510 
> summary(d_np$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.052   5.267   6.780   8.407   9.800  60.130 

dripc
> p_d<-read.delim("NT2_drip_both_treat_afterfiting_all_prioleau_early_-wa_dripc_intersect.txt", header=F)
> p_nd<-read.delim("NT2_drip_both_treat_afterfiting_all_prioleau_intersect_early_nointersect_dripc.txt", header=F)
> wilcox.test(p_d$V4, p_nd$V4, alternative="two.sided")$p.value
[1] 1.791381e-280
> summary(p_d$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.785   3.484   6.849   9.433  13.060  51.710 
> summary(p_nd$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   0.668   1.087   1.960   2.111  41.590 

> d_p<-read.delim("NT2_drip_both_treat_afterfiting_all_dripc_-wa_intersect_early_intersect_prioleau.txt", header=F)
> d_np<-read.delim("NT2_drip_both_treat_afterfiting_all_dripc_intersect_early_nointersect_prioleau.txt", header=F)
> wilcox.test(d_p$V4, d_np$V4, alternative="two.sided")$p.value
[1] 2.455893e-12
> summary(d_p$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.648   4.122   8.135  11.080  15.500  59.630 
> summary(d_np$V4)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   3.237   6.202   8.843  11.770  66.540 

9.16.14

S3 simulation
> summary(sim/77164470*100)
       V1           
 Min.   :0.0002488  
 1st Qu.:0.0769810  
 Median :0.1094143  
 Mean   :0.1060713  
 3rd Qu.:0.1352941  
 Max.   :0.2630848  
>  #S3 dripc_overlap/originfile*100
> summary(sim/1850839*100)
       V1          
 Min.   : 0.01037  
 1st Qu.: 3.20946  
 Median : 4.56166  
 Mean   : 4.42228  
 3rd Qu.: 5.64063  
 Max.   :10.96843 


# Actual
> #S3 dripc_overlap/dripc*100
> 8194/77164470*100
[1] 0.01061888
> #S3 dripc_overlap/originfile*100
> 8194/1850839*100
[1] 0.4427181

*2.5 median shift for each SEPERATE prioleau wig

9.17.14

aparna@zeus:/data/aparna/trans_targets$ bedtools intersect -c -a /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_peaks.bed -b /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/dripc_-wa_intersect_early_intersect_prioleau.bed > DRIPc_dripc-waintersect_prioleau_early_c_intersect.tmp

aparna@zeus:/data/aparna/trans_targets$ bedtools intersect -c -a /data/wearn/NT2_dripc/Peaks/NT2_DRIP_merg
e_peaks.bed -b /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/drip_-wa_intersect_early_intersect_prioleau.bed > DRIP_drip-waintersect_prioleau_early_c_intersect.tmp

aparna@zeus:/data/aparna/trans_targets$ bedtools intersect -c -a /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_peaks.bed -b /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/dripc_intersect_early_nointersect_prioleau.bed > DRIPc_dripc-vnointersect_prioleau_early_c_intersect.tmp

aparna@zeus:/data/aparna/trans_targets$ bedtools intersect -c -a /data/wearn/NT2_dripc/Peaks/NT2_DRIP_merge_peaks.bed -b /data/aparna/prioleau_replication_data/peaks/early_replicating_regions_intersects/drip_intersect_early_nointersect_prioleau.bed > DRIP_drip-vnointersect_prioleau_early_c_intersect.tmp

aparna@zeus:/data/aparna/trans_targets$ cut -f 4 DRIP_drip-waintersect_prioleau_early_c_intersect.tmp > drip_early_prioleau_1col.tmp
aparna@zeus:/data/aparna/trans_targets$ cut -f 4 DRIP_drip-vnointersect_prioleau_early_c_intersect.tmp > drip_early_noprioleau_1col.tmp
aparna@zeus:/data/aparna/trans_targets$ cut -f 4 DRIPc_dripc-waintersect_prioleau_early_c_intersect.tmp > dripc_early_prioleau_1col.tmp
aparna@zeus:/data/aparna/trans_targets$ cut -f 4 DRIPc_dripc-vnointersect_prioleau_early_c_intersect.tmp > dripc_early_noprioleau_1col.tmp

aparna@zeus:/data/aparna/replication_origins/s50/stats/another_run/picard$ ./run_twointersects.pl /data/aparna/trans_targets/gaps_hg19.bed /data/aparna/trans_targets/hg19.genome /data/aparna/pri
oleau_replication_data/picard_oris/files/intersect_cons_oris.bed /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed /data/aparna/GA/final_peak_calls/peaks/clean/NT2_DRIP_intersect_peaks.bed 1mil_picard_intersect_dripc.txt 1mil_picard_intersect_drip

made clean lateregions time split files

aparna@zeus:/data/aparna/prioleau_replication_data/picard_oris/files$ bedtools intersect -a intersect_cons_oris.bed -b /data/aparna/replication_origins/s50/origin_files/common_origins/common_early_origins_ENCODE.bed > peaks/picard_intersect_I_common_early.bed

aparna@zeus:/data/aparna/prioleau_replication_data/picard_oris/files/peaks$ wc -l picard_intersect_I_common_early.bed                                     
5119 picard_intersect_I_common_early.bed

aparna@zeus:/data/aparna/prioleau_replication_data/picard_oris/files/peaks$ wc -l ../intersect_cons_oris.bed 
36089 ../intersect_cons_oris.bed

aparna@zeus:/data/aparna/prioleau_replication_data/picard_oris/files/peaks$ bedtools intersect -a picard_intersect_I_common_early.bed -b /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
1884371
aparna@zeus:/data/aparna/prioleau_replication_data/picard_oris/files/peaks$ awk '{print $3 - $2}' picard_intersect_I_common_early.bed| awk '{sum+=$1} END {print sum}'
17332186

> 1884371/17332186*100
[1] 10.87209

aparna@zeus:/data/aparna/prioleau_replication_data/picard_oris/files/peaks$ bedtools intersect -v -a picard_intersect_I_common_early.bed -b /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed | wc -l
4017
aparna@zeus:/data/aparna/prioleau_replication_data/picard_oris/files/peaks$ bedtools intersect -wa -a picard_intersect_I_common_early.bed -b /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum/NR}'
5891.69
aparna@zeus:/data/aparna/prioleau_replication_data/picard_oris/files/peaks$ bedtools intersect -v -a picard_intersect_I_common_early.bed -b /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum/NR}'
3012.08
aparna@zeus:/data/aparna/prioleau_replication_data/picard_oris/files/peaks$ bedtools intersect -wa -a picard_intersect_I_common_early.bed -b /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed | wc -l                                                     
1522

aparna@zeus:/data/aparna/prioleau_replication_data/picard_oris/files/peaks$ bedtools intersect -wa -a picard_intersect_I_common_early.bed -b /data/wearn/NT2_dripc/Peaks/NT2_DRIPc_merged_rep12_intersect_peaks.bed | awk '{print $3 - $2}' | awk '{sum+=$1} END {print sum}'
8967157

> 1884371/8967157*100
[1] 21.01414

9.18.14

Modified shuffling script to be more general: now shuffle_genome.pl in /data/aparna/scripts/useful

List of simulations to be run:
Late G1 x DRIPc && DRIP
Late S1 x DRIPc && DRIP
Picard Early x DRIPc && DRIP -> within regions
Early BrdU origins x genes
Late BrdU origins x genes

Mapping: 
Add third boxplot to all mapped boxplot graphs that is:
  sample peaks NOT in BrdU early mapped to file
H3K79Me2
Re-run
  H4K20Me1 
  Peak Length
  ORC1
  DRIP/DRIPc wig
    x DRIP && DRIPc OVERLAP COMP Picard

Full explanation of s50 method, GA_Stochhmm
  with commented code and figures
  

Pie chart / location analysis of BrdU common early regions

Super stringent shuffling for whichever overlap/nooverlap peakset is best (prioleau or picard)

HeLa DRIP to HeLa origins analysis

re-organize folders



